
var loadYoga = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
  return (
    function (loadYoga = {}) {

      function aa() { h.buffer != q.buffer && r(); return q } function w() { h.buffer != q.buffer && r(); return ba } function ca() { h.buffer != q.buffer && r(); return da } function ea() { h.buffer != q.buffer && r(); return fa } function x() { h.buffer != q.buffer && r(); return ha } function y() { h.buffer != q.buffer && r(); return ia } function ja() { h.buffer != q.buffer && r(); return la } var z; z || (z = typeof loadYoga !== 'undefined' ? loadYoga : {}); var ma, na; z.ready = new Promise((a, b) => { ma = a; na = b });
      var oa = Object.assign({}, z), pa = (a, b) => { throw b; }, qa = "object" == typeof window, ra = "function" == typeof importScripts, B = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node, D = z.ENVIRONMENT_IS_PTHREAD || !1, E = ""; function sa(a) { return z.locateFile ? z.locateFile(a, E) : E + a } var ta, ua;
      if (B) {
        var fs = require("fs"), va = require("path"); E = ra ? va.dirname(E) + "/" : __dirname + "/"; ta = (b, c) => { var d = wa(b); if (d) return c ? d : d.toString(); b = b.startsWith("file://") ? new URL(b) : va.normalize(b); return fs.readFileSync(b, c ? void 0 : "utf8") }; ua = b => { b = ta(b, !0); b.buffer || (b = new Uint8Array(b)); return b }; process.argv.slice(2); pa = (b, c) => { process.exitCode = b; throw c; }; z.inspect = () => "[Emscripten Module object]"; let a; try { a = require("worker_threads") } catch (b) {
          throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'),
          b;
        } global.Worker = a.Worker
      } else if (qa || ra) ra ? E = self.location.href : "undefined" != typeof document && document.currentScript && (E = document.currentScript.src), _scriptDir && (E = _scriptDir), 0 !== E.indexOf("blob:") ? E = E.substr(0, E.replace(/[?#].*/, "").lastIndexOf("/") + 1) : E = "", B || (ta = a => { try { var b = new XMLHttpRequest; b.open("GET", a, !1); b.send(null); return b.responseText } catch (e) { if (a = wa(a)) { b = []; for (var c = 0; c < a.length; c++) { var d = a[c]; 255 < d && (d &= 255); b.push(String.fromCharCode(d)) } return b.join("") } throw e; } }, ra && (ua =
        a => { try { var b = new XMLHttpRequest; b.open("GET", a, !1); b.responseType = "arraybuffer"; b.send(null); return new Uint8Array(b.response) } catch (c) { if (a = wa(a)) return a; throw c; } })); B && "undefined" == typeof performance && (global.performance = require("perf_hooks").performance); var xa = console.log.bind(console), ya = console.error.bind(console); B && (xa = (...a) => fs.writeSync(1, a.join(" ") + "\n"), ya = (...a) => fs.writeSync(2, a.join(" ") + "\n")); var za = z.print || xa, F = z.printErr || ya; Object.assign(z, oa); oa = null; z.quit && (pa = z.quit);
      var Aa; z.wasmBinary && (Aa = z.wasmBinary); var noExitRuntime = z.noExitRuntime || !0; function Ba() { this.buffer = new SharedArrayBuffer(Ca / 65536 * 65536) } function Da() { } function Ea(a) {
        this.exports = (
          // EMSCRIPTEN_START_ASM
          function instantiate(info) {
            function Table(ret) {
              // grow method not included; table is not growable
              ret.set = function (i, func) {
                this[i] = func;
              };
              ret.get = function (i) {
                return this[i];
              };
              return ret;
            }

            var bufferView;
            var memorySegments = {};
            var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
            for (var i = 25; i >= 0; --i) {
              base64ReverseLookup[48 + i] = 52 + i; // '0-9'
              base64ReverseLookup[65 + i] = i; // 'A-Z'
              base64ReverseLookup[97 + i] = 26 + i; // 'a-z'
            }
            base64ReverseLookup[43] = 62; // '+'
            base64ReverseLookup[47] = 63; // '/'
            /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
            function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
              var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength * 3 >> 2) - (b64[bLength - 2] == '=') - (b64[bLength - 1] == '=');
              for (; i < bLength; i += 4) {
                b1 = base64ReverseLookup[b64.charCodeAt(i + 1)];
                b2 = base64ReverseLookup[b64.charCodeAt(i + 2)];
                uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
                if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
                if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i + 3)];
              }
              return uint8Array;
            }
            memorySegments[0] = base64DecodeToExistingUint8Array(new Uint8Array(4194), 0, "T25seSBsZWFmIG5vZGVzIHdpdGggY3VzdG9tIG1lYXN1cmUgZnVuY3Rpb25zIHNob3VsZCBtYW51YWxseSBtYXJrIHRoZW1zZWx2ZXMgYXMgZGlydHkAaXNEaXJ0eQBtYXJrRGlydHkAZGVzdHJveQBzZXREaXNwbGF5AGdldERpc3BsYXkAc2V0RmxleAAtKyAgIDBYMHgALTBYKzBYIDBYLTB4KzB4IDB4AHNldEZsZXhHcm93AGdldEZsZXhHcm93AHNldE92ZXJmbG93AGdldE92ZXJmbG93AGNhbGN1bGF0ZUxheW91dABnZXRDb21wdXRlZExheW91dAB1bnNpZ25lZCBzaG9ydABnZXRDaGlsZENvdW50AHVuc2lnbmVkIGludABzZXRKdXN0aWZ5Q29udGVudABnZXRKdXN0aWZ5Q29udGVudABzZXRBbGlnbkNvbnRlbnQAZ2V0QWxpZ25Db250ZW50AGdldFBhcmVudABpbXBsZW1lbnQAc2V0TWF4SGVpZ2h0UGVyY2VudABzZXRIZWlnaHRQZXJjZW50AHNldE1pbkhlaWdodFBlcmNlbnQAc2V0RmxleEJhc2lzUGVyY2VudABzZXRQb3NpdGlvblBlcmNlbnQAc2V0TWFyZ2luUGVyY2VudABzZXRNYXhXaWR0aFBlcmNlbnQAc2V0V2lkdGhQZXJjZW50AHNldE1pbldpZHRoUGVyY2VudABzZXRQYWRkaW5nUGVyY2VudABjcmVhdGVEZWZhdWx0AHVuaXQAcmlnaHQAaGVpZ2h0AHNldE1heEhlaWdodABnZXRNYXhIZWlnaHQAc2V0SGVpZ2h0AGdldEhlaWdodABzZXRNaW5IZWlnaHQAZ2V0TWluSGVpZ2h0AGdldENvbXB1dGVkSGVpZ2h0AGdldENvbXB1dGVkUmlnaHQAbGVmdABnZXRDb21wdXRlZExlZnQAcmVzZXQAX19kZXN0cnVjdABmbG9hdAB1aW50NjRfdAB1c2VXZWJEZWZhdWx0cwBzZXRVc2VXZWJEZWZhdWx0cwBzZXRBbGlnbkl0ZW1zAGdldEFsaWduSXRlbXMAc2V0RmxleEJhc2lzAGdldEZsZXhCYXNpcwBDYW5ub3QgZ2V0IGxheW91dCBwcm9wZXJ0aWVzIG9mIG11bHRpLWVkZ2Ugc2hvcnRoYW5kcwB1c2VMZWdhY3lTdHJldGNoQmVoYXZpb3VyAHNldFVzZUxlZ2FjeVN0cmV0Y2hCZWhhdmlvdXIAc2V0UG9pbnRTY2FsZUZhY3RvcgBNZWFzdXJlQ2FsbGJhY2tXcmFwcGVyAERpcnRpZWRDYWxsYmFja1dyYXBwZXIAQ2Fubm90IHJlc2V0IGEgbm9kZSBzdGlsbCBhdHRhY2hlZCB0byBhIG93bmVyAHNldEJvcmRlcgBnZXRCb3JkZXIAZ2V0Q29tcHV0ZWRCb3JkZXIAdW5zaWduZWQgY2hhcgB0b3AAZ2V0Q29tcHV0ZWRUb3AAc2V0RmxleFdyYXAAZ2V0RmxleFdyYXAAc2V0R2FwAGdldEdhcAAlcABzZXRIZWlnaHRBdXRvAHNldEZsZXhCYXNpc0F1dG8Ac2V0TWFyZ2luQXV0bwBzZXRXaWR0aEF1dG8AU2NhbGUgZmFjdG9yIHNob3VsZCBub3QgYmUgbGVzcyB0aGFuIHplcm8Ac2V0QXNwZWN0UmF0aW8AZ2V0QXNwZWN0UmF0aW8Ac2V0UG9zaXRpb24AZ2V0UG9zaXRpb24Abm90aWZ5T25EZXN0cnVjdGlvbgBzZXRGbGV4RGlyZWN0aW9uAGdldEZsZXhEaXJlY3Rpb24Ac2V0TWFyZ2luAGdldE1hcmdpbgBnZXRDb21wdXRlZE1hcmdpbgBuYW4AYm90dG9tAGdldENvbXB1dGVkQm90dG9tAGJvb2wAZW1zY3JpcHRlbjo6dmFsAHNldEZsZXhTaHJpbmsAZ2V0RmxleFNocmluawBNZWFzdXJlQ2FsbGJhY2sARGlydGllZENhbGxiYWNrAHdpZHRoAHNldE1heFdpZHRoAGdldE1heFdpZHRoAHNldFdpZHRoAGdldFdpZHRoAHNldE1pbldpZHRoAGdldE1pbldpZHRoAGdldENvbXB1dGVkV2lkdGgAdW5zaWduZWQgbG9uZwBzdGQ6OndzdHJpbmcAc3RkOjpzdHJpbmcAc3RkOjp1MTZzdHJpbmcAc3RkOjp1MzJzdHJpbmcAc2V0UGFkZGluZwBnZXRQYWRkaW5nAGdldENvbXB1dGVkUGFkZGluZwBBdHRlbXB0aW5nIHRvIGNvbnN0cnVjdCBZR05vZGUgd2l0aCBudWxsIGNvbmZpZwBUcmllZCB0byBjb25zdHJ1Y3QgWUdOb2RlIHdpdGggbnVsbCBjb25maWcAY3JlYXRlV2l0aENvbmZpZwBpbmYAc2V0QWxpZ25TZWxmAGdldEFsaWduU2VsZgBTaXplAHZhbHVlAFZhbHVlAGNyZWF0ZQBtZWFzdXJlAHNldFBvc2l0aW9uVHlwZQBnZXRQb3NpdGlvblR5cGUAaXNSZWZlcmVuY2VCYXNlbGluZQBzZXRJc1JlZmVyZW5jZUJhc2VsaW5lAGNvcHlTdHlsZQBkb3VibGUATm9kZQBleHRlbmQAaW5zZXJ0Q2hpbGQAZ2V0Q2hpbGQAcmVtb3ZlQ2hpbGQAdm9pZABhdmFpbGFibGVIZWlnaHQgaXMgaW5kZWZpbml0ZSBzbyBoZWlnaHRNZWFzdXJlTW9kZSBtdXN0IGJlIFlHTWVhc3VyZU1vZGVVbmRlZmluZWQAYXZhaWxhYmxlV2lkdGggaXMgaW5kZWZpbml0ZSBzbyB3aWR0aE1lYXN1cmVNb2RlIG11c3QgYmUgWUdNZWFzdXJlTW9kZVVuZGVmaW5lZABzZXRFeHBlcmltZW50YWxGZWF0dXJlRW5hYmxlZABpc0V4cGVyaW1lbnRhbEZlYXR1cmVFbmFibGVkAGRpcnRpZWQAQ2Fubm90IHJlc2V0IGEgbm9kZSB3aGljaCBzdGlsbCBoYXMgY2hpbGRyZW4gYXR0YWNoZWQAdW5zZXRNZWFzdXJlRnVuYwB1bnNldERpcnRpZWRGdW5jAHNldEVycmF0YQBnZXRFcnJhdGEARXhwZWN0IGN1c3RvbSBiYXNlbGluZSBmdW5jdGlvbiB0byBub3QgcmV0dXJuIE5hTgBOQU4ASU5GAGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBzaG9ydD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGZsb2F0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ4X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50NjRfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50NjRfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dWludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGludDMyX3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGNoYXI+AHN0ZDo6YmFzaWNfc3RyaW5nPHVuc2lnbmVkIGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHNpZ25lZCBjaGFyPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxsb25nPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBsb25nPgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxkb3VibGU+AENoaWxkIGFscmVhZHkgaGFzIGEgb3duZXIsIGl0IG11c3QgYmUgcmVtb3ZlZCBmaXJzdC4AQ2Fubm90IHNldCBtZWFzdXJlIGZ1bmN0aW9uOiBOb2RlcyB3aXRoIG1lYXN1cmUgZnVuY3Rpb25zIGNhbm5vdCBoYXZlIGNoaWxkcmVuLgBDYW5ub3QgYWRkIGNoaWxkOiBOb2RlcyB3aXRoIG1lYXN1cmUgZnVuY3Rpb25zIGNhbm5vdCBoYXZlIGNoaWxkcmVuLgAobnVsbCkAJXMKAAABAAAAAwAAAAAAAAACAAAAAwAAAAEAAAACAAAAAAAAAAEAAAABAAAAAAAAAAAAAAAAAMB/AwAAAAAAwH8AAAAAaWkAdgB2aQAAAAAAKxwAACkcAABZHAAAUxwAAFkcAABTHAAAaWlpZmlmaQBMHAAALBwAAHZpaQAtHAAAYBwAAGlpaQAAAAAAAAAAAMoAAADLAAAAzAAAAAAAAAAAAAAAygAAAM0AAADOAAAATBwAAAAAAAAAAAAAAAAAACscAABZHAAAUxwAAFkcAABTHAAAYBwAAFscAABgHAAAaWlpaQAAAABMHAAAMBwAAEwcAAAyHAAAMxwAAGAcAAAAAAAAAAAAAM8AAADQAAAA0QAAAAAAAAAAAAAAzwAAANIAAADOAAAANhwAAEwcAAA2HAAAAAAAAAAAAAAAAAAATBwAADYcAABTHAAATRwAAHZpaWlpAAAATBwAADYcAABZHAAAdmlpZgAAAABMHAAANhwAAE0cAAB2aWlpAAAAAEwcAAA2HAAAUxwAAE0cAAA3HAAAUxwAAE0cAAA3HAAAUxwAADccAABpAGRpaQB2aWlkAAA7HAAAOxwAADYcAABMHAAAOxwAAEwcAAA7HAAAOhwAAEwcAAA7HAAAUxwAAEwcAAA7HAAAUxwAAFocAAB2aWlpZAAAAEwcAAA7HAAAWhwAAFMcAAA8HAAAORwAADwcAABTHAAAORwAADwcAABaHAAAPBwAAFocAAA8HAAAUxwAAGRpaWkAAAAAWRwAADscAABTHAAAZmlpaQAAAABMHAAAOxwAADscAABUHAAATBwAADscAAA7HAAAVBwAADwcAAA7HAAAOxwAADscAAA7HAAAVBwAAE0cAAA7HAAATBwAADscAABNHAAATBwAADscAAApHAAATBwAADscAAAwHAAATRwAADwcAAAAAAAATBwAADscAABaHAAAWhwAAFMcAAB2aWlkZGkAADgcAAA8HAAAAAAAAAAAAAAAAAAAGQAKABkZGQAAAAAFAAAAAAAACQAAAAALAAAAAAAAAAAZABEKGRkZAwoHAAEACQsYAAAJBgsAAAsABhkAAAAZGRkAAAAAAAAAAAAAAAAAAAAADgAAAAAAAAAAGQAKDRkZGQANAAACAAkOAAAACQAOAAAO");
            memorySegments[1] = base64DecodeToExistingUint8Array(new Uint8Array(33), 0, "DAAAAAAAAAAAAAAAEwAAAAATAAAAAAkMAAAAAAAMAAAM");
            memorySegments[2] = base64DecodeToExistingUint8Array(new Uint8Array(33), 0, "EAAAAAAAAAAAAAAADwAAAAQPAAAAAAkQAAAAAAAQAAAQ");
            memorySegments[3] = base64DecodeToExistingUint8Array(new Uint8Array(42), 0, "EgAAAAAAAAAAAAAAEQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa");
            memorySegments[4] = base64DecodeToExistingUint8Array(new Uint8Array(14), 0, "GgAAABoaGgAAAAAAAAk=");
            memorySegments[5] = base64DecodeToExistingUint8Array(new Uint8Array(33), 0, "FAAAAAAAAAAAAAAAFwAAAAAXAAAAAAkUAAAAAAAUAAAU");
            memorySegments[6] = base64DecodeToExistingUint8Array(new Uint8Array(51), 0, "FgAAAAAAAAAAAAAAFQAAAAAVAAAAAAkWAAAAAAAWAAAWAAAwMTIzNDU2Nzg5QUJDREVG");
            memorySegments[7] = base64DecodeToExistingUint8Array(new Uint8Array(1), 0, "2A==");
            memorySegments[8] = base64DecodeToExistingUint8Array(new Uint8Array(8), 0, "//////////8=");
            memorySegments[9] = base64DecodeToExistingUint8Array(new Uint8Array(92), 0, "0CMBAAAAAAAFAAAAAAAAAAAAAADTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADUAAAA1QAAAHYcAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA//////////8=");
            memorySegments[10] = base64DecodeToExistingUint8Array(new Uint8Array(93), 0, "GBcAABgXAAAAAAAABQAAAAAAAAAAAAAA1gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1AAAANcAAAB4HwAAAAQAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAP////8K");
            memorySegments[11] = base64DecodeToExistingUint8Array(new Uint8Array(4), 0, "2QAAAA==");

            var scratchBuffer = new ArrayBuffer(16);
            var i32ScratchView = new Int32Array(scratchBuffer);
            var f32ScratchView = new Float32Array(scratchBuffer);
            var f64ScratchView = new Float64Array(scratchBuffer);

            function wasm2js_scratch_load_i32(index) {
              return i32ScratchView[index];
            }

            function wasm2js_scratch_store_i32(index, value) {
              i32ScratchView[index] = value;
            }

            function wasm2js_scratch_load_f64() {
              return f64ScratchView[0];
            }

            function wasm2js_scratch_store_f64(value) {
              f64ScratchView[0] = value;
            }

            function wasm2js_atomic_wait_i32(offset, ptr, expected, timeoutLow, timeoutHigh) {
              ptr = (ptr + offset) >> 2;
              var timeout = Infinity;
              if (timeoutHigh >= 0) {
                // Convert from nanoseconds to milliseconds
                // Taken from convertI32PairToI53 in emscripten's library_int53.js
                timeout = ((timeoutLow >>> 0) / 1e6) + timeoutHigh * (4294967296 / 1e6);
              }
              var view = new Int32Array(bufferView.buffer); // TODO cache
              var result = Atomics.wait(view, ptr, expected, timeout);
              if (result == 'ok') return 0;
              if (result == 'not-equal') return 1;
              if (result == 'timed-out') return 2;
              throw 'bad result ' + result;
            }
            function wasm2js_trap() { throw new Error('abort'); }

            function wasm2js_scratch_store_f32(value) {
              f32ScratchView[2] = value;
            }

            function wasm2js_scratch_load_f32() {
              return f32ScratchView[2];
            }

            function wasm2js_memory_copy(dest, source, size) {
              // TODO: traps on invalid things
              bufferView.copyWithin(dest, source, source + size);
            }

            function wasm2js_memory_fill(dest, value, size) {
              dest = dest >>> 0;
              size = size >>> 0;
              if (dest + size > bufferView.length) throw "trap: invalid memory.fill";
              bufferView.fill(value, dest, dest + size);
            }

            function wasm2js_memory_init(segment, dest, offset, size) {
              // TODO: traps on invalid things
              bufferView.set(memorySegments[segment].subarray(offset, offset + size), dest);
            }

            function wasm2js_data_drop(segment) {
              // TODO: traps on invalid things
              memorySegments[segment] = new Uint8Array(0);
            }

            function asmFunc(imports) {
              var a = imports.a;
              var memory = a.a;
              var buffer = memory.buffer;
              memory.grow = __wasm_memory_grow;
              var HEAP8 = new Int8Array(buffer);
              var HEAP16 = new Int16Array(buffer);
              var HEAP32 = new Int32Array(buffer);
              var HEAPU8 = new Uint8Array(buffer);
              var HEAPU16 = new Uint16Array(buffer);
              var HEAPU32 = new Uint32Array(buffer);
              var HEAPF32 = new Float32Array(buffer);
              var HEAPF64 = new Float64Array(buffer);
              var Math_imul = Math.imul;
              var Math_fround = Math.fround;
              var Math_abs = Math.abs;
              var Math_clz32 = Math.clz32;
              var Math_min = Math.min;
              var Math_max = Math.max;
              var Math_floor = Math.floor;
              var Math_ceil = Math.ceil;
              var Math_trunc = Math.trunc;
              var Math_sqrt = Math.sqrt;
              var fimport$0 = a.b;
              var fimport$1 = a.c;
              var fimport$2 = a.d;
              var fimport$3 = a.e;
              var fimport$4 = a.f;
              var fimport$5 = a.g;
              var fimport$6 = a.h;
              var fimport$7 = a.i;
              var fimport$8 = a.j;
              var fimport$9 = a.k;
              var fimport$10 = a.l;
              var fimport$11 = a.m;
              var fimport$12 = a.n;
              var fimport$13 = a.o;
              var fimport$14 = a.p;
              var fimport$15 = a.q;
              var fimport$16 = a.r;
              var fimport$17 = a.s;
              var fimport$18 = a.t;
              var fimport$19 = a.u;
              var fimport$20 = a.v;
              var fimport$21 = a.w;
              var fimport$22 = a.x;
              var fimport$23 = a.y;
              var fimport$24 = a.z;
              var fimport$25 = a.A;
              var fimport$26 = a.B;
              var fimport$27 = a.C;
              var fimport$28 = a.D;
              var fimport$29 = a.E;
              var fimport$30 = a.F;
              var fimport$31 = a.G;
              var fimport$32 = a.H;
              var fimport$33 = a.I;
              var fimport$34 = a.J;
              var fimport$35 = a.K;
              var fimport$36 = a.L;
              var fimport$37 = a.M;
              var global$0 = 74704;
              var global$1 = 0;
              var global$2 = 0;
              var global$3 = 0;
              var global$4 = 0;
              var global$5 = 0;
              var global$6 = 0;
              var global$7 = 0;
              var i64toi32_i32$HIGH_BITS = 0;
              // EMSCRIPTEN_START_FUNCS
              function $74($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) { var $14_1 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19_1 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24_1 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = 0, $33_1 = 0, $34_1 = Math_fround(0), $35_1 = 0, $36_1 = 0, $37_1 = Math_fround(0), $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = Math_fround(0), $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = Math_fround(0), $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = Math_fround(0), $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = Math_fround(0), $56_1 = 0, $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60_1 = Math_fround(0), $61_1 = 0, $62_1 = Math_fround(0), $63_1 = 0, $64_1 = Math_fround(0), $65_1 = Math_fround(0), $66_1 = 0, $67_1 = Math_fround(0), $68_1 = Math_fround(0), $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0); $14_1 = global$0 - 384 | 0; global$0 = $14_1; label$1: { label$2: { label$3: { if (!($4_1 ? $1_1 != $1_1 : 0)) { if (!($5_1 ? $2_1 != $2_1 : 0)) { $16_1 = ($8_1 ? 0 : 4) + $10_1 | 0; HEAP32[$16_1 >> 2] = HEAP32[$16_1 >> 2] + 1; $16_1 = HEAP32[$0_1 + 24 >> 2] & 3; $63_1 = ($3_1 | 0) <= 1 ? 1 : $3_1; $38_1 = $16_1 ? $16_1 : $63_1; HEAP8[$0_1 + 300 | 0] = HEAPU8[$0_1 + 300 | 0] & 252 | $38_1 & 3; $16_1 = $0_1 + 252 | 0; $3_1 = (($38_1 | 0) != 1) << 3; $51_1 = ($38_1 | 0) == 2 ? 3 : 2; $19_1 = $2($0_1, $51_1, $6_1); HEAPF32[$16_1 + $3_1 >> 2] = $19_1; $18_1 = $16_1; $16_1 = (($38_1 | 0) == 1) << 3; $28_1 = $5($0_1, $51_1, $6_1); HEAPF32[$18_1 + $16_1 >> 2] = $28_1; $21_1 = $2($0_1, 0, $6_1); HEAPF32[$0_1 + 256 >> 2] = $21_1; $30_1 = $5($0_1, 0, $6_1); HEAPF32[$0_1 + 264 >> 2] = $30_1; $18_1 = $0_1 + 268 | 0; wasm2js_i32$0 = $18_1 + $3_1 | 0, wasm2js_f32$0 = $3($0_1, $51_1), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0; wasm2js_i32$0 = $16_1 + $18_1 | 0, wasm2js_f32$0 = $4($0_1, $51_1), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0; $15_1 = $3($0_1, 0); HEAPF32[$0_1 + 272 >> 2] = $15_1; $31_1 = $4($0_1, 0); HEAPF32[$0_1 + 280 >> 2] = $31_1; $18_1 = $3_1; $3_1 = $0_1 + 284 | 0; wasm2js_i32$0 = $18_1 + $3_1 | 0, wasm2js_f32$0 = $7($0_1, $51_1, $6_1), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0; wasm2js_i32$0 = $3_1 + $16_1 | 0, wasm2js_f32$0 = $6($0_1, $51_1, $6_1), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0; $17_1 = $7($0_1, 0, $6_1); HEAPF32[$0_1 + 288 >> 2] = $17_1; $24_1 = $6($0_1, 0, $6_1); HEAPF32[$0_1 + 296 >> 2] = $24_1; $19_1 = Math_fround($19_1 + $28_1); $28_1 = Math_fround($21_1 + $30_1); $3_1 = HEAP32[$0_1 + 8 >> 2]; if ($3_1) { $21_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 284 >> 2] + HEAPF32[$0_1 + 292 >> 2]) + HEAPF32[$0_1 + 268 >> 2]) + HEAPF32[$0_1 + 276 >> 2]); $2_1 = $5_1 ? Math_fround($2_1 - $28_1) : Math_fround(NaN); $15_1 = Math_fround(Math_fround($17_1 + $24_1) + $15_1); $17_1 = $4_1 ? Math_fround($1_1 - $19_1) : Math_fround(NaN); $1_1 = $17_1; label$7: { if ($1_1 != $1_1) { break label$7 } $1_1 = Math_fround($17_1 - $21_1); if ($1_1 != $1_1) { $1_1 = Math_fround(0); break label$7 } $1_1 = $1($1_1, Math_fround(0)) } $19_1 = Math_fround($15_1 + $31_1); $15_1 = $2_1; label$9: { if ($2_1 != $2_1) { break label$9 } $15_1 = Math_fround($2_1 - $19_1); if ($15_1 != $15_1) { $15_1 = Math_fround(0); break label$9 } $15_1 = $1($15_1, Math_fround(0)) } if (!(($4_1 | 0) != 1 | ($5_1 | 0) != 1)) { $1_1 = $9($0_1, 2, $17_1, $6_1); $3_1 = $1_1 != $1_1; $15_1 = Math_fround(Math_fround($7($0_1, 2, $6_1) + $3($0_1, 2)) + Math_fround($6($0_1, 2, $6_1) + $4($0_1, 2))); label$12: { if (!($3_1 | $15_1 != $15_1)) { $1_1 = $1($1_1, $15_1); break label$12 } $1_1 = $3_1 ? $15_1 : $1_1 } HEAPF32[$0_1 + 516 >> 2] = $1_1; $1_1 = $9($0_1, 0, $2_1, $7_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, 0, $6_1) + $3($0_1, 0)) + Math_fround($6($0_1, 0, $6_1) + $4($0_1, 0))); label$14: { if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$14 } $1_1 = $3_1 ? $2_1 : $1_1 } HEAPF32[$0_1 + 520 >> 2] = $1_1; break label$1 } label$16: { if (HEAPU8[$0_1 + 4 | 0] & 16) { FUNCTION_TABLE[$3_1 | 0]($14_1 + 28 | 0, $0_1, $1_1, $4_1, $15_1, $5_1, 0); break label$16 } FUNCTION_TABLE[$3_1 | 0]($14_1 + 28 | 0, $0_1, $1_1, $4_1, $15_1, $5_1) } HEAP32[$10_1 + 20 >> 2] = HEAP32[$10_1 + 20 >> 2] + 1; $3_1 = ($13_1 << 2) + $10_1 | 0; HEAP32[$3_1 + 24 >> 2] = HEAP32[$3_1 + 24 >> 2] + 1; $1_1 = Math_fround($21_1 + HEAPF32[$14_1 + 28 >> 2]); $1_1 = $9($0_1, 2, $4_1 ? ($4_1 | 0) == 2 ? $1_1 : $17_1 : $1_1, $6_1); $3_1 = $1_1 != $1_1; $15_1 = Math_fround(Math_fround($7($0_1, 2, $6_1) + $3($0_1, 2)) + Math_fround($6($0_1, 2, $6_1) + $4($0_1, 2))); label$18: { if (!($3_1 | $15_1 != $15_1)) { $1_1 = $1($1_1, $15_1); break label$18 } $1_1 = $3_1 ? $15_1 : $1_1 } HEAPF32[$0_1 + 516 >> 2] = $1_1; $1_1 = Math_fround($19_1 + HEAPF32[$14_1 + 32 >> 2]); $1_1 = $9($0_1, 0, $5_1 ? ($5_1 | 0) == 2 ? $1_1 : $2_1 : $1_1, $7_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, 0, $6_1) + $3($0_1, 0)) + Math_fround($6($0_1, 0, $6_1) + $4($0_1, 0))); label$20: { if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$20 } $1_1 = $3_1 ? $2_1 : $1_1 } HEAPF32[$0_1 + 520 >> 2] = $1_1; break label$1 } $3_1 = HEAP32[$0_1 + 556 >> 2]; $13_1 = HEAP32[$0_1 + 560 >> 2]; if (($3_1 | 0) == ($13_1 | 0)) { $28_1 = Math_fround($2_1 - $28_1); $1_1 = $9($0_1, 2, $4_1 & -3 ? Math_fround($1_1 - $19_1) : Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 284 >> 2] + HEAPF32[$0_1 + 292 >> 2]) + HEAPF32[$0_1 + 268 >> 2]) + HEAPF32[$0_1 + 276 >> 2]), $6_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, 2, $6_1) + $3($0_1, 2)) + Math_fround($6($0_1, 2, $6_1) + $4($0_1, 2))); label$23: { if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$23 } $1_1 = $3_1 ? $2_1 : $1_1 } HEAPF32[$0_1 + 516 >> 2] = $1_1; $1_1 = $9($0_1, 0, $5_1 & -3 ? $28_1 : Math_fround(Math_fround(Math_fround($17_1 + $24_1) + $15_1) + $31_1), $7_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, 0, $6_1) + $3($0_1, 0)) + Math_fround($6($0_1, 0, $6_1) + $4($0_1, 0))); label$27: { if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$27 } $1_1 = $3_1 ? $2_1 : $1_1 } HEAPF32[$0_1 + 520 >> 2] = $1_1; break label$1 } label$29: { if ($8_1) { break label$29 } $17_1 = Math_fround($1_1 - $19_1); $15_1 = Math_fround($2_1 - $28_1); if (!(($4_1 | 0) == 2 & $17_1 <= Math_fround(0) | !(!($15_1 <= Math_fround(0)) | ($5_1 | 0) != 2) & $15_1 == $15_1) & (($4_1 | 0) != 1 | ($5_1 | 0) != 1)) { break label$29 } $1_1 = $9($0_1, 2, $17_1 == $17_1 ? ($4_1 | 0) == 2 ? $17_1 < Math_fround(0) ? Math_fround(0) : $17_1 : $17_1 : Math_fround(0), $6_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, 2, $6_1) + $3($0_1, 2)) + Math_fround($6($0_1, 2, $6_1) + $4($0_1, 2))); label$30: { if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$30 } $1_1 = $3_1 ? $2_1 : $1_1 } HEAPF32[$0_1 + 516 >> 2] = $1_1; $1_1 = $9($0_1, 0, $15_1 != $15_1 ? Math_fround(0) : ($5_1 | 0) == 2 ? $15_1 < Math_fround(0) ? Math_fround(0) : $15_1 : $15_1, $7_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, 0, $6_1) + $3($0_1, 0)) + Math_fround($6($0_1, 0, $6_1) + $4($0_1, 0))); label$32: { if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$32 } $1_1 = $3_1 ? $2_1 : $1_1 } HEAPF32[$0_1 + 520 >> 2] = $1_1; break label$1 } $52_1 = $13_1 - $3_1 | 0; $45_1 = $52_1 >> 2; while (1) { $16_1 = HEAP32[$3_1 >> 2]; if (HEAP32[$16_1 + 552 >> 2] != ($0_1 | 0)) { $18_1 = HEAP32[$0_1 + 568 >> 2]; $16_1 = $121(HEAP32[$18_1 >> 2], HEAPU8[$18_1 + 8 | 0], $16_1, $0_1, $22_1, 0); HEAP32[$3_1 >> 2] = $16_1; HEAP32[$16_1 + 552 >> 2] = $0_1 } $22_1 = $22_1 + 1 | 0; $3_1 = $3_1 + 4 | 0; if (($13_1 | 0) != ($3_1 | 0)) { continue } break } HEAP8[$0_1 + 300 | 0] = HEAPU8[$0_1 + 300 | 0] & 251; $22_1 = 3; $33_1 = HEAP32[$0_1 + 24 >> 2]; $3_1 = $33_1 >>> 2 & 3; label$36: { label$37: { label$38: { if (($38_1 | 0) == 2) { $13_1 = 0; label$40: { switch ($3_1 - 2 | 0) { case 0: break label$36; case 1: break label$40; default: break label$38 } } $22_1 = 2; break label$36 } $22_1 = 2; $13_1 = 0; if ($3_1 >>> 0 > 1) { break label$37 } } $13_1 = $22_1 } $22_1 = $3_1 } $64_1 = Math_fround($1_1 - $19_1); $46_1 = Math_fround(Math_fround($7($0_1, $22_1, $6_1) + $3($0_1, $22_1)) + Math_fround($6($0_1, $22_1, $6_1) + $4($0_1, $22_1))); $31_1 = Math_fround($7($0_1, $13_1, $6_1) + $3($0_1, $13_1)); $41_1 = Math_fround($31_1 + Math_fround($6($0_1, $13_1, $6_1) + $4($0_1, $13_1))); $42_1 = $22_1 >>> 0 > 1; $21_1 = $73($0_1, 0, $64_1, $42_1 ? $46_1 : $41_1, $6_1); $65_1 = Math_fround($2_1 - $28_1); $34_1 = $73($0_1, 1, $65_1, $42_1 ? $41_1 : $46_1, $7_1); $30_1 = $42_1 ? $34_1 : $21_1; $28_1 = $42_1 ? $21_1 : $34_1; $47_1 = HEAP32[$0_1 + 560 >> 2]; $16_1 = HEAP32[$0_1 + 556 >> 2]; $36_1 = $42_1 ? $4_1 : $5_1; label$41: { if (($36_1 | 0) != 1) { break label$41 } if (($16_1 | 0) == ($47_1 | 0)) { break label$3 } $3_1 = $16_1; while (1) { $18_1 = HEAP32[$3_1 >> 2]; label$43: { if (!$81($18_1)) { break label$43 } $26_1 = 0; if ($20_1) { break label$41 } label$44: { label$45: { if (!HEAP32[$18_1 + 552 >> 2]) { $15_1 = Math_fround(0); break label$45 } $2_1 = HEAPF32[$18_1 + 32 >> 2]; if ($2_1 != $2_1) { $15_1 = Math_fround(0); $2_1 = HEAPF32[$18_1 + 28 >> 2]; if (!($2_1 > Math_fround(0))) { break label$45 } } $15_1 = $2_1; if ($2_1 != $2_1) { break label$44 } } if (Math_fround(Math_abs($15_1)) < Math_fround(9999999747378752e-20)) { break label$41 } } $1_1 = $32($18_1); if ($1_1 != $1_1) { $20_1 = $18_1; break label$43 } $20_1 = $18_1; if (Math_fround(Math_abs($1_1)) < Math_fround(9999999747378752e-20)) { break label$41 } } $26_1 = $20_1; $3_1 = $3_1 + 4 | 0; if (($47_1 | 0) != ($3_1 | 0)) { continue } break } } if (($16_1 | 0) == ($47_1 | 0)) { break label$3 } $39_1 = ($38_1 | 0) <= 1 ? 1 : $38_1; $48_1 = $34_1 == $34_1; $53_1 = $21_1 == $21_1; $15_1 = Math_fround(0); while (1) { $25_1 = HEAP32[$16_1 >> 2]; $82($25_1); $18_1 = HEAP32[$25_1 + 24 >> 2]; label$50: { if ($18_1 & 4194304) { $72($25_1, 0); $3_1 = HEAPU8[$25_1 + 4 | 0]; $18_1 = $3_1 | 1; HEAP8[$25_1 + 4 | 0] = $18_1; if (!($3_1 & 4)) { break label$50 } HEAP8[$25_1 + 4 | 0] = $18_1 & 251; break label$50 } if ($8_1) { $3_1 = $18_1 & 3; $84($25_1, $3_1 ? $3_1 : $39_1, $28_1, $30_1, $21_1); $18_1 = HEAP32[$25_1 + 24 >> 2] } if (($18_1 & 196608) == 131072) { break label$50 } label$53: { if (($25_1 | 0) == ($26_1 | 0)) { HEAP32[$26_1 + 308 >> 2] = 0; HEAP32[$26_1 + 304 >> 2] = $12_1; $2_1 = Math_fround(0); break label$53 } $54_1 = HEAP32[$0_1 + 24 >> 2]; $3_1 = $54_1 >>> 2 & 3; label$55: { label$56: { if (($38_1 | 0) != 2) { break label$56 } $20_1 = 3; label$57: { switch ($3_1 - 2 | 0) { case 0: break label$55; case 1: break label$57; default: break label$56 } } $20_1 = 2; break label$55 } $20_1 = $3_1 } $43_1 = $20_1 >>> 0 > 1; $19_1 = $43_1 ? $21_1 : $34_1; $2_1 = Math_fround(0); $1_1 = HEAPF32[$25_1 + 40 >> 2]; label$58: { label$59: { $23_1 = HEAP32[$25_1 + 40 >> 2]; label$60: { if (($23_1 | 0) == 2139156720) { break label$60 } if (($23_1 | 0) == 2140081935) { break label$59 } $3_1 = 4436; label$61: { if (($23_1 | 0) != 2141891242) { if ($1_1 == $1_1) { break label$61 } $3_1 = 4444 } $2_1 = HEAPF32[$3_1 >> 2]; label$63: { label$64: { $23_1 = HEAP32[$3_1 + 4 >> 2]; switch ($23_1 | 0) { case 0: case 3: break label$64; default: break label$63 } } $1_1 = Math_fround(NaN); if (!(HEAPF32[$25_1 + 28 >> 2] > Math_fround(0))) { break label$58 } $23_1 = HEAP8[HEAP32[$25_1 + 568 >> 2] + 8 | 0] & 1; $3_1 = $23_1 ? 2143289344 : 0; $23_1 = $23_1 ? 3 : 1; $2_1 = (wasm2js_scratch_store_i32(2, $3_1), wasm2js_scratch_load_f32()) } $1_1 = Math_fround(NaN); switch ($23_1 - 1 | 0) { case 0: break label$59; case 1: break label$60; default: break label$58 } } $2_1 = (wasm2js_scratch_store_i32(2, ($23_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($23_1 & 1073741824)) { break label$59 } } $1_1 = Math_fround(Math_fround($19_1 * $2_1) * Math_fround(.009999999776482582)); break label$58 } $1_1 = $2_1 } $2_1 = HEAPF32[$25_1 + 572 >> 2]; $23_1 = 0; label$65: { label$66: { $35_1 = HEAP32[$25_1 + 576 >> 2]; switch ($35_1 | 0) { case 0: case 3: break label$65; default: break label$66 } } $17_1 = HEAPF32[$25_1 + 572 >> 2]; if (!(($35_1 | 0) != 1 | $17_1 != $17_1)) { if ($2_1 < Math_fround(0)) { break label$65 } $23_1 = 1; break label$65 } $23_1 = 1; if (($35_1 | 0) != 2 | $17_1 != $17_1) { break label$65 } $23_1 = 0; if ($2_1 < Math_fround(0)) { break label$65 } $23_1 = $53_1 } $17_1 = HEAPF32[$25_1 + 580 >> 2]; $3_1 = 0; label$68: { label$69: { $32_1 = HEAP32[$25_1 + 584 >> 2]; switch ($32_1 | 0) { case 0: case 3: break label$68; default: break label$69 } } $24_1 = HEAPF32[$25_1 + 580 >> 2]; if (!(($32_1 | 0) != 1 | $24_1 != $24_1)) { if ($17_1 < Math_fround(0)) { break label$68 } $3_1 = 1; break label$68 } $3_1 = 1; if (($32_1 | 0) != 2 | $24_1 != $24_1) { break label$68 } $3_1 = 0; if ($17_1 < Math_fround(0)) { break label$68 } $3_1 = $48_1 } label$71: { label$72: { if (!($1_1 != $1_1 | $19_1 != $19_1)) { $2_1 = HEAPF32[$25_1 + 308 >> 2]; if ((!(HEAP8[HEAP32[$25_1 + 568 >> 2] + 12 | 0] & 1) | HEAP32[$25_1 + 304 >> 2] == ($12_1 | 0)) & $2_1 == $2_1) { break label$71 } $2_1 = Math_fround(Math_fround($7($25_1, $20_1, $21_1) + $3($25_1, $20_1)) + Math_fround($6($25_1, $20_1, $21_1) + $4($25_1, $20_1))); if (!($2_1 <= $1_1) & $1_1 < $2_1) { break label$72 } $2_1 = $1_1; break label$72 } if ($23_1 & $43_1) { $17_1 = Math_fround(Math_fround($7($25_1, 2, $21_1) + $3($25_1, 2)) + Math_fround($6($25_1, 2, $21_1) + $4($25_1, 2))); $1_1 = Math_fround(NaN); label$76: { switch ($35_1 - 1 | 0) { case 1: $2_1 = Math_fround(Math_fround($21_1 * $2_1) * Math_fround(.009999999776482582)); case 0: $1_1 = $2_1; if ($17_1 <= $1_1) { break label$72 } break; default: break label$76 } } if (!($1_1 == $1_1 | $17_1 == $17_1)) { $2_1 = $1_1; break label$72 } if ($1_1 < $17_1) { $2_1 = $17_1; break label$72 } $2_1 = $1_1 != $1_1 ? $17_1 : $1_1; break label$72 } if (!($43_1 | $3_1 ^ 1)) { $1_1 = Math_fround(Math_fround($7($25_1, 0, $21_1) + $3($25_1, 0)) + Math_fround($6($25_1, 0, $21_1) + $4($25_1, 0))); $2_1 = Math_fround(NaN); label$82: { switch ($32_1 - 1 | 0) { case 1: $17_1 = Math_fround(Math_fround($34_1 * $17_1) * Math_fround(.009999999776482582)); case 0: $2_1 = $17_1; if ($1_1 <= $2_1) { break label$72 } break; default: break label$82 } } if ($2_1 != $2_1 & $1_1 != $1_1) { break label$72 } if ($1_1 > $2_1) { $2_1 = $1_1; break label$72 } $2_1 = $2_1 != $2_1 ? $1_1 : $2_1; break label$72 } HEAP32[$14_1 + 364 >> 2] = 2143289344; HEAP32[$14_1 + 28 >> 2] = 2143289344; $44_1 = 0; HEAP32[$14_1 + 360 >> 2] = 0; HEAP32[$14_1 + 356 >> 2] = 0; $24_1 = Math_fround($2($25_1, 2, $21_1) + $5($25_1, 2, $21_1)); $27_1 = $2($25_1, 0, $21_1); $29_1 = $5($25_1, 0, $21_1); $19_1 = Math_fround(NaN); $40_1 = 0; $1_1 = Math_fround(NaN); if ($23_1) { label$87: { label$88: { switch ($35_1 - 1 | 0) { case 0: $1_1 = $2_1; break label$87; case 1: break label$88; default: break label$87 } } $1_1 = Math_fround(Math_fround($21_1 * $2_1) * Math_fround(.009999999776482582)) } HEAP32[$14_1 + 360 >> 2] = 1; $1_1 = Math_fround($24_1 + $1_1); HEAPF32[$14_1 + 28 >> 2] = $1_1; $40_1 = 1 } $27_1 = Math_fround($27_1 + $29_1); if ($3_1) { $2_1 = Math_fround(NaN); label$91: { label$92: { switch ($32_1 - 1 | 0) { case 0: $2_1 = $17_1; break label$91; case 1: break label$92; default: break label$91 } } $2_1 = Math_fround(Math_fround($34_1 * $17_1) * Math_fround(.009999999776482582)) } HEAP32[$14_1 + 356 >> 2] = 1; $19_1 = Math_fround($27_1 + $2_1); HEAPF32[$14_1 + 364 >> 2] = $19_1; $44_1 = 1 } $35_1 = $20_1 >>> 0 < 2; $32_1 = $54_1 & 3145728; label$94: { label$95: { label$96: { if (!(!$43_1 & ($32_1 | 0) == 2097152)) { if (($32_1 | 0) == 2097152 | $21_1 != $21_1) { break label$95 } if ($1_1 != $1_1) { break label$96 } break label$95 } if ($1_1 == $1_1 | $21_1 != $21_1) { break label$94 } } $40_1 = 2; HEAP32[$14_1 + 360 >> 2] = 2; HEAPF32[$14_1 + 28 >> 2] = $21_1; $1_1 = $21_1 } label$98: { if (!(!$35_1 & ($32_1 | 0) == 2097152)) { if (($32_1 | 0) == 2097152 | $34_1 != $34_1) { break label$94 } if ($19_1 != $19_1) { break label$98 } break label$94 } if ($19_1 == $19_1 | $34_1 != $34_1) { break label$94 } } $44_1 = 2; HEAP32[$14_1 + 356 >> 2] = 2; HEAPF32[$14_1 + 364 >> 2] = $34_1; $19_1 = $34_1 } $2_1 = HEAPF32[$25_1 + 224 >> 2]; $32_1 = $2_1 != $2_1; label$100: { if ($32_1) { break label$100 } label$101: { if (!($43_1 | ($40_1 | 0) != 1)) { HEAP32[$14_1 + 356 >> 2] = 1; HEAPF32[$14_1 + 364 >> 2] = $27_1 + Math_fround(Math_fround($1_1 - $24_1) / $2_1); break label$101 } if ($35_1 | ($44_1 | 0) != 1) { break label$100 } HEAP32[$14_1 + 360 >> 2] = 1; HEAPF32[$14_1 + 28 >> 2] = Math_fround(Math_fround($19_1 - $27_1) * $2_1) + $24_1 } $44_1 = 1; $40_1 = 1 } label$103: { label$104: { $18_1 = $18_1 >>> 13 & 7; $18_1 = (($18_1 ? $18_1 : $54_1 >>> 10 & 7) | 0) != 4; if ($43_1 | ($18_1 | (($40_1 | 0) == 1 | ($4_1 | 0) != 1) | $21_1 != $21_1 | $23_1)) { break label$104 } HEAP32[$14_1 + 360 >> 2] = 1; HEAPF32[$14_1 + 28 >> 2] = $21_1; if ($32_1) { break label$104 } HEAP32[$14_1 + 356 >> 2] = 1; HEAPF32[$14_1 + 364 >> 2] = Math_fround($21_1 - $24_1) / $2_1; break label$103 } if ($18_1 | ($35_1 | ($5_1 | 0) != 1 | ($44_1 | 0) == 1) | $34_1 != $34_1 | $3_1) { break label$103 } HEAP32[$14_1 + 356 >> 2] = 1; HEAPF32[$14_1 + 364 >> 2] = $34_1; if ($32_1) { break label$103 } HEAP32[$14_1 + 360 >> 2] = 1; HEAPF32[$14_1 + 28 >> 2] = Math_fround($34_1 - $27_1) * $2_1 } $30($25_1, 2, $21_1, $21_1, $14_1 + 360 | 0, $14_1 + 28 | 0); $30($25_1, 0, $34_1, $21_1, $14_1 + 356 | 0, $14_1 + 364 | 0); $25($25_1, HEAPF32[$14_1 + 28 >> 2], HEAPF32[$14_1 + 364 >> 2], $38_1, HEAP32[$14_1 + 360 >> 2], HEAP32[$14_1 + 356 >> 2], $21_1, $34_1, 0, 5, $9_1, $10_1, $11_1, $12_1); $1_1 = HEAPF32[($25_1 + (HEAP32[($20_1 << 2) + 4420 >> 2] << 2) | 0) + 516 >> 2]; $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($25_1, $20_1, $21_1) + $3($25_1, $20_1)) + Math_fround($6($25_1, $20_1, $21_1) + $4($25_1, $20_1))); if (!($3_1 | $2_1 != $2_1)) { $2_1 = $1($1_1, $2_1); break label$72 } $2_1 = $3_1 ? $2_1 : $1_1 } HEAPF32[$25_1 + 308 >> 2] = $2_1 } HEAP32[$25_1 + 304 >> 2] = $12_1 } $15_1 = Math_fround($15_1 + Math_fround($2_1 + Math_fround($2($25_1, $22_1, $21_1) + $5($25_1, $22_1, $21_1)))) } $16_1 = $16_1 + 4 | 0; if (($47_1 | 0) != ($16_1 | 0)) { continue } break } break label$2 } HEAP32[$14_1 >> 2] = 3104; $14($0_1, $14_1); $13(); wasm2js_trap() } HEAP32[$14_1 + 16 >> 2] = 3186; $14($0_1, $14_1 + 16 | 0); $13(); wasm2js_trap() } $15_1 = Math_fround(0) } $1_1 = Math_fround($15_1 + Math_fround(0)); $58_1 = $42_1 ? $7_1 : $6_1; $55_1 = $42_1 ? $6_1 : $7_1; if ($52_1 >>> 0 >= 5) { $1_1 = Math_fround(Math_fround($44($0_1, $22_1, $30_1) * Math_fround($45_1 - 1 >>> 0)) + $1_1) } $3_1 = $1_1 > $28_1; $44_1 = $33_1 & 786432; $48_1 = $44_1 ? ($36_1 | 0) == 2 ? $3_1 ? 1 : $36_1 : $36_1 : $36_1; $25_1 = $42_1 ? $5_1 : $4_1; $47_1 = ($25_1 | 0) == 1; $70_1 = $47_1 & ($8_1 ^ 1); $42_1 = $22_1 >>> 0 < 2; $71_1 = $25_1 & -3; $54_1 = $0_1 + 208 | 0; $5_1 = $13_1 << 2; $32_1 = $5_1 + 4388 | 0; $72_1 = !$44_1 & $47_1; $73_1 = ($25_1 | 0) != 1 | $8_1; $16_1 = $22_1 << 2; $43_1 = $16_1 + 4388 | 0; $53_1 = $16_1 + 4420 | 0; $52_1 = $30_1 == $30_1; $74_1 = $52_1 << 1; $35_1 = $5_1 + 4420 | 0; $75_1 = !$36_1 | !$3_1; $66_1 = $14_1 + 56 | 0; $67_1 = $44($0_1, $13_1, $30_1); $18_1 = 0; $3_1 = 0; $40_1 = 0; label$108: { while (1) { $36_1 = $3_1; wasm2js_memory_fill($14_1 + 28 | 0, 0, 44); $3_1 = HEAP32[$0_1 + 560 >> 2]; $5_1 = HEAP32[$0_1 + 556 >> 2]; label$110: { if (($3_1 | 0) == ($5_1 | 0)) { break label$110 } $3_1 = $3_1 - $5_1 | 0; if (($3_1 | 0) < 0) { break label$108 } $16_1 = $36($14_1 + 364 | 0, $3_1 >> 2, 0, $66_1); $3_1 = HEAP32[$14_1 + 48 >> 2]; $5_1 = HEAP32[$14_1 + 52 >> 2] - $3_1 | 0; $20_1 = HEAP32[$14_1 + 368 >> 2] - $5_1 | 0; wasm2js_memory_copy($20_1, $3_1, $5_1); $3_1 = HEAP32[$14_1 + 48 >> 2]; HEAP32[$14_1 + 368 >> 2] = $3_1; HEAP32[$14_1 + 48 >> 2] = $20_1; $20_1 = HEAP32[$14_1 + 372 >> 2]; $23_1 = HEAP32[$14_1 + 376 >> 2]; $5_1 = HEAP32[$14_1 + 52 >> 2]; HEAP32[$14_1 + 372 >> 2] = $5_1; $26_1 = HEAP32[$14_1 + 56 >> 2]; HEAP32[$14_1 + 52 >> 2] = $20_1; HEAP32[$14_1 + 56 >> 2] = $23_1; HEAP32[$14_1 + 376 >> 2] = $26_1; HEAP32[$16_1 >> 2] = $3_1; if (($3_1 | 0) != ($5_1 | 0)) { HEAP32[$14_1 + 372 >> 2] = $5_1 + (($3_1 - $5_1 | 0) + 3 & -4) } if (!$3_1) { break label$110 } $8($3_1) } $26_1 = HEAP32[$0_1 + 24 >> 2]; $3_1 = $26_1 >>> 2 & 3; label$112: { label$113: { $5_1 = $26_1 & 3; if ((($5_1 ? $5_1 : $63_1) | 0) != 2) { break label$113 } $20_1 = 3; label$114: { switch ($3_1 - 2 | 0) { case 0: break label$112; case 1: break label$114; default: break label$113 } } $20_1 = 2; break label$112 } $20_1 = $3_1 } $15_1 = $44($0_1, $20_1, $21_1); $16_1 = $18_1; $23_1 = HEAP32[$0_1 + 560 >> 2]; $5_1 = HEAP32[$0_1 + 556 >> 2]; label$115: { if ($16_1 >>> 0 >= $23_1 - $5_1 >> 2 >>> 0) { break label$115 } $26_1 = $26_1 & 786432; $2_1 = Math_fround(0); while (1) { if ($23_1 - $5_1 >> 2 >>> 0 <= $16_1 >>> 0) { break label$108 } $3_1 = HEAP32[($16_1 << 2) + $5_1 >> 2]; $33_1 = HEAP32[$3_1 + 24 >> 2]; if (!($33_1 & 4194304 | ($33_1 & 196608) == 131072)) { HEAP32[$3_1 + 548 >> 2] = $36_1; $1_1 = $2($3_1, $20_1, $21_1); $17_1 = $5($3_1, $20_1, $21_1); $5_1 = HEAP32[$14_1 + 28 >> 2]; $19_1 = ($16_1 | 0) == ($18_1 | 0) ? Math_fround(0) : $15_1; $1_1 = Math_fround($1_1 + $17_1); $17_1 = HEAPF32[$3_1 + 308 >> 2]; $24_1 = $9($3_1, $20_1, $17_1, $55_1); if (!($5_1 ? !(Math_fround($19_1 + Math_fround($1_1 + Math_fround($2_1 + $24_1))) > $28_1) | !$26_1 : 1)) { break label$115 } HEAP32[$14_1 + 28 >> 2] = $5_1 + 1; $19_1 = Math_fround($19_1 + Math_fround($1_1 + $24_1)); HEAPF32[$14_1 + 32 >> 2] = $19_1 + HEAPF32[$14_1 + 32 >> 2]; if ($81($3_1)) { label$119: { if (!HEAP32[$3_1 + 552 >> 2]) { $1_1 = Math_fround(0); break label$119 } $1_1 = HEAPF32[$3_1 + 32 >> 2]; if ($1_1 == $1_1) { break label$119 } $1_1 = HEAPF32[$3_1 + 28 >> 2]; $1_1 = $1_1 > Math_fround(0) ? $1_1 : Math_fround(0) } HEAPF32[$14_1 + 36 >> 2] = $1_1 + HEAPF32[$14_1 + 36 >> 2]; wasm2js_i32$0 = $14_1, wasm2js_f32$0 = Math_fround(HEAPF32[$14_1 + 40 >> 2] - Math_fround($32($3_1) * $17_1)), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0 } $5_1 = HEAP32[$14_1 + 52 >> 2]; label$121: { if (($5_1 | 0) != HEAP32[$14_1 + 56 >> 2]) { HEAP32[$5_1 >> 2] = $3_1; HEAP32[$14_1 + 52 >> 2] = $5_1 + 4; break label$121 } $5_1 = $5_1 - HEAP32[$14_1 + 48 >> 2] | 0; $33_1 = $5_1 >> 2; $23_1 = $33_1 + 1 | 0; if ($23_1 >>> 0 >= 1073741824) { break label$108 } $39_1 = $5_1 >> 1; $23_1 = $36($14_1 + 364 | 0, $5_1 >>> 0 >= 2147483644 ? 1073741823 : $23_1 >>> 0 < $39_1 >>> 0 ? $39_1 : $23_1, $33_1, $66_1); HEAP32[HEAP32[$14_1 + 372 >> 2] >> 2] = $3_1; HEAP32[$14_1 + 372 >> 2] = HEAP32[$14_1 + 372 >> 2] + 4; $3_1 = HEAP32[$14_1 + 48 >> 2]; $5_1 = HEAP32[$14_1 + 52 >> 2] - $3_1 | 0; $33_1 = HEAP32[$14_1 + 368 >> 2] - $5_1 | 0; wasm2js_memory_copy($33_1, $3_1, $5_1); $3_1 = HEAP32[$14_1 + 48 >> 2]; HEAP32[$14_1 + 368 >> 2] = $3_1; HEAP32[$14_1 + 48 >> 2] = $33_1; $33_1 = HEAP32[$14_1 + 372 >> 2]; $39_1 = HEAP32[$14_1 + 376 >> 2]; $5_1 = HEAP32[$14_1 + 52 >> 2]; HEAP32[$14_1 + 372 >> 2] = $5_1; $49_1 = HEAP32[$14_1 + 56 >> 2]; HEAP32[$14_1 + 52 >> 2] = $33_1; HEAP32[$14_1 + 56 >> 2] = $39_1; HEAP32[$14_1 + 376 >> 2] = $49_1; HEAP32[$23_1 >> 2] = $3_1; if (($3_1 | 0) != ($5_1 | 0)) { HEAP32[$14_1 + 372 >> 2] = $5_1 + (($3_1 - $5_1 | 0) + 3 & -4) } if (!$3_1) { break label$121 } $8($3_1) } $5_1 = HEAP32[$0_1 + 556 >> 2]; $23_1 = HEAP32[$0_1 + 560 >> 2]; $2_1 = Math_fround($2_1 + $19_1) } $16_1 = $16_1 + 1 | 0; if ($16_1 >>> 0 < $23_1 - $5_1 >> 2 >>> 0) { continue } break } } $29_1 = HEAPF32[$14_1 + 36 >> 2]; if (!(!($29_1 > Math_fround(0)) | !($29_1 < Math_fround(1)))) { HEAP32[$14_1 + 36 >> 2] = 1065353216; $29_1 = Math_fround(1) } $37_1 = HEAPF32[$14_1 + 40 >> 2]; if (!(!($37_1 > Math_fround(0)) | !($37_1 < Math_fround(1)))) { HEAP32[$14_1 + 40 >> 2] = 1065353216; $37_1 = Math_fround(1) } HEAP32[$14_1 + 44 >> 2] = $16_1; $24_1 = HEAPF32[$14_1 + 32 >> 2]; $20_1 = HEAP32[$14_1 + 28 >> 2]; if ($40_1) { $8($40_1) } $17_1 = HEAPF32[$14_1 + 60 >> 2]; $33_1 = HEAP32[$14_1 + 52 >> 2]; $40_1 = HEAP32[$14_1 + 48 >> 2]; label$127: { label$128: { label$129: { label$130: { if (($48_1 | 0) == 1) { break label$130 } $2_1 = Math_fround(0); $1_1 = HEAPF32[$54_1 >> 2]; label$131: { label$132: { $3_1 = HEAP32[$54_1 >> 2]; label$133: { if (($3_1 | 0) == 2139156720) { break label$133 } if (($3_1 | 0) == 2140081935) { break label$132 } $5_1 = 4436; label$134: { if (($3_1 | 0) != 2141891242) { if ($1_1 == $1_1) { break label$134 } $5_1 = 4444 } $2_1 = HEAPF32[$5_1 >> 2]; $1_1 = Math_fround(NaN); switch (HEAP32[$5_1 + 4 >> 2] - 1 | 0) { case 0: break label$132; case 1: break label$133; default: break label$131 } } $2_1 = (wasm2js_scratch_store_i32(2, ($3_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($3_1 & 1073741824)) { break label$132 } } $1_1 = Math_fround(Math_fround($2_1 * $6_1) * Math_fround(.009999999776482582)); break label$131 } $1_1 = $2_1 } $2_1 = Math_fround(0); $15_1 = HEAPF32[$0_1 + 216 >> 2]; label$136: { label$137: { $3_1 = HEAP32[$0_1 + 216 >> 2]; label$138: { if (($3_1 | 0) == 2139156720) { break label$138 } if (($3_1 | 0) == 2140081935) { break label$137 } $5_1 = 4436; label$139: { if (($3_1 | 0) != 2141891242) { if ($15_1 == $15_1) { break label$139 } $5_1 = 4444 } $2_1 = HEAPF32[$5_1 >> 2]; $15_1 = Math_fround(NaN); switch (HEAP32[$5_1 + 4 >> 2] - 1 | 0) { case 0: break label$137; case 1: break label$138; default: break label$136 } } $2_1 = (wasm2js_scratch_store_i32(2, ($3_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($3_1 & 1073741824)) { break label$137 } } $15_1 = Math_fround(Math_fround($2_1 * $6_1) * Math_fround(.009999999776482582)); break label$136 } $15_1 = $2_1 } $2_1 = Math_fround(0); $19_1 = HEAPF32[$0_1 + 212 >> 2]; label$141: { label$142: { $3_1 = HEAP32[$0_1 + 212 >> 2]; label$143: { if (($3_1 | 0) == 2139156720) { break label$143 } if (($3_1 | 0) == 2140081935) { break label$142 } $5_1 = 4436; label$144: { if (($3_1 | 0) != 2141891242) { if ($19_1 == $19_1) { break label$144 } $5_1 = 4444 } $2_1 = HEAPF32[$5_1 >> 2]; $19_1 = Math_fround(NaN); switch (HEAP32[$5_1 + 4 >> 2] - 1 | 0) { case 0: break label$142; case 1: break label$143; default: break label$141 } } $2_1 = (wasm2js_scratch_store_i32(2, ($3_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($3_1 & 1073741824)) { break label$142 } } $19_1 = Math_fround(Math_fround($2_1 * $7_1) * Math_fround(.009999999776482582)); break label$141 } $19_1 = $2_1 } $2_1 = Math_fround(0); $27_1 = HEAPF32[$0_1 + 220 >> 2]; label$146: { label$147: { $3_1 = HEAP32[$0_1 + 220 >> 2]; label$148: { if (($3_1 | 0) == 2139156720) { break label$148 } if (($3_1 | 0) == 2140081935) { break label$147 } $5_1 = 4436; label$149: { if (($3_1 | 0) != 2141891242) { if ($27_1 == $27_1) { break label$149 } $5_1 = 4444 } $2_1 = HEAPF32[$5_1 >> 2]; $27_1 = Math_fround(NaN); switch (HEAP32[$5_1 + 4 >> 2] - 1 | 0) { case 0: break label$147; case 1: break label$148; default: break label$146 } } $2_1 = (wasm2js_scratch_store_i32(2, ($3_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($3_1 & 1073741824)) { break label$147 } } $27_1 = Math_fround(Math_fround($2_1 * $7_1) * Math_fround(.009999999776482582)); break label$146 } $27_1 = $2_1 } $3_1 = $22_1 >>> 0 > 1; $2_1 = Math_fround(($3_1 ? $1_1 : $19_1) - $46_1); if ($2_1 == $2_1 & $2_1 > $24_1) { break label$129 } $2_1 = Math_fround(($3_1 ? $15_1 : $27_1) - $46_1); if ($2_1 == $2_1 & $2_1 < $24_1) { break label$129 } if (HEAP8[HEAP32[$0_1 + 568 >> 2] + 16 | 0] & 1) { break label$130 } $2_1 = $24_1; if (!HEAP32[$0_1 + 552 >> 2] | $29_1 == Math_fround(0)) { break label$128 } $1_1 = HEAPF32[$0_1 + 32 >> 2]; label$151: { label$152: { if ($1_1 == $1_1) { $2_1 = $1_1; break label$152 } $2_1 = HEAPF32[$0_1 + 28 >> 2]; if (!($2_1 > Math_fround(0))) { break label$151 } } if ($2_1 != $2_1) { $2_1 = $28_1; break label$128 } $1_1 = HEAPF32[$0_1 + 32 >> 2] } if ($1_1 != $1_1) { $2_1 = $24_1; $1_1 = HEAPF32[$0_1 + 28 >> 2]; if (!($1_1 > Math_fround(0))) { break label$128 } } $2_1 = $28_1; if ($1_1 != Math_fround(0)) { break label$128 } $2_1 = $24_1; break label$128 } $2_1 = $28_1 } if ($2_1 != $2_1) { break label$128 } $17_1 = Math_fround($2_1 - $24_1); break label$127 } if (!($24_1 < Math_fround(0))) { break label$127 } $17_1 = Math_fround(-$24_1) } $28_1 = $2_1; if (!$70_1) { label$157: { if (($33_1 | 0) == ($40_1 | 0)) { $19_1 = Math_fround(0); break label$157 } $27_1 = Math_fround(0); $5_1 = $40_1; while (1) { $3_1 = HEAP32[$5_1 >> 2]; $24_1 = HEAPF32[$3_1 + 308 >> 2]; $2_1 = $9($3_1, $22_1, $24_1, $55_1); label$160: { if ($17_1 < Math_fround(0)) { $1_1 = Math_fround($2_1 * Math_fround(-$32($3_1))); if (!($1_1 > Math_fround(0) | $1_1 < Math_fround(0))) { break label$160 } $15_1 = Math_fround(Math_fround(Math_fround($17_1 / $37_1) * $1_1) + $2_1); $1_1 = $9($3_1, $22_1, $15_1, $28_1); $23_1 = $1_1 != $1_1; $19_1 = Math_fround(Math_fround($7($3_1, $22_1, $21_1) + $3($3_1, $22_1)) + Math_fround($6($3_1, $22_1, $21_1) + $4($3_1, $22_1))); label$162: { if (!($23_1 | $19_1 != $19_1)) { $1_1 = $1($1_1, $19_1); break label$162 } $1_1 = $23_1 ? $19_1 : $1_1 } if ($15_1 != $15_1 | $1_1 != $1_1 | $1_1 == $15_1) { break label$160 } $27_1 = Math_fround($27_1 + Math_fround($1_1 - $2_1)); $37_1 = Math_fround(Math_fround($32($3_1) * $24_1) + $37_1); break label$160 } if (!($17_1 > Math_fround(0)) | !HEAP32[$3_1 + 552 >> 2]) { break label$160 } $15_1 = HEAPF32[$3_1 + 32 >> 2]; if ($15_1 != $15_1) { $15_1 = HEAPF32[$3_1 + 28 >> 2]; if (!($15_1 > Math_fround(0))) { break label$160 } } if (!($15_1 < Math_fround(0) | $15_1 > Math_fround(0))) { break label$160 } $19_1 = Math_fround(Math_fround(Math_fround($17_1 / $29_1) * $15_1) + $2_1); $1_1 = $9($3_1, $22_1, $19_1, $28_1); $23_1 = $1_1 != $1_1; $24_1 = Math_fround(Math_fround($7($3_1, $22_1, $21_1) + $3($3_1, $22_1)) + Math_fround($6($3_1, $22_1, $21_1) + $4($3_1, $22_1))); label$165: { if (!($23_1 | $24_1 != $24_1)) { $1_1 = $1($1_1, $24_1); break label$165 } $1_1 = $23_1 ? $24_1 : $1_1 } if ($19_1 != $19_1 | $1_1 != $1_1 | $1_1 == $19_1) { break label$160 } $29_1 = Math_fround($29_1 - $15_1); $27_1 = Math_fround($27_1 + Math_fround($1_1 - $2_1)) } $5_1 = $5_1 + 4 | 0; if (($33_1 | 0) != ($5_1 | 0)) { continue } break } $27_1 = Math_fround($17_1 - $27_1); $59_1 = Math_fround($27_1 / $37_1); $60_1 = Math_fround($27_1 / $29_1); $49_1 = ($75_1 | !(HEAPU8[$0_1 + 26 | 0] & 12)) & $47_1; $61_1 = !$49_1; $39_1 = HEAP32[$35_1 >> 2]; $19_1 = Math_fround(0); $23_1 = $40_1; while (1) { $3_1 = HEAP32[$23_1 >> 2]; $24_1 = $9($3_1, $22_1, HEAPF32[$3_1 + 308 >> 2], $55_1); label$168: { label$169: { if ($27_1 < Math_fround(0)) { $15_1 = $24_1; $1_1 = Math_fround($15_1 * Math_fround(-$32($3_1))); if ($1_1 == Math_fround(0)) { break label$168 } $1_1 = $37_1 == Math_fround(0) ? Math_fround($24_1 + $1_1) : Math_fround(Math_fround($59_1 * $1_1) + $24_1); break label$169 } $15_1 = $24_1; if (!($27_1 > Math_fround(0)) | !HEAP32[$3_1 + 552 >> 2]) { break label$168 } $1_1 = HEAPF32[$3_1 + 32 >> 2]; if ($1_1 != $1_1) { $1_1 = HEAPF32[$3_1 + 28 >> 2]; if (!($1_1 > Math_fround(0))) { break label$168 } } if (!($1_1 < Math_fround(0) | $1_1 > Math_fround(0))) { break label$168 } $1_1 = Math_fround(Math_fround($60_1 * $1_1) + $24_1) } $1_1 = $9($3_1, $22_1, $1_1, $28_1); $5_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($3_1, $22_1, $21_1) + $3($3_1, $22_1)) + Math_fround($6($3_1, $22_1, $21_1) + $4($3_1, $22_1))); if (!($5_1 | $2_1 != $2_1)) { $15_1 = $1($1_1, $2_1); break label$168 } $15_1 = $5_1 ? $2_1 : $1_1 } $1_1 = $2($3_1, $22_1, $21_1); $2_1 = $5($3_1, $22_1, $21_1); $29_1 = $2($3_1, $13_1, $21_1); $62_1 = $5($3_1, $13_1, $21_1); $2_1 = Math_fround($1_1 + $2_1); $68_1 = Math_fround($15_1 + $2_1); HEAPF32[$14_1 + 356 >> 2] = $68_1; HEAP32[$14_1 + 348 >> 2] = 1; $29_1 = Math_fround($29_1 + $62_1); $1_1 = HEAPF32[$3_1 + 224 >> 2]; label$173: { if ($1_1 == $1_1) { HEAP32[$14_1 + 352 >> 2] = 1; $2_1 = Math_fround($68_1 - $2_1); HEAPF32[$14_1 + 360 >> 2] = $29_1 + ($42_1 ? Math_fround($2_1 * $1_1) : Math_fround($2_1 / $1_1)); break label$173 } label$175: { $56_1 = $30_1 != $30_1; if ($56_1) { break label$175 } $26_1 = ($39_1 << 3) + $3_1 | 0; $1_1 = HEAPF32[$26_1 + 572 >> 2]; label$176: { label$177: { label$178: { label$179: { $5_1 = HEAP32[$26_1 + 576 >> 2]; switch ($5_1 | 0) { case 0: case 3: break label$178; default: break label$179 } } $2_1 = HEAPF32[$26_1 + 572 >> 2]; if (($5_1 | 0) != 1 | $2_1 != $2_1) { break label$177 } if ($49_1 & $1_1 < Math_fround(0)) { break label$176 } break label$175 } if (!$49_1) { break label$175 } break label$176 } if ($61_1 | (!($1_1 < Math_fround(0)) | (($5_1 | 0) != 2 | $2_1 != $2_1))) { break label$175 } } $5_1 = HEAP32[$3_1 + 24 >> 2] >>> 13 & 7; if (!$5_1) { $5_1 = HEAP32[$0_1 + 24 >> 2] >>> 10 & 7 } if (($5_1 | 0) != 4) { break label$175 } $27($14_1 + 28 | 0, $3_1, $13_1); if (HEAP32[$14_1 + 32 >> 2] == 3) { break label$175 } $26($14_1 + 364 | 0, $3_1, $13_1); if (HEAP32[$14_1 + 368 >> 2] == 3) { break label$175 } HEAP32[$14_1 + 352 >> 2] = 1; HEAPF32[$14_1 + 360 >> 2] = $30_1; break label$173 } $26_1 = ($39_1 << 3) + $3_1 | 0; $2_1 = HEAPF32[$26_1 + 572 >> 2]; label$182: { label$183: { label$184: { label$185: { label$186: { $5_1 = HEAP32[$26_1 + 576 >> 2]; switch ($5_1 | 0) { case 0: case 3: break label$185; default: break label$186 } } $1_1 = HEAPF32[$26_1 + 572 >> 2]; if (!(($5_1 | 0) != 1 | $1_1 != $1_1)) { $1_1 = $2_1; if ($1_1 < Math_fround(0)) { break label$185 } break label$182 } if (($5_1 | 0) != 2 | $1_1 != $1_1) { break label$184 } if ($56_1) { break label$185 } if (!($2_1 < Math_fround(0))) { break label$183 } } HEAP32[$14_1 + 352 >> 2] = $74_1; HEAPF32[$14_1 + 360 >> 2] = $30_1; break label$173 } $1_1 = Math_fround(NaN); label$188: { switch ($5_1 - 1 | 0) { case 1: break label$183; case 0: break label$188; default: break label$182 } } $1_1 = $2_1; break label$182 } $1_1 = Math_fround(Math_fround($30_1 * $2_1) * Math_fround(.009999999776482582)) } $1_1 = Math_fround($29_1 + $1_1); HEAPF32[$14_1 + 360 >> 2] = $1_1; HEAP32[$14_1 + 352 >> 2] = (($5_1 | 0) != 2 | $47_1) & $1_1 == $1_1 } $30($3_1, $22_1, $28_1, $21_1, $14_1 + 348 | 0, $14_1 + 356 | 0); $30($3_1, $13_1, $30_1, $21_1, $14_1 + 352 | 0, $14_1 + 360 | 0); $26_1 = ($39_1 << 3) + $3_1 | 0; $1_1 = HEAPF32[$26_1 + 572 >> 2]; label$189: { label$190: { label$191: { label$192: { $5_1 = HEAP32[$26_1 + 576 >> 2]; switch ($5_1 | 0) { case 0: case 3: break label$191; default: break label$192 } } $2_1 = HEAPF32[$26_1 + 572 >> 2]; if (!(($5_1 | 0) != 1 | $2_1 != $2_1)) { if ($1_1 < Math_fround(0)) { break label$191 } break label$190 } if (($5_1 | 0) != 2 | $2_1 != $2_1) { break label$190 } if ($1_1 < Math_fround(0)) { break label$191 } $26_1 = 0; if ($52_1) { break label$189 } } $26_1 = 0; $5_1 = HEAP32[$3_1 + 24 >> 2] >>> 13 & 7; if (!$5_1) { $5_1 = HEAP32[$0_1 + 24 >> 2] >>> 10 & 7 } if (($5_1 | 0) != 4) { break label$189 } $27($14_1 + 28 | 0, $3_1, $13_1); if (HEAP32[$14_1 + 32 >> 2] == 3) { break label$189 } $26($14_1 + 364 | 0, $3_1, $13_1); $26_1 = HEAP32[$14_1 + 368 >> 2] != 3; break label$189 } $26_1 = 0 } $1_1 = HEAPF32[$14_1 + 356 >> 2]; $2_1 = HEAPF32[$14_1 + 360 >> 2]; $5_1 = $22_1 >>> 0 > 1; $29_1 = $5_1 ? $1_1 : $2_1; $1_1 = $5_1 ? $2_1 : $1_1; $56_1 = HEAP32[$14_1 + 348 >> 2]; $69_1 = HEAP32[$14_1 + 352 >> 2]; $76_1 = $5_1 ? $56_1 : $69_1; $56_1 = $5_1 ? $69_1 : $56_1; $5_1 = ($26_1 ^ 1) & $8_1; $25($3_1, $29_1, $1_1, HEAPU8[$0_1 + 300 | 0] & 3, $76_1, $56_1, $21_1, $34_1, $5_1, $5_1 ? 4 : 7, $9_1, $10_1, $11_1, $12_1); $19_1 = Math_fround($19_1 + Math_fround($15_1 - $24_1)); $5_1 = HEAPU8[$0_1 + 300 | 0]; label$196: { label$197: { if ($5_1 & 4) { $26_1 = $5_1 & 251; break label$197 } $26_1 = $5_1 & 251; $5_1 = 0; if (!(HEAPU8[$3_1 + 300 | 0] & 4)) { break label$196 } } $5_1 = 4 } HEAP8[$0_1 + 300 | 0] = $5_1 | $26_1; $23_1 = $23_1 + 4 | 0; if (($33_1 | 0) != ($23_1 | 0)) { continue } break } } $17_1 = Math_fround($17_1 - $19_1) } $3_1 = HEAPU8[$0_1 + 300 | 0]; HEAP8[$0_1 + 300 | 0] = $3_1 & 251 | ($17_1 < Math_fround(0) ? 4 : $3_1 & 4); $27_1 = Math_fround($7($0_1, $22_1, $6_1) + $3($0_1, $22_1)); $59_1 = Math_fround($6($0_1, $22_1, $6_1) + $4($0_1, $22_1)); $24_1 = $44($0_1, $22_1, $6_1); label$199: { if (!(!($17_1 > Math_fround(0)) | ($48_1 | 0) != 2)) { $19_1 = Math_fround(0); $2_1 = Math_fround(0); label$201: { label$202: { $3_1 = $54_1 + (HEAP32[$53_1 >> 2] << 2) | 0; $1_1 = HEAPF32[$3_1 >> 2]; $3_1 = HEAP32[$3_1 >> 2]; $5_1 = ($3_1 | 0) == 2139156720; label$203: { if (!$5_1) { $23_1 = ($3_1 | 0) == 2140081935; if ($23_1) { break label$202 } $26_1 = ($3_1 | 0) == 2141891242; if ($26_1 | $1_1 != $1_1) { break label$199 } if ($23_1) { break label$202 } if ($26_1) { break label$199 } $2_1 = (wasm2js_scratch_store_i32(2, ($3_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($3_1 & 1073741824)) { break label$203 } } $2_1 = Math_fround(Math_fround($55_1 * $2_1) * Math_fround(.009999999776482582)) } if ($2_1 != $2_1) { break label$199 } $2_1 = Math_fround(0); label$205: { if ($5_1) { break label$205 } if (($3_1 | 0) == 2140081935) { break label$202 } $5_1 = 4436; label$206: { if (($3_1 | 0) != 2141891242) { if ($1_1 == $1_1) { break label$206 } $5_1 = 4444 } $2_1 = HEAPF32[$5_1 >> 2]; $15_1 = Math_fround(NaN); switch (HEAP32[$5_1 + 4 >> 2] - 1 | 0) { case 0: break label$202; case 1: break label$205; default: break label$201 } } $2_1 = (wasm2js_scratch_store_i32(2, ($3_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($3_1 & 1073741824)) { break label$202 } } $15_1 = Math_fround(Math_fround($55_1 * $2_1) * Math_fround(.009999999776482582)); break label$201 } $15_1 = $2_1 } $1_1 = Math_fround(Math_fround(Math_fround($15_1 - $27_1) - $59_1) - Math_fround($28_1 - $17_1)); if ($1_1 != $1_1) { break label$199 } $19_1 = $1($1_1, Math_fround(0)); break label$199 } $19_1 = $17_1 } $26_1 = $16_1 >>> 0 <= $18_1 >>> 0; label$208: { if (!$26_1) { $33_1 = HEAP32[$0_1 + 556 >> 2]; $3_1 = HEAP32[$0_1 + 560 >> 2] - $33_1 >> 2; $39_1 = $3_1 >>> 0 < $18_1 >>> 0 ? $18_1 : $3_1; $23_1 = 0; $3_1 = $18_1; while (1) { if (($3_1 | 0) == ($39_1 | 0)) { break label$108 } $5_1 = HEAP32[$33_1 + ($3_1 << 2) >> 2]; if ((HEAP32[$5_1 + 24 >> 2] & 196608) != 131072) { $49_1 = $14_1 + 28 | 0; $27($49_1, $5_1, $22_1); $61_1 = HEAP32[$14_1 + 32 >> 2]; $26($49_1, $5_1, $22_1); $23_1 = ((($61_1 | 0) == 3) + $23_1 | 0) + (HEAP32[$14_1 + 32 >> 2] == 3) | 0 } $3_1 = $3_1 + 1 | 0; if (($16_1 | 0) != ($3_1 | 0)) { continue } break } $29_1 = Math_fround(0); $2_1 = $24_1; if ($23_1) { break label$208 } } $29_1 = Math_fround(0); $23_1 = 0; $2_1 = $24_1; label$212: { switch ((HEAP32[$0_1 + 24 >> 2] >>> 4 & 7) - 1 | 0) { case 0: $29_1 = Math_fround($19_1 * Math_fround(.5)); break label$208; case 1: $29_1 = $19_1; break label$208; case 2: if ($20_1 >>> 0 < 2) { break label$208 } $2_1 = Math_fround($24_1 + Math_fround((wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = $1($19_1, Math_fround(0)), wasm2js_i32$0 = $19_1 != $19_1, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1) / Math_fround($20_1 - 1 >>> 0))); break label$208; case 4: $29_1 = Math_fround($19_1 / Math_fround($20_1 + 1 >>> 0)); $2_1 = Math_fround($24_1 + $29_1); break label$208; case 3: break label$212; default: break label$208 } } $29_1 = Math_fround(Math_fround($19_1 * Math_fround(.5)) / Math_fround($20_1 >>> 0)); $2_1 = Math_fround(Math_fround($29_1 + $29_1) + $24_1) } $1_1 = Math_fround($27_1 + $29_1); $17_1 = Math_fround(0); $33_1 = $71($0_1); if ($26_1) { $2_1 = Math_fround(0) } else { $39_1 = $16_1 - 1 | 0; $60_1 = Math_fround($19_1 / Math_fround($23_1 | 0)); $27_1 = Math_fround(0); $15_1 = Math_fround(0); $3_1 = $18_1; while (1) { $5_1 = HEAP32[$0_1 + 556 >> 2]; if (HEAP32[$0_1 + 560 >> 2] - $5_1 >> 2 >>> 0 <= $3_1 >>> 0) { break label$108 } $5_1 = HEAP32[$5_1 + ($3_1 << 2) >> 2]; $20_1 = $5_1 + 228 | 0; wasm2js_memory_copy($14_1 + 28 | 0, $20_1, 320); $2_1 = Math_fround($2_1 - (($3_1 | 0) == ($39_1 | 0) ? $24_1 : Math_fround(0))); $23_1 = HEAP32[$5_1 + 24 >> 2]; label$220: { if ($23_1 & 4194304) { break label$220 } label$221: { if (($23_1 & 196608) == 131072) { if (!$15($5_1, $22_1)) { break label$221 } if (!$8_1) { break label$220 } $19_1 = $21($5_1, $22_1, $28_1); $37_1 = $3($0_1, $22_1); $62_1 = $2($5_1, $22_1, $21_1); HEAPF32[$20_1 + (HEAP32[$43_1 >> 2] << 2) >> 2] = $62_1 + Math_fround($19_1 + $37_1); break label$220 } $27($14_1 + 364 | 0, $5_1, $22_1); $1_1 = Math_fround($1_1 + (HEAP32[$14_1 + 368 >> 2] == 3 ? $60_1 : Math_fround(-0))); if ($8_1) { $23_1 = $20_1; $20_1 = HEAP32[$43_1 >> 2] << 2; HEAPF32[$23_1 + $20_1 >> 2] = $1_1 + HEAPF32[$20_1 + ($14_1 + 28 | 0) >> 2] } $26($14_1 + 364 | 0, $5_1, $22_1); $1_1 = Math_fround($1_1 + (HEAP32[$14_1 + 368 >> 2] == 3 ? $60_1 : Math_fround(-0))); if (!$73_1) { $1_1 = Math_fround($1_1 + Math_fround(Math_fround($2_1 + Math_fround($2($5_1, $22_1, $21_1) + $5($5_1, $22_1, $21_1))) + HEAPF32[$14_1 + 108 >> 2])); $17_1 = $30_1; break label$220 } $20_1 = $5_1 + 516 | 0; $1_1 = Math_fround($1_1 + Math_fround($2_1 + Math_fround(HEAPF32[$20_1 + (HEAP32[$53_1 >> 2] << 2) >> 2] + Math_fround($2($5_1, $22_1, $21_1) + $5($5_1, $22_1, $21_1))))); if ($33_1) { $19_1 = $39($5_1); $37_1 = $2($5_1, 0, $21_1); $19_1 = Math_fround($19_1 + $37_1); $37_1 = Math_fround(Math_fround(HEAPF32[$5_1 + 520 >> 2] + Math_fround($2($5_1, 0, $21_1) + $5($5_1, 0, $21_1))) - $19_1); $5_1 = $27_1 != $27_1; label$226: { if (!($5_1 | $19_1 != $19_1)) { $27_1 = $1($27_1, $19_1); break label$226 } $27_1 = $5_1 ? $19_1 : $27_1 } $5_1 = $15_1 != $15_1; if (!($5_1 | $37_1 != $37_1)) { $15_1 = $1($15_1, $37_1); break label$220 } $15_1 = $5_1 ? $37_1 : $15_1; break label$220 } $19_1 = Math_fround(HEAPF32[$20_1 + (HEAP32[$35_1 >> 2] << 2) >> 2] + Math_fround($2($5_1, $13_1, $21_1) + $5($5_1, $13_1, $21_1))); $5_1 = $17_1 != $17_1; if (!($19_1 != $19_1 | $5_1)) { $17_1 = $1($17_1, $19_1); break label$220 } $17_1 = $5_1 ? $19_1 : $17_1; break label$220 } if (!$8_1) { break label$220 } $5_1 = HEAP32[$43_1 >> 2] << 2; $19_1 = HEAPF32[$5_1 + ($14_1 + 28 | 0) >> 2]; wasm2js_i32$0 = $5_1 + $20_1 | 0, wasm2js_f32$0 = Math_fround($29_1 + Math_fround($19_1 + $3($0_1, $22_1))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0 } $3_1 = $3_1 + 1 | 0; if (($16_1 | 0) != ($3_1 | 0)) { continue } break } $2_1 = Math_fround($15_1 + $27_1) } $17_1 = $33_1 ? $2_1 : $17_1; $19_1 = $30_1; if (!$71_1) { $2_1 = $9($0_1, $13_1, Math_fround($41_1 + $17_1), $58_1); $3_1 = $2_1 != $2_1; $15_1 = Math_fround(Math_fround($7($0_1, $13_1, $6_1) + $3($0_1, $13_1)) + Math_fround($6($0_1, $13_1, $6_1) + $4($0_1, $13_1))); label$231: { if (!($3_1 | $15_1 != $15_1)) { $2_1 = $1($2_1, $15_1); break label$231 } $2_1 = $3_1 ? $15_1 : $2_1 } $19_1 = Math_fround($2_1 - $41_1) } $2_1 = $9($0_1, $13_1, Math_fround($41_1 + ($72_1 ? $30_1 : $17_1)), $58_1); $3_1 = $2_1 != $2_1; $15_1 = Math_fround(Math_fround($7($0_1, $13_1, $6_1) + $3($0_1, $13_1)) + Math_fround($6($0_1, $13_1, $6_1) + $4($0_1, $13_1))); label$233: { if (!($3_1 | $15_1 != $15_1)) { $2_1 = $1($2_1, $15_1); break label$233 } $2_1 = $3_1 ? $15_1 : $2_1 } $15_1 = Math_fround($2_1 - $41_1); if (!($26_1 | !$8_1)) { while (1) { $3_1 = HEAP32[$0_1 + 556 >> 2]; if (HEAP32[$0_1 + 560 >> 2] - $3_1 >> 2 >>> 0 <= $18_1 >>> 0) { break label$108 } $20_1 = HEAP32[$3_1 + ($18_1 << 2) >> 2]; $3_1 = HEAP32[$20_1 + 24 >> 2]; label$237: { if ($3_1 & 4194304) { break label$237 } if (($3_1 & 196608) == 131072) { label$239: { if (!$15($20_1, $13_1)) { $5_1 = HEAP32[$32_1 >> 2]; break label$239 } $2_1 = $21($20_1, $13_1, $30_1); $17_1 = $3($0_1, $13_1); $24_1 = $2($20_1, $13_1, $21_1); $5_1 = HEAP32[$32_1 >> 2]; $2_1 = Math_fround($24_1 + Math_fround($2_1 + $17_1)); HEAPF32[($20_1 + ($5_1 << 2) | 0) + 228 >> 2] = $2_1; if ($2_1 == $2_1) { break label$237 } } wasm2js_i32$0 = $20_1 + ($5_1 << 2) | 0, wasm2js_f32$0 = Math_fround($3($0_1, $13_1) + $2($20_1, $13_1, $21_1)), HEAPF32[wasm2js_i32$0 + 228 >> 2] = wasm2js_f32$0; break label$237 } $5_1 = $3_1 >>> 13 & 7; if (!$5_1) { $5_1 = HEAP32[$0_1 + 24 >> 2] >>> 10 & 7 } label$242: { label$243: { if (($5_1 | 0) == 5) { $5_1 = HEAP32[$0_1 + 24 >> 2] & 8 ? 5 : 1; break label$243 } if (($5_1 | 0) != 4) { break label$243 } $27($14_1 + 28 | 0, $20_1, $13_1); $5_1 = 4; if (HEAP32[$14_1 + 32 >> 2] == 3) { break label$243 } $26($14_1 + 364 | 0, $20_1, $13_1); if (HEAP32[$14_1 + 368 >> 2] == 3) { break label$243 } $5_1 = $20_1 + (HEAP32[$35_1 >> 2] << 3) | 0; $17_1 = HEAPF32[$5_1 + 572 >> 2]; label$245: { label$246: { $3_1 = HEAP32[$5_1 + 576 >> 2]; switch ($3_1 | 0) { case 0: case 3: break label$245; default: break label$246 } } $24_1 = HEAPF32[$5_1 + 572 >> 2]; if (!(($3_1 | 0) != 1 | $24_1 != $24_1)) { $2_1 = $31_1; if ($17_1 < Math_fround(0)) { break label$245 } break label$242 } $2_1 = $31_1; if ($52_1 & !($17_1 < Math_fround(0)) | (($3_1 | 0) != 2 | $24_1 != $24_1)) { break label$242 } } $17_1 = HEAPF32[($20_1 + (HEAP32[$53_1 >> 2] << 2) | 0) + 516 >> 2]; $2_1 = $15_1; $24_1 = HEAPF32[$20_1 + 224 >> 2]; if ($24_1 == $24_1) { $2_1 = Math_fround(Math_fround($2($20_1, $13_1, $21_1) + $5($20_1, $13_1, $21_1)) + ($42_1 ? Math_fround($17_1 * $24_1) : Math_fround($17_1 / $24_1))) } HEAPF32[$14_1 + 364 >> 2] = $2_1; wasm2js_i32$0 = $14_1, wasm2js_f32$0 = Math_fround($17_1 + Math_fround($2($20_1, $22_1, $21_1) + $5($20_1, $22_1, $21_1))), HEAPF32[wasm2js_i32$0 + 28 >> 2] = wasm2js_f32$0; HEAP32[$14_1 + 360 >> 2] = 1; HEAP32[$14_1 + 356 >> 2] = 1; $30($20_1, $22_1, $28_1, $21_1, $14_1 + 360 | 0, $14_1 + 28 | 0); $30($20_1, $13_1, $30_1, $21_1, $14_1 + 356 | 0, $14_1 + 364 | 0); $17_1 = HEAPF32[$14_1 + 364 >> 2]; $24_1 = HEAPF32[$14_1 + 28 >> 2]; $3_1 = $22_1 >>> 0 > 1; $2_1 = $3_1 ? $17_1 : $24_1; $17_1 = $3_1 ? $24_1 : $17_1; $3_1 = ($44_1 | 0) != 0 & (HEAP32[$0_1 + 24 >> 2] & 896) != 512; $25($20_1, $17_1, $2_1, $38_1, !($3_1 & $42_1 | $17_1 != $17_1), (!$3_1 | $42_1) & $2_1 == $2_1, $21_1, $34_1, 1, 2, $9_1, $10_1, $11_1, $12_1); $2_1 = $31_1; break label$242 } $2_1 = HEAPF32[($20_1 + (HEAP32[$35_1 >> 2] << 2) | 0) + 516 >> 2]; $17_1 = $2($20_1, $13_1, $21_1); $24_1 = $5($20_1, $13_1, $21_1); $27($14_1 + 28 | 0, $20_1, $13_1); $17_1 = Math_fround($19_1 - Math_fround($2_1 + Math_fround($17_1 + $24_1))); label$250: { if (HEAP32[$14_1 + 32 >> 2] != 3) { break label$250 } $26($14_1 + 364 | 0, $20_1, $13_1); if (HEAP32[$14_1 + 368 >> 2] != 3) { break label$250 } $2_1 = Math_fround($17_1 * Math_fround(.5)); $2_1 = Math_fround($31_1 + (wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = $1($2_1, Math_fround(0)), wasm2js_i32$0 = $2_1 != $2_1, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1)); break label$242 } $26($14_1 + 28 | 0, $20_1, $13_1); $2_1 = $31_1; if (HEAP32[$14_1 + 32 >> 2] == 3) { break label$242 } $27($14_1 + 28 | 0, $20_1, $13_1); if (HEAP32[$14_1 + 32 >> 2] == 3) { $2_1 = Math_fround($31_1 + (wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = $1($17_1, Math_fround(0)), wasm2js_i32$0 = $17_1 != $17_1, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1)); break label$242 } label$252: { switch ($5_1 - 1 | 0) { case 1: $2_1 = Math_fround($31_1 + Math_fround($17_1 * Math_fround(.5))); break label$242; case 0: break label$242; default: break label$252 } } $2_1 = Math_fround($31_1 + $17_1) } $3_1 = $20_1 + (HEAP32[$32_1 >> 2] << 2) | 0; HEAPF32[$3_1 + 228 >> 2] = $2_1 + Math_fround($50_1 + HEAPF32[$3_1 + 228 >> 2]) } $18_1 = $18_1 + 1 | 0; if (($18_1 | 0) != ($16_1 | 0)) { continue } break } } $2_1 = Math_fround(($36_1 ? $67_1 : Math_fround(0)) + $15_1); $3_1 = $57_1 != $57_1; $1_1 = Math_fround($59_1 + $1_1); label$254: { if (!($3_1 | $1_1 != $1_1)) { $57_1 = $1($57_1, $1_1); break label$254 } $57_1 = $3_1 ? $1_1 : $57_1 } $50_1 = Math_fround($50_1 + $2_1); $3_1 = $36_1 + 1 | 0; $18_1 = $16_1; if ($45_1 >>> 0 > $16_1 >>> 0) { continue } break } label$256: { if (!$8_1) { break label$256 } if (!$44_1) { if (!$71($0_1)) { break label$256 } } $27_1 = Math_fround(0); label$258: { label$259: { if ($30_1 != $30_1) { break label$259 } $1_1 = Math_fround($30_1 - $50_1); label$260: { switch ((HEAP32[$0_1 + 24 >> 2] >>> 7 & 7) - 2 | 0) { case 0: $31_1 = Math_fround($31_1 + Math_fround($1_1 * Math_fround(.5))); break label$259; case 2: if (!($30_1 > $50_1)) { break label$259 } $27_1 = Math_fround($1_1 / Math_fround($3_1 >>> 0)); break label$259; case 5: if ($30_1 > $50_1) { $31_1 = Math_fround($31_1 + Math_fround($1_1 / Math_fround($3_1 << 1 >>> 0))); if ($3_1 >>> 0 < 2) { break label$259 } $27_1 = Math_fround($1_1 / Math_fround($3_1 >>> 0)); break label$258 } $31_1 = Math_fround($31_1 + Math_fround($1_1 * Math_fround(.5))); break label$259; case 4: if (!($30_1 > $50_1) | $3_1 >>> 0 < 2) { break label$259 } $27_1 = Math_fround($1_1 / Math_fround($36_1 >>> 0)); break label$258; case 1: break label$260; default: break label$259 } } $31_1 = Math_fround($31_1 + $1_1) } if (!$3_1) { break label$256 } } $23_1 = 0; $3_1 = 0; $5_1 = 0; while (1) { $17_1 = Math_fround(0); $2_1 = Math_fround(0); $1_1 = Math_fround(0); $15_1 = Math_fround(0); $16_1 = $3_1; if ($45_1 >>> 0 > $3_1 >>> 0) { label$268: { while (1) { $5_1 = HEAP32[$0_1 + 556 >> 2]; if (HEAP32[$0_1 + 560 >> 2] - $5_1 >> 2 >>> 0 <= $16_1 >>> 0) { break label$108 } $18_1 = HEAP32[$5_1 + ($16_1 << 2) >> 2]; $20_1 = HEAP32[$18_1 + 24 >> 2]; label$270: { if ($20_1 & 4194304 | ($20_1 & 196608) == 131072) { break label$270 } $5_1 = $16_1; if (HEAP32[$18_1 + 548 >> 2] != ($23_1 | 0)) { break label$268 } $1_1 = HEAPF32[($18_1 + (HEAP32[$35_1 >> 2] << 2) | 0) + 516 >> 2]; label$271: { if (!($1_1 >= Math_fround(0))) { break label$271 } $5_1 = $2_1 != $2_1; $1_1 = Math_fround($1_1 + Math_fround($2($18_1, $13_1, $21_1) + $5($18_1, $13_1, $21_1))); if (!($5_1 | $1_1 != $1_1)) { $2_1 = $1($2_1, $1_1); break label$271 } $2_1 = $5_1 ? $1_1 : $2_1 } $5_1 = $20_1 >>> 13 & 7; if (!$5_1) { $5_1 = HEAP32[$0_1 + 24 >> 2] >>> 10 & 7 } if (!(HEAPU8[$0_1 + 24 | 0] & 8) | ($5_1 | 0) != 5) { break label$270 } $1_1 = $39($18_1); $19_1 = $2($18_1, 0, $21_1); $1_1 = Math_fround($1_1 + $19_1); $19_1 = Math_fround(Math_fround(HEAPF32[$18_1 + 520 >> 2] + Math_fround($2($18_1, 0, $21_1) + $5($18_1, 0, $21_1))) - $1_1); $5_1 = $2_1 != $2_1; $18_1 = $15_1 != $15_1; label$275: { if (!($18_1 | $1_1 != $1_1)) { $15_1 = $1($15_1, $1_1); break label$275 } $15_1 = $18_1 ? $1_1 : $15_1 } $18_1 = $17_1 != $17_1; label$277: { if (!($18_1 | $19_1 != $19_1)) { $17_1 = $1($17_1, $19_1); break label$277 } $17_1 = $18_1 ? $19_1 : $17_1 } $1_1 = Math_fround($15_1 + $17_1); if (!($5_1 | $1_1 != $1_1)) { $2_1 = $1($2_1, $1_1); break label$270 } $2_1 = $5_1 ? $1_1 : $2_1 } $16_1 = $16_1 + 1 | 0; if (($45_1 | 0) != ($16_1 | 0)) { continue } break } $5_1 = $45_1 } $1_1 = $2_1 } $19_1 = Math_fround($31_1 + ($23_1 ? $67_1 : Math_fround(0))); $2_1 = Math_fround($27_1 + $1_1); $31_1 = Math_fround($19_1 + $2_1); if ($3_1 >>> 0 < $5_1 >>> 0) { $24_1 = Math_fround($19_1 + $15_1); while (1) { $16_1 = HEAP32[$0_1 + 556 >> 2]; if (HEAP32[$0_1 + 560 >> 2] - $16_1 >> 2 >>> 0 <= $3_1 >>> 0) { break label$108 } $18_1 = HEAP32[$16_1 + ($3_1 << 2) >> 2]; $16_1 = HEAP32[$18_1 + 24 >> 2]; label$282: { if ($16_1 & 4194304 | ($16_1 & 196608) == 131072) { break label$282 } $16_1 = $16_1 >>> 13 & 7; if (!$16_1) { $16_1 = HEAP32[$0_1 + 24 >> 2] >>> 10 & 7 } label$283: { label$284: { switch ($16_1 - 1 | 0) { case 4: if (HEAPU8[$0_1 + 24 | 0] & 8) { break label$283 } case 0: $1_1 = $2($18_1, $13_1, $21_1); HEAPF32[($18_1 + (HEAP32[$32_1 >> 2] << 2) | 0) + 228 >> 2] = $19_1 + $1_1; break label$282; case 2: $1_1 = $5($18_1, $13_1, $21_1); $16_1 = $18_1 + 228 | 0; HEAPF32[$16_1 + (HEAP32[$32_1 >> 2] << 2) >> 2] = Math_fround($31_1 - $1_1) - HEAPF32[($16_1 + (HEAP32[$35_1 >> 2] << 2) | 0) + 288 >> 2]; break label$282; case 1: $16_1 = $18_1 + 228 | 0; HEAPF32[$16_1 + (HEAP32[$32_1 >> 2] << 2) >> 2] = $19_1 + Math_fround(Math_fround($2_1 - HEAPF32[($16_1 + (HEAP32[$35_1 >> 2] << 2) | 0) + 288 >> 2]) * Math_fround(.5)); break label$282; case 3: break label$284; default: break label$282 } } $1_1 = $2($18_1, $13_1, $21_1); HEAPF32[($18_1 + (HEAP32[$32_1 >> 2] << 2) | 0) + 228 >> 2] = $19_1 + $1_1; $20_1 = $18_1 + (HEAP32[$35_1 >> 2] << 3) | 0; $1_1 = HEAPF32[$20_1 + 572 >> 2]; label$291: { label$292: { $16_1 = HEAP32[$20_1 + 576 >> 2]; switch ($16_1 | 0) { case 0: case 3: break label$291; default: break label$292 } } $15_1 = HEAPF32[$20_1 + 572 >> 2]; if (!(($16_1 | 0) != 1 | $15_1 != $15_1)) { if ($1_1 < Math_fround(0)) { break label$291 } break label$282 } if ($52_1 & !($1_1 < Math_fround(0)) | (($16_1 | 0) != 2 | $15_1 != $15_1)) { break label$282 } } label$296: { if ($22_1 >>> 0 >= 2) { $17_1 = $2_1; $1_1 = HEAPF32[$18_1 + 516 >> 2]; $15_1 = Math_fround($1_1 + Math_fround($2($18_1, $22_1, $21_1) + $5($18_1, $22_1, $21_1))); break label$296 } $17_1 = Math_fround(HEAPF32[$18_1 + 520 >> 2] + Math_fround($2($18_1, $13_1, $21_1) + $5($18_1, $13_1, $21_1))); $1_1 = HEAPF32[$18_1 + 516 >> 2]; $15_1 = $2_1 } label$294: { label$295: { if (!($15_1 != $15_1 | $1_1 != $1_1)) { if (Math_fround(Math_abs(Math_fround($15_1 - $1_1))) < Math_fround(9999999747378752e-20)) { break label$295 } break label$294 } if ($15_1 == $15_1 | $1_1 == $1_1) { break label$294 } } $1_1 = HEAPF32[$18_1 + 520 >> 2]; $16_1 = $1_1 != $1_1; if (!($16_1 | $17_1 != $17_1)) { if (!(Math_fround(Math_abs(Math_fround($17_1 - $1_1))) < Math_fround(9999999747378752e-20))) { break label$294 } break label$282 } if ($17_1 == $17_1) { break label$294 } if ($16_1) { break label$282 } } $25($18_1, $15_1, $17_1, $38_1, 1, 1, $21_1, $34_1, 1, 3, $9_1, $10_1, $11_1, $12_1); break label$282 } wasm2js_i32$0 = $18_1, wasm2js_f32$0 = Math_fround(Math_fround($24_1 - $39($18_1)) + $21($18_1, 0, $30_1)), HEAPF32[wasm2js_i32$0 + 232 >> 2] = wasm2js_f32$0 } $3_1 = $3_1 + 1 | 0; if (($5_1 | 0) != ($3_1 | 0)) { continue } break } } $16_1 = ($23_1 | 0) != ($36_1 | 0); $23_1 = $23_1 + 1 | 0; $3_1 = $5_1; if ($16_1) { continue } break } } $20_1 = $0_1 + 516 | 0; $1_1 = $9($0_1, 2, $64_1, $6_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, 2, $6_1) + $3($0_1, 2)) + Math_fround($6($0_1, 2, $6_1) + $4($0_1, 2))); label$300: { if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$300 } $1_1 = $3_1 ? $2_1 : $1_1 } HEAPF32[$20_1 >> 2] = $1_1; $1_1 = $9($0_1, 0, $65_1, $7_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, 0, $6_1) + $3($0_1, 0)) + Math_fround($6($0_1, 0, $6_1) + $4($0_1, 0))); label$302: { if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$302 } $1_1 = $3_1 ? $2_1 : $1_1 } HEAPF32[$0_1 + 520 >> 2] = $1_1; label$304: { label$305: { label$306: { if ($48_1) { $3_1 = HEAP32[$0_1 + 24 >> 2] >>> 20 & 3; if (($3_1 | 0) == 2 | ($48_1 | 0) != 2) { break label$306 } } $1_1 = $9($0_1, $22_1, $57_1, $55_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, $22_1, $6_1) + $3($0_1, $22_1)) + Math_fround($6($0_1, $22_1, $6_1) + $4($0_1, $22_1))); if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$305 } $1_1 = $3_1 ? $2_1 : $1_1; break label$305 } if (($48_1 | 0) != 2 | ($3_1 | 0) != 2) { break label$304 } $2_1 = Math_fround($46_1 + $28_1); $3_1 = $2_1 != $2_1; $1_1 = $9($0_1, $22_1, $57_1, $55_1); label$309: { if (!($3_1 | $1_1 != $1_1)) { $1_1 = $63($2_1, $1_1); break label$309 } $1_1 = $3_1 ? $1_1 : $2_1 } $3_1 = $1_1 != $1_1; if (!($3_1 | $46_1 != $46_1)) { $1_1 = $1($1_1, $46_1); break label$305 } $1_1 = $3_1 ? $46_1 : $1_1 } HEAPF32[$20_1 + (HEAP32[$53_1 >> 2] << 2) >> 2] = $1_1 } label$312: { label$313: { label$314: { if ($25_1) { $5_1 = ($25_1 | 0) != 2; $3_1 = HEAP32[$0_1 + 24 >> 2] >>> 20 & 3; if ($5_1 | ($3_1 | 0) == 2) { break label$314 } } $1_1 = $9($0_1, $13_1, Math_fround($41_1 + $50_1), $58_1); $3_1 = $1_1 != $1_1; $2_1 = Math_fround(Math_fround($7($0_1, $13_1, $6_1) + $3($0_1, $13_1)) + Math_fround($6($0_1, $13_1, $6_1) + $4($0_1, $13_1))); if (!($3_1 | $2_1 != $2_1)) { $1_1 = $1($1_1, $2_1); break label$313 } $1_1 = $3_1 ? $2_1 : $1_1; break label$313 } if ($5_1 | ($3_1 | 0) != 2) { break label$312 } $2_1 = Math_fround($41_1 + $30_1); $3_1 = $2_1 != $2_1; $1_1 = $9($0_1, $13_1, Math_fround($41_1 + $50_1), $58_1); label$317: { if (!($3_1 | $1_1 != $1_1)) { $1_1 = $63($2_1, $1_1); break label$317 } $1_1 = $3_1 ? $1_1 : $2_1 } $3_1 = $1_1 != $1_1; if (!($3_1 | $41_1 != $41_1)) { $1_1 = $1($1_1, $41_1); break label$313 } $1_1 = $3_1 ? $41_1 : $1_1 } HEAPF32[$20_1 + (HEAP32[$35_1 >> 2] << 2) >> 2] = $1_1 } label$320: { if (!$8_1) { break label$320 } if ((HEAP32[$0_1 + 24 >> 2] & 786432) == 524288) { $5_1 = $45_1 >>> 0 <= 1 ? 1 : $45_1; $8_1 = HEAP32[$0_1 + 556 >> 2]; $18_1 = HEAP32[$0_1 + 560 >> 2] - $8_1 >> 2; $3_1 = 0; while (1) { $16_1 = 0; $16_1 = $3_1 >>> 0 < $18_1 >>> 0 ? HEAP32[$8_1 + ($3_1 << 2) >> 2] : $16_1; if ((HEAP32[$16_1 + 24 >> 2] & 196608) != 131072) { $16_1 = $16_1 + 228 | 0; $23_1 = $16_1 + (HEAP32[$32_1 >> 2] << 2) | 0; $26_1 = HEAP32[$35_1 >> 2] << 2; HEAPF32[$23_1 >> 2] = Math_fround(HEAPF32[$26_1 + $20_1 >> 2] - HEAPF32[$23_1 >> 2]) - HEAPF32[($16_1 + $26_1 | 0) + 288 >> 2] } $3_1 = $3_1 + 1 | 0; if (($5_1 | 0) != ($3_1 | 0)) { continue } break } } $5_1 = HEAP32[$0_1 + 556 >> 2]; $23_1 = HEAP32[$0_1 + 560 >> 2]; if (($5_1 | 0) != ($23_1 | 0)) { $26_1 = (($22_1 >>> 0 > 1 ? $48_1 : $4_1) | 0) != 0; while (1) { $4_1 = HEAP32[$5_1 >> 2]; label$327: { if ((HEAP32[$4_1 + 24 >> 2] & 4390912) != 131072) { break label$327 } $2_1 = $21_1; $28_1 = $34_1; if (HEAPU8[HEAP32[$0_1 + 568 >> 2] + 12 | 0] & 2) { $28_1 = HEAPF32[$0_1 + 520 >> 2]; $2_1 = HEAPF32[$0_1 + 516 >> 2] } $3_1 = HEAP32[$0_1 + 24 >> 2] >>> 2 & 3; label$329: { label$330: { if (($38_1 | 0) == 2) { $18_1 = 0; $16_1 = 3; label$332: { switch ($3_1 - 2 | 0) { case 0: break label$329; case 1: break label$332; default: break label$330 } } $16_1 = 2; break label$329 } $18_1 = 0; if ($3_1 >>> 0 <= 1) { break label$330 } $16_1 = $3_1; break label$329 } $16_1 = $3_1; $18_1 = $51_1 } $7_1 = Math_fround($2($4_1, 2, $2_1) + $5($4_1, 2, $2_1)); $17_1 = $2($4_1, 0, $2_1); $19_1 = $5($4_1, 0, $2_1); $1_1 = HEAPF32[$4_1 + 572 >> 2]; label$333: { label$334: { label$335: { $3_1 = HEAP32[$4_1 + 576 >> 2]; switch ($3_1 | 0) { case 0: case 3: break label$334; default: break label$335 } } $6_1 = HEAPF32[$4_1 + 572 >> 2]; label$336: { if (!(($3_1 | 0) != 1 | $6_1 != $6_1)) { $15_1 = $1_1; if (!($1_1 < Math_fround(0))) { break label$336 } break label$334 } label$338: { if (!(($3_1 | 0) != 2 | $6_1 != $6_1)) { if ($2_1 != $2_1 | $1_1 < Math_fround(0)) { break label$334 } break label$338 } $15_1 = Math_fround(NaN); label$340: { switch ($3_1 - 1 | 0) { case 1: break label$338; case 0: break label$340; default: break label$336 } } $15_1 = $1_1; break label$336 } $15_1 = Math_fround(Math_fround($2_1 * $1_1) * Math_fround(.009999999776482582)) } $15_1 = Math_fround($7_1 + $15_1); break label$333 } $15_1 = Math_fround(NaN); if (!$15($4_1, 2)) { break label$333 } if (!$45($4_1, 2)) { break label$333 } $1_1 = $9($4_1, 2, Math_fround(Math_fround(HEAPF32[$0_1 + 516 >> 2] - Math_fround($3($0_1, 2) + $4($0_1, 2))) - Math_fround($21($4_1, 2, $2_1) + $37($4_1, 2, $2_1))), $2_1); $3_1 = $1_1 != $1_1; $6_1 = Math_fround(Math_fround($7($4_1, 2, $2_1) + $3($4_1, 2)) + Math_fround($6($4_1, 2, $2_1) + $4($4_1, 2))); if (!($3_1 | $6_1 != $6_1)) { $15_1 = $1($1_1, $6_1); break label$333 } $15_1 = $3_1 ? $6_1 : $1_1 } $17_1 = Math_fround($17_1 + $19_1); label$342: { label$343: { label$344: { label$345: { label$346: { label$347: { label$348: { $8_1 = $15_1 != $15_1; $6_1 = HEAPF32[$4_1 + 580 >> 2]; label$349: { label$350: { label$351: { $3_1 = HEAP32[$4_1 + 584 >> 2]; switch ($3_1 | 0) { case 0: case 3: break label$350; default: break label$351 } } $1_1 = HEAPF32[$4_1 + 580 >> 2]; label$352: { if (!(($3_1 | 0) != 1 | $1_1 != $1_1)) { $1_1 = $6_1; if (!($1_1 < Math_fround(0))) { break label$352 } break label$350 } label$354: { if (!(($3_1 | 0) != 2 | $1_1 != $1_1)) { if ($28_1 != $28_1 | $6_1 < Math_fround(0)) { break label$350 } break label$354 } $1_1 = Math_fround(NaN); label$356: { switch ($3_1 - 1 | 0) { case 1: break label$354; case 0: break label$356; default: break label$352 } } $1_1 = $6_1; break label$352 } $1_1 = Math_fround(Math_fround($28_1 * $6_1) * Math_fround(.009999999776482582)) } $1_1 = Math_fround($17_1 + $1_1); break label$349 } label$357: { if ($15($4_1, 0)) { if ($45($4_1, 0)) { break label$357 } } $1_1 = Math_fround(NaN); if ($15_1 == $15_1) { break label$348 } break label$344 } $1_1 = $9($4_1, 0, Math_fround(Math_fround(HEAPF32[$0_1 + 520 >> 2] - Math_fround($3($0_1, 0) + $4($0_1, 0))) - Math_fround($21($4_1, 0, $28_1) + $37($4_1, 0, $28_1))), $28_1); $3_1 = $1_1 != $1_1; $6_1 = Math_fround(Math_fround($7($4_1, 0, $2_1) + $3($4_1, 0)) + Math_fround($6($4_1, 0, $2_1) + $4($4_1, 0))); if (!($3_1 | $6_1 != $6_1)) { $1_1 = $1($1_1, $6_1); break label$349 } $1_1 = $3_1 ? $6_1 : $1_1 } if (($8_1 | 0) == ($1_1 != $1_1 | 0)) { break label$346 } $19_1 = HEAPF32[$4_1 + 224 >> 2]; if ($19_1 != $19_1) { break label$346 } if ($15_1 != $15_1) { $15_1 = Math_fround(Math_fround(Math_fround($1_1 - $17_1) * $19_1) + $7_1); break label$346 } if ($1_1 == $1_1) { break label$346 } break label$347 } $19_1 = HEAPF32[$4_1 + 224 >> 2]; if ($19_1 != $19_1) { break label$345 } } $1_1 = Math_fround($17_1 + Math_fround(Math_fround($15_1 - $7_1) / $19_1)) } if ($15_1 != $15_1) { break label$344 } if ($1_1 == $1_1) { break label$342 } } $3_1 = 0; break label$343 } $3_1 = 1 } $8_1 = $2_1 > Math_fround(0); $36_1 = $3_1 & $26_1 & $16_1 >>> 0 < 2; $6_1 = $36_1 ? $8_1 ? $2_1 : $15_1 : $15_1; $3_1 = $3_1 ^ 1; $25($4_1, $6_1, $1_1, $38_1, $36_1 ? $8_1 ? 2 : $3_1 : $3_1, $1_1 == $1_1, $6_1, $1_1, 0, 6, $9_1, $10_1, $11_1, $12_1); $15_1 = Math_fround(HEAPF32[$4_1 + 516 >> 2] + $88($4_1, 2, $2_1)); $1_1 = Math_fround(HEAPF32[$4_1 + 520 >> 2] + $88($4_1, 0, $2_1)) } $25($4_1, $15_1, $1_1, $38_1, 1, 1, $15_1, $1_1, 1, 1, $9_1, $10_1, $11_1, $12_1); $3_1 = $16_1 >>> 0 < 2; $7_1 = $3_1 ? $2_1 : $28_1; $8_1 = HEAP32[HEAP32[$0_1 + 568 >> 2] + 12 >> 2]; $6_1 = $8_1 & 4 ? $7_1 : $2_1; label$361: { label$362: { label$363: { if (!$45($4_1, $16_1)) { break label$363 } if ($15($4_1, $16_1)) { break label$363 } $36_1 = HEAP32[($16_1 << 2) + 4420 >> 2] << 2; $1_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$36_1 + $20_1 >> 2] - HEAPF32[($4_1 + $36_1 | 0) + 516 >> 2]) - $4($0_1, $16_1)) - $5($4_1, $16_1, $6_1)) - $37($4_1, $16_1, $3_1 ? $28_1 : $2_1)); break label$362 } if (!($15($4_1, $16_1) | (HEAP32[$0_1 + 24 >> 2] & 112) != 16)) { $3_1 = HEAP32[($16_1 << 2) + 4420 >> 2] << 2; $1_1 = Math_fround(Math_fround(HEAPF32[$3_1 + $20_1 >> 2] - HEAPF32[($3_1 + $4_1 | 0) + 516 >> 2]) * Math_fround(.5)); break label$362 } if (!($15($4_1, $16_1) | (HEAP32[$0_1 + 24 >> 2] & 112) != 32)) { $3_1 = HEAP32[($16_1 << 2) + 4420 >> 2] << 2; $1_1 = Math_fround(HEAPF32[$3_1 + $20_1 >> 2] - HEAPF32[($3_1 + $4_1 | 0) + 516 >> 2]); break label$362 } if (!($8_1 & 2)) { break label$361 } if (!$15($4_1, $16_1)) { break label$361 } $1_1 = HEAPF32[$20_1 + (HEAP32[($16_1 << 2) + 4420 >> 2] << 2) >> 2]; $1_1 = Math_fround(Math_fround($21($4_1, $16_1, $1_1) + $3($0_1, $16_1)) + $2($4_1, $16_1, $1_1)) } HEAPF32[($4_1 + (HEAP32[($16_1 << 2) + 4388 >> 2] << 2) | 0) + 228 >> 2] = $1_1 } label$366: { label$367: { if (!$45($4_1, $18_1)) { break label$367 } if ($15($4_1, $18_1)) { break label$367 } $3_1 = HEAP32[($18_1 << 2) + 4420 >> 2] << 2; $1_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 + $20_1 >> 2] - HEAPF32[($3_1 + $4_1 | 0) + 516 >> 2]) - $4($0_1, $18_1)) - $5($4_1, $18_1, $6_1)) - $37($4_1, $18_1, $7_1)); break label$366 } label$368: { if ($15($4_1, $18_1)) { break label$368 } $3_1 = HEAP32[$4_1 + 24 >> 2] >>> 13 & 7; if (!$3_1) { $3_1 = HEAP32[$0_1 + 24 >> 2] >>> 10 & 7 } if (($3_1 | 0) != 2) { break label$368 } $3_1 = HEAP32[($18_1 << 2) + 4420 >> 2] << 2; $1_1 = Math_fround(Math_fround(HEAPF32[$3_1 + $20_1 >> 2] - HEAPF32[($3_1 + $4_1 | 0) + 516 >> 2]) * Math_fround(.5)); break label$366 } label$371: { if ($15($4_1, $18_1)) { break label$371 } $16_1 = HEAP32[$4_1 + 24 >> 2] >>> 13 & 7; $3_1 = HEAP32[$0_1 + 24 >> 2]; $16_1 = $16_1 ? $16_1 : $3_1 >>> 10 & 7; label$372: { if (($16_1 | 0) == 5) { if (($3_1 & 786432) == 524288) { break label$372 } break label$371 } if ((($16_1 | 0) == 3 | 0) == (($3_1 & 786432) == 524288 | 0)) { break label$371 } } $3_1 = HEAP32[($18_1 << 2) + 4420 >> 2] << 2; $1_1 = Math_fround(HEAPF32[$3_1 + $20_1 >> 2] - HEAPF32[($3_1 + $4_1 | 0) + 516 >> 2]); break label$366 } if (!($8_1 & 2)) { break label$327 } if (!$15($4_1, $18_1)) { break label$327 } $1_1 = HEAPF32[$20_1 + (HEAP32[($18_1 << 2) + 4420 >> 2] << 2) >> 2]; $1_1 = Math_fround(Math_fround($21($4_1, $18_1, $1_1) + $3($0_1, $18_1)) + $2($4_1, $18_1, $1_1)) } HEAPF32[($4_1 + (HEAP32[($18_1 << 2) + 4388 >> 2] << 2) | 0) + 228 >> 2] = $1_1 } $5_1 = $5_1 + 4 | 0; if (($23_1 | 0) != ($5_1 | 0)) { continue } break } } if (!(($13_1 | $22_1) & 1)) { break label$320 } $5_1 = $13_1 & 1; $8_1 = $22_1 & 1; $9_1 = $45_1 >>> 0 <= 1 ? 1 : $45_1; $10_1 = ($13_1 << 2) + 4404 | 0; $11_1 = ($22_1 << 2) + 4404 | 0; $12_1 = HEAP32[$0_1 + 556 >> 2]; $13_1 = HEAP32[$0_1 + 560 >> 2] - $12_1 >> 2; $0_1 = 0; while (1) { if (($0_1 | 0) == ($13_1 | 0)) { break label$108 } $3_1 = HEAP32[$12_1 + ($0_1 << 2) >> 2]; label$375: { if (HEAPU8[$3_1 + 26 | 0] & 64) { break label$375 } if ($8_1) { $4_1 = $3_1 + 228 | 0; $16_1 = HEAP32[$53_1 >> 2] << 2; HEAPF32[$4_1 + (HEAP32[$11_1 >> 2] << 2) >> 2] = Math_fround(HEAPF32[$16_1 + $20_1 >> 2] - HEAPF32[($4_1 + $16_1 | 0) + 288 >> 2]) - HEAPF32[$4_1 + (HEAP32[$43_1 >> 2] << 2) >> 2] } if (!$5_1) { break label$375 } $3_1 = $3_1 + 228 | 0; $4_1 = HEAP32[$35_1 >> 2] << 2; HEAPF32[$3_1 + (HEAP32[$10_1 >> 2] << 2) >> 2] = Math_fround(HEAPF32[$4_1 + $20_1 >> 2] - HEAPF32[($3_1 + $4_1 | 0) + 288 >> 2]) - HEAPF32[$3_1 + (HEAP32[$32_1 >> 2] << 2) >> 2] } $0_1 = $0_1 + 1 | 0; if (($9_1 | 0) != ($0_1 | 0)) { continue } break } } if (!$40_1) { break label$1 } $8($40_1); break label$1 } fimport$4(); wasm2js_trap() } global$0 = $14_1 + 384 | 0 } function $131() { var $0_1 = 0, $1_1 = 0; fimport$6(7208, 7209, 7210, 0, 4452, 17, 4455, 0, 4455, 0, 2561, 4457, 18); $0_1 = $0(8); HEAP32[$0_1 >> 2] = 8; HEAP32[$0_1 + 4 >> 2] = 1; fimport$0(7208, 2954, 6, 4464, 4488, 19, $0_1 | 0, 1, 0); fimport$6(7212, 7213, 7214, 7208, 4452, 20, 4452, 21, 4452, 22, 2033, 4457, 23); $0_1 = $0(4); HEAP32[$0_1 >> 2] = 24; fimport$0(7212, 2391, 2, 4496, 4504, 25, $0_1 | 0, 0, 0); fimport$2(7208, 1430, 2, 4508, 4516, 26, 27, 0); fimport$2(7208, 3059, 3, 4596, 4608, 28, 29, 0); fimport$6(7215, 7216, 7217, 0, 4452, 30, 4455, 0, 4455, 0, 2577, 4457, 31); $0_1 = $0(8); HEAP32[$0_1 >> 2] = 8; HEAP32[$0_1 + 4 >> 2] = 1; fimport$0(7215, 3325, 2, 4616, 4504, 32, $0_1 | 0, 1, 0); fimport$6(7218, 7219, 7220, 7215, 4452, 33, 4452, 34, 4452, 35, 2056, 4457, 36); $0_1 = $0(4); HEAP32[$0_1 >> 2] = 37; fimport$0(7218, 2391, 2, 4624, 4504, 38, $0_1 | 0, 0, 0); fimport$2(7215, 1430, 2, 4632, 4516, 39, 40, 0); fimport$2(7215, 3059, 3, 4596, 4608, 28, 41, 0); fimport$6(7221, 7222, 7223, 0, 4452, 42, 4455, 0, 4455, 0, 2893, 4457, 43); fimport$15(7221, 1, 4680, 4452, 44, 45); fimport$2(7221, 2947, 1, 4680, 4452, 44, 45, 0); fimport$2(7221, 1161, 2, 4684, 4504, 46, 47, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 48; fimport$0(7221, 3266, 4, 4704, 4720, 49, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 50; fimport$0(7221, 2013, 3, 4728, 4740, 51, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 52; fimport$0(7221, 1984, 3, 4748, 4760, 53, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 54; fimport$0(7221, 3421, 3, 4768, 4760, 55, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 56; fimport$0(7221, 1832, 3, 4748, 4760, 53, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 57; fimport$0(7221, 3296, 3, 4780, 4608, 58, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 59; fimport$0(7221, 1958, 2, 4792, 4516, 60, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 61; fimport$0(7221, 3431, 2, 4800, 4516, 62, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 63; fimport$0(7221, 1817, 2, 4792, 4516, 60, $0_1 | 0, 0, 0); fimport$11(7224, 1303, 4808, 64, 4457, 65); $35(1764, 0); $35(1644, 8); $35(2177, 16); $35(2487, 24); $35(2593, 32); $35(1650, 40); fimport$10(7224); fimport$11(7211, 2930, 4808, 66, 4457, 67); $122(2593, 0); $122(1650, 8); fimport$10(7211); fimport$11(7225, 2941, 4808, 68, 4457, 69); $0_1 = $0(4); HEAP32[$0_1 >> 2] = 8; $1_1 = $0(4); HEAP32[$1_1 >> 2] = 8; fimport$8(7225, 2935, 7258, 4810, 70, $0_1 | 0, 7258, 4814, 71, $1_1 | 0); $0_1 = $0(4); HEAP32[$0_1 >> 2] = 0; $1_1 = $0(4); HEAP32[$1_1 >> 2] = 0; fimport$8(7225, 1639, 7251, 4516, 72, $0_1 | 0, 7251, 4760, 73, $1_1 | 0); fimport$10(7225); fimport$6(7226, 7227, 7228, 0, 4452, 74, 4455, 0, 4455, 0, 3054, 4457, 75); fimport$15(7226, 1, 4820, 4452, 76, 77); fimport$2(7226, 1625, 1, 4820, 4452, 76, 77, 0); fimport$2(7226, 2883, 2, 4824, 4516, 78, 79, 0); fimport$2(7226, 1161, 2, 4832, 4504, 80, 81, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 82; fimport$0(7226, 1785, 2, 4832, 4504, 83, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 84; fimport$0(7226, 3037, 3, 4840, 4760, 85, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 86; fimport$0(7226, 2962, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 88; fimport$0(7226, 2367, 4, 4864, 4880, 89, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 90; fimport$0(7226, 1517, 4, 4864, 4880, 89, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 91; fimport$0(7226, 1388, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 92; fimport$0(7226, 1850, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 93; fimport$0(7226, 2904, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 94; fimport$0(7226, 2411, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 95; fimport$0(7226, 2196, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 96; fimport$0(7226, 1352, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 97; fimport$0(7226, 2445, 4, 4864, 4880, 89, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 98; fimport$0(7226, 1536, 4, 4864, 4880, 89, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 99; fimport$0(7226, 2268, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 100; fimport$0(7226, 1252, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 101; fimport$0(7226, 1169, 3, 4852, 4760, 87, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 102; fimport$0(7226, 1191, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 104; fimport$0(7226, 1878, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 105; fimport$0(7226, 1497, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 106; fimport$0(7226, 2251, 2, 4832, 4504, 83, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 107; fimport$0(7226, 1228, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 108; fimport$0(7226, 2533, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 109; fimport$0(7226, 2623, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 110; fimport$0(7226, 1572, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 111; fimport$0(7226, 2282, 2, 4832, 4504, 83, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 112; fimport$0(7226, 1683, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 113; fimport$0(7226, 1460, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 114; fimport$0(7226, 2237, 2, 4832, 4504, 83, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 115; fimport$0(7226, 2641, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 116; fimport$0(7226, 1588, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 117; fimport$0(7226, 1703, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 118; fimport$0(7226, 1477, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 119; fimport$0(7226, 2599, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 120; fimport$0(7226, 1553, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 121; fimport$0(7226, 1657, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 122; fimport$0(7226, 1440, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 123; fimport$0(7226, 2337, 3, 4888, 4814, 103, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 124; fimport$0(7226, 2125, 4, 4864, 4880, 89, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 125; fimport$0(7226, 2751, 4, 4864, 4880, 89, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 126; fimport$0(7226, 1607, 4, 4864, 4880, 89, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 127; fimport$0(7226, 2220, 4, 4864, 4880, 89, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 128; fimport$0(7226, 2978, 2, 4900, 4516, 129, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 130; fimport$0(7226, 2379, 3, 4908, 4608, 131, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 132; fimport$0(7226, 1404, 2, 4900, 4516, 129, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 133; fimport$0(7226, 1864, 2, 4900, 4516, 129, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 134; fimport$0(7226, 2917, 2, 4900, 4516, 129, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 135; fimport$0(7226, 2428, 2, 4900, 4516, 129, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 136; fimport$0(7226, 2208, 2, 4900, 4516, 129, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 137; fimport$0(7226, 1370, 2, 4900, 4516, 129, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 138; fimport$0(7226, 2455, 3, 4908, 4608, 131, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 139; fimport$0(7226, 1891, 2, 4920, 4516, 140, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 141; fimport$0(7226, 1240, 2, 4928, 4810, 142, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 143; fimport$0(7226, 2547, 2, 4928, 4810, 142, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 144; fimport$0(7226, 2632, 2, 4920, 4516, 140, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 145; fimport$0(7226, 1693, 2, 4920, 4516, 140, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 146; fimport$0(7226, 2653, 2, 4920, 4516, 140, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 147; fimport$0(7226, 1716, 2, 4920, 4516, 140, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 148; fimport$0(7226, 2611, 2, 4920, 4516, 140, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 149; fimport$0(7226, 1670, 2, 4920, 4516, 140, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 150; fimport$0(7226, 2352, 2, 4928, 4810, 142, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 151; fimport$0(7226, 2135, 3, 4936, 4948, 152, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 153; fimport$0(7226, 1264, 2, 4900, 4516, 129, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 154; fimport$0(7226, 1180, 2, 4900, 4516, 129, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 155; fimport$0(7226, 2762, 3, 4908, 4608, 131, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 156; fimport$0(7226, 2227, 3, 4956, 4968, 157, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 158; fimport$0(7226, 3066, 4, 4976, 4720, 159, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 160; fimport$0(7226, 3087, 3, 4992, 4760, 161, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 162; fimport$0(7226, 1325, 2, 5004, 4516, 163, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 164; fimport$0(7226, 1420, 2, 5012, 4516, 165, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 166; fimport$0(7226, 3078, 3, 5020, 4608, 167, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 168; fimport$0(7226, 2994, 2, 5032, 4516, 169, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 170; fimport$0(7226, 3014, 3, 5040, 4760, 171, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 172; fimport$0(7226, 3389, 3, 5052, 4760, 173, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 174; fimport$0(7226, 3387, 2, 4832, 4504, 83, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 175; fimport$0(7226, 3406, 3, 5064, 4760, 176, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 177; fimport$0(7226, 3404, 2, 4832, 4504, 83, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 178; fimport$0(7226, 1151, 2, 4832, 4504, 83, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 179; fimport$0(7226, 1143, 2, 5076, 4516, 180, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 181; fimport$0(7226, 1276, 5, 5088, 5108, 182, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 183; fimport$0(7226, 1769, 2, 4928, 4810, 142, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 184; fimport$0(7226, 1747, 2, 4928, 4810, 142, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 185; fimport$0(7226, 2181, 2, 4928, 4810, 142, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 186; fimport$0(7226, 2494, 2, 4928, 4810, 142, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 187; fimport$0(7226, 2665, 2, 4928, 4810, 142, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 188; fimport$0(7226, 1729, 2, 4928, 4810, 142, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 189; fimport$0(7226, 1292, 2, 5116, 4516, 190, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 191; fimport$0(7226, 2465, 3, 4936, 4948, 152, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 192; fimport$0(7226, 2145, 3, 4936, 4948, 152, $0_1 | 0, 0, 0); $0_1 = $0(8); HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 193; fimport$0(7226, 2773, 3, 4936, 4948, 152, $0_1 | 0, 0, 0) } function $95($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) { var $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0; $9_1 = global$0 - 80 | 0; global$0 = $9_1; HEAP32[$9_1 + 76 >> 2] = $1_1; $24_1 = $9_1 + 55 | 0; $19_1 = $9_1 + 56 | 0; label$1: { label$2: { label$3: { label$4: { label$5: while (1) { $10_1 = $1_1; if (($15_1 ^ 2147483647) < ($7_1 | 0)) { break label$4 } $15_1 = $7_1 + $15_1 | 0; label$6: { label$7: { label$8: { $7_1 = $10_1; $8_1 = HEAPU8[$7_1 | 0]; if ($8_1) { while (1) { label$11: { $1_1 = $8_1 & 255; label$12: { if (!$1_1) { $1_1 = $7_1; break label$12 } if (($1_1 | 0) != 37) { break label$11 } $8_1 = $7_1; while (1) { if (HEAPU8[$8_1 + 1 | 0] != 37) { $1_1 = $8_1; break label$12 } $7_1 = $7_1 + 1 | 0; $11_1 = HEAPU8[$8_1 + 2 | 0]; $1_1 = $8_1 + 2 | 0; $8_1 = $1_1; if (($11_1 | 0) == 37) { continue } break } } $7_1 = $7_1 - $10_1 | 0; $23_1 = $15_1 ^ 2147483647; if (($7_1 | 0) > ($23_1 | 0)) { break label$4 } if ($0_1) { $11($0_1, $10_1, $7_1) } if ($7_1) { continue label$5 } HEAP32[$9_1 + 76 >> 2] = $1_1; $7_1 = $1_1 + 1 | 0; $17_1 = -1; $8_1 = HEAP8[$1_1 + 1 | 0]; if (!(!$46($8_1) | HEAPU8[$1_1 + 2 | 0] != 36)) { $17_1 = $8_1 - 48 | 0; $20_1 = 1; $7_1 = $1_1 + 3 | 0 } HEAP32[$9_1 + 76 >> 2] = $7_1; $14_1 = 0; $8_1 = HEAP8[$7_1 | 0]; $1_1 = $8_1 - 32 | 0; label$18: { if ($1_1 >>> 0 > 31) { $11_1 = $7_1; break label$18 } $11_1 = $7_1; $1_1 = 1 << $1_1; if (!($1_1 & 75913)) { break label$18 } while (1) { $11_1 = $7_1 + 1 | 0; HEAP32[$9_1 + 76 >> 2] = $11_1; $14_1 = $1_1 | $14_1; $8_1 = HEAP8[$7_1 + 1 | 0]; $1_1 = $8_1 - 32 | 0; if ($1_1 >>> 0 >= 32) { break label$18 } $7_1 = $11_1; $1_1 = 1 << $1_1; if ($1_1 & 75913) { continue } break } } label$21: { if (($8_1 | 0) == 42) { $1_1 = HEAP8[$11_1 + 1 | 0]; label$23: { if (!(!$46($1_1) | HEAPU8[$11_1 + 2 | 0] != 36)) { HEAP32[(($1_1 << 2) + $4_1 | 0) - 192 >> 2] = 10; $8_1 = $11_1 + 3 | 0; $20_1 = 1; $16_1 = HEAP32[((HEAP8[$11_1 + 1 | 0] << 3) + $3_1 | 0) - 384 >> 2]; break label$23 } if ($20_1) { break label$8 } $8_1 = $11_1 + 1 | 0; if (!$0_1) { HEAP32[$9_1 + 76 >> 2] = $8_1; $20_1 = 0; $16_1 = 0; break label$21 } $1_1 = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $1_1 + 4; $20_1 = 0; $16_1 = HEAP32[$1_1 >> 2] } HEAP32[$9_1 + 76 >> 2] = $8_1; if (($16_1 | 0) >= 0) { break label$21 } $16_1 = 0 - $16_1 | 0; $14_1 = $14_1 | 8192; break label$21 } $16_1 = $94($9_1 + 76 | 0); if (($16_1 | 0) < 0) { break label$4 } $8_1 = HEAP32[$9_1 + 76 >> 2] } $7_1 = 0; $13_1 = -1; label$26: { if (HEAPU8[$8_1 | 0] != 46) { $1_1 = $8_1; $18_1 = 0; break label$26 } if (HEAPU8[$8_1 + 1 | 0] == 42) { $1_1 = HEAP8[$8_1 + 2 | 0]; label$29: { if (!(!$46($1_1) | HEAPU8[$8_1 + 3 | 0] != 36)) { HEAP32[(($1_1 << 2) + $4_1 | 0) - 192 >> 2] = 10; $1_1 = $8_1 + 4 | 0; $13_1 = HEAP32[((HEAP8[$8_1 + 2 | 0] << 3) + $3_1 | 0) - 384 >> 2]; break label$29 } if ($20_1) { break label$8 } $1_1 = $8_1 + 2 | 0; $13_1 = 0; if (!$0_1) { break label$29 } $8_1 = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $8_1 + 4; $13_1 = HEAP32[$8_1 >> 2] } HEAP32[$9_1 + 76 >> 2] = $1_1; $18_1 = ($13_1 ^ -1) >>> 31 | 0; break label$26 } HEAP32[$9_1 + 76 >> 2] = $8_1 + 1; $13_1 = $94($9_1 + 76 | 0); $1_1 = HEAP32[$9_1 + 76 >> 2]; $18_1 = 1 } while (1) { $12_1 = $7_1; $11_1 = 28; $21_1 = $1_1; $7_1 = HEAP8[$1_1 | 0]; if ($7_1 - 123 >>> 0 < 4294967238) { break label$3 } $1_1 = $21_1 + 1 | 0; $7_1 = HEAPU8[($7_1 + Math_imul($12_1, 58) | 0) + 5071 | 0]; if ($7_1 - 1 >>> 0 < 8) { continue } break } HEAP32[$9_1 + 76 >> 2] = $1_1; label$32: { label$33: { if (($7_1 | 0) != 27) { if (!$7_1) { break label$3 } if (($17_1 | 0) >= 0) { HEAP32[($17_1 << 2) + $4_1 >> 2] = $7_1; $7_1 = ($17_1 << 3) + $3_1 | 0; $8_1 = HEAP32[$7_1 + 4 >> 2]; HEAP32[$9_1 + 64 >> 2] = HEAP32[$7_1 >> 2]; HEAP32[$9_1 + 68 >> 2] = $8_1; break label$33 } if (!$0_1) { break label$6 } $93($9_1 - -64 | 0, $7_1, $2_1, $6_1); break label$32 } if (($17_1 | 0) >= 0) { break label$3 } } $7_1 = 0; if (!$0_1) { continue label$5 } } $8_1 = $14_1 & -65537; $14_1 = $14_1 & 8192 ? $8_1 : $14_1; $17_1 = 0; $22_1 = 1199; $11_1 = $19_1; label$36: { label$37: { label$38: { label$39: { label$40: { label$41: { label$42: { label$43: { label$44: { label$45: { label$46: { label$47: { label$48: { label$49: { label$50: { label$51: { $7_1 = HEAP8[$21_1 | 0]; $7_1 = $12_1 ? ($7_1 & 15) == 3 ? $7_1 & -33 : $7_1 : $7_1; switch ($7_1 - 88 | 0) { case 11: break label$36; case 9: case 13: case 14: case 15: break label$37; case 27: break label$42; case 12: case 17: break label$45; case 23: break label$46; case 0: case 32: break label$47; case 24: break label$48; case 22: break label$49; case 29: break label$50; case 1: case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 10: case 16: case 18: case 19: case 20: case 21: case 25: case 26: case 28: case 30: case 31: break label$7; default: break label$51 } } label$52: { switch ($7_1 - 65 | 0) { case 0: case 4: case 5: case 6: break label$37; case 2: break label$40; case 1: case 3: break label$7; default: break label$52 } } if (($7_1 | 0) == 83) { break label$41 } break label$7 } $8_1 = HEAP32[$9_1 + 64 >> 2]; $12_1 = HEAP32[$9_1 + 68 >> 2]; $7_1 = 1199; break label$44 } $7_1 = 0; label$53: { switch ($12_1 & 255) { case 0: HEAP32[HEAP32[$9_1 + 64 >> 2] >> 2] = $15_1; continue label$5; case 1: HEAP32[HEAP32[$9_1 + 64 >> 2] >> 2] = $15_1; continue label$5; case 2: $10_1 = HEAP32[$9_1 + 64 >> 2]; HEAP32[$10_1 >> 2] = $15_1; HEAP32[$10_1 + 4 >> 2] = $15_1 >> 31; continue label$5; case 3: HEAP16[HEAP32[$9_1 + 64 >> 2] >> 1] = $15_1; continue label$5; case 4: HEAP8[HEAP32[$9_1 + 64 >> 2]] = $15_1; continue label$5; case 6: HEAP32[HEAP32[$9_1 + 64 >> 2] >> 2] = $15_1; continue label$5; case 7: break label$53; default: continue label$5 } } $10_1 = HEAP32[$9_1 + 64 >> 2]; HEAP32[$10_1 >> 2] = $15_1; HEAP32[$10_1 + 4 >> 2] = $15_1 >> 31; continue label$5 } $13_1 = $13_1 >>> 0 <= 8 ? 8 : $13_1; $14_1 = $14_1 | 8; $7_1 = 120 } $10_1 = $19_1; $8_1 = HEAP32[$9_1 + 64 >> 2]; $12_1 = HEAP32[$9_1 + 68 >> 2]; if ($8_1 | $12_1) { $25_1 = $7_1 & 32; while (1) { $10_1 = $10_1 - 1 | 0; HEAP8[$10_1 | 0] = $25_1 | HEAPU8[($8_1 & 15) + 5600 | 0]; $26_1 = !$12_1 & $8_1 >>> 0 > 15 | ($12_1 | 0) != 0; $21_1 = $12_1; $12_1 = $12_1 >>> 4 | 0; $8_1 = ($21_1 & 15) << 28 | $8_1 >>> 4; if ($26_1) { continue } break } } if (!($14_1 & 8) | !(HEAP32[$9_1 + 64 >> 2] | HEAP32[$9_1 + 68 >> 2])) { break label$43 } $22_1 = ($7_1 >>> 4 | 0) + 1199 | 0; $17_1 = 2; break label$43 } $7_1 = $19_1; $10_1 = HEAP32[$9_1 + 68 >> 2]; $12_1 = $10_1; $8_1 = HEAP32[$9_1 + 64 >> 2]; if ($10_1 | $8_1) { while (1) { $7_1 = $7_1 - 1 | 0; HEAP8[$7_1 | 0] = $8_1 & 7 | 48; $21_1 = !$12_1 & $8_1 >>> 0 > 7 | ($12_1 | 0) != 0; $10_1 = $12_1; $12_1 = $10_1 >>> 3 | 0; $8_1 = ($10_1 & 7) << 29 | $8_1 >>> 3; if ($21_1) { continue } break } } $10_1 = $7_1; if (!($14_1 & 8)) { break label$43 } $7_1 = $19_1 - $10_1 | 0; $13_1 = ($7_1 | 0) < ($13_1 | 0) ? $13_1 : $7_1 + 1 | 0; break label$43 } $8_1 = HEAP32[$9_1 + 64 >> 2]; $7_1 = HEAP32[$9_1 + 68 >> 2]; $12_1 = $7_1; if (($7_1 | 0) < 0) { $10_1 = 0 - ($12_1 + (($8_1 | 0) != 0) | 0) | 0; $12_1 = $10_1; $8_1 = 0 - $8_1 | 0; HEAP32[$9_1 + 64 >> 2] = $8_1; HEAP32[$9_1 + 68 >> 2] = $10_1; $17_1 = 1; $7_1 = 1199; break label$44 } if ($14_1 & 2048) { $17_1 = 1; $7_1 = 1200; break label$44 } $17_1 = $14_1 & 1; $7_1 = $17_1 ? 1201 : 1199 } $22_1 = $7_1; $10_1 = $33($8_1, $12_1, $19_1) } if (($13_1 | 0) < 0 ? $18_1 : 0) { break label$4 } $14_1 = $18_1 ? $14_1 & -65537 : $14_1; $7_1 = HEAP32[$9_1 + 64 >> 2]; $8_1 = HEAP32[$9_1 + 68 >> 2]; if (!(($7_1 | $8_1) != 0 | $13_1)) { $10_1 = $19_1; $13_1 = 0; break label$7 } $7_1 = !($7_1 | $8_1) + ($19_1 - $10_1 | 0) | 0; $13_1 = ($7_1 | 0) < ($13_1 | 0) ? $13_1 : $7_1; break label$7 } $14_1 = 0; $18_1 = $13_1 >>> 0 >= 2147483647 ? 2147483647 : $13_1; $12_1 = $18_1; $11_1 = ($12_1 | 0) != 0; label$67: { label$68: { $7_1 = HEAP32[$9_1 + 64 >> 2]; $10_1 = $7_1 ? $7_1 : 4376; $7_1 = $10_1; label$69: { label$70: { label$71: { if (!($7_1 & 3) | !$12_1) { break label$71 } while (1) { $14_1 = HEAPU8[$7_1 | 0]; if (!$14_1) { break label$70 } $12_1 = $12_1 - 1 | 0; $11_1 = ($12_1 | 0) != 0; $7_1 = $7_1 + 1 | 0; if (!($7_1 & 3)) { break label$71 } if ($12_1) { continue } break } } if (!$11_1) { break label$68 } label$73: { if (!(!HEAPU8[$7_1 | 0] | $12_1 >>> 0 < 4)) { while (1) { $11_1 = HEAP32[$7_1 >> 2]; if (($11_1 ^ -1) & $11_1 - 16843009 & -2139062144) { break label$73 } $7_1 = $7_1 + 4 | 0; $12_1 = $12_1 - 4 | 0; if ($12_1 >>> 0 > 3) { continue } break } } if (!$12_1) { break label$68 } } $11_1 = 0; break label$69 } $11_1 = 1 } while (1) { if (!$11_1) { $14_1 = HEAPU8[$7_1 | 0]; $11_1 = 1; continue } if (!$14_1) { break label$67 } $7_1 = $7_1 + 1 | 0; $12_1 = $12_1 - 1 | 0; if (!$12_1) { break label$68 } $11_1 = 0; continue } } $7_1 = 0 } $7_1 = $7_1 ? $7_1 - $10_1 | 0 : $18_1; $11_1 = $7_1 + $10_1 | 0; if (($13_1 | 0) >= 0) { $14_1 = $8_1; $13_1 = $7_1; break label$7 } $14_1 = $8_1; $13_1 = $7_1; if (HEAPU8[$11_1 | 0]) { break label$4 } break label$7 } if ($13_1) { $8_1 = HEAP32[$9_1 + 64 >> 2]; break label$39 } $7_1 = 0; $12($0_1, 32, $16_1, 0, $14_1); break label$38 } HEAP32[$9_1 + 12 >> 2] = 0; HEAP32[$9_1 + 8 >> 2] = HEAP32[$9_1 + 64 >> 2]; $8_1 = $9_1 + 8 | 0; HEAP32[$9_1 + 64 >> 2] = $8_1; $13_1 = -1 } $7_1 = 0; label$80: { while (1) { $10_1 = HEAP32[$8_1 >> 2]; if (!$10_1) { break label$80 } $10_1 = $92($9_1 + 4 | 0, $10_1); $11_1 = ($10_1 | 0) < 0; if (!($11_1 | $10_1 >>> 0 > $13_1 - $7_1 >>> 0)) { $8_1 = $8_1 + 4 | 0; $7_1 = $7_1 + $10_1 | 0; if ($13_1 >>> 0 > $7_1 >>> 0) { continue } break label$80 } break } if ($11_1) { break label$2 } } $11_1 = 61; if (($7_1 | 0) < 0) { break label$3 } $12($0_1, 32, $16_1, $7_1, $14_1); if (!$7_1) { $7_1 = 0; break label$38 } $11_1 = 0; $8_1 = HEAP32[$9_1 + 64 >> 2]; while (1) { $10_1 = HEAP32[$8_1 >> 2]; if (!$10_1) { break label$38 } $10_1 = $92($9_1 + 4 | 0, $10_1); $11_1 = $10_1 + $11_1 | 0; if ($11_1 >>> 0 > $7_1 >>> 0) { break label$38 } $11($0_1, $9_1 + 4 | 0, $10_1); $8_1 = $8_1 + 4 | 0; if ($7_1 >>> 0 > $11_1 >>> 0) { continue } break } } $12($0_1, 32, $16_1, $7_1, $14_1 ^ 8192); $7_1 = ($7_1 | 0) < ($16_1 | 0) ? $16_1 : $7_1; continue label$5 } if (($13_1 | 0) < 0 ? $18_1 : 0) { break label$4 } $11_1 = 61; $7_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, HEAPF64[$9_1 + 64 >> 3], $16_1, $13_1, $14_1, $7_1) | 0; if (($7_1 | 0) >= 0) { continue label$5 } break label$3 } HEAP8[$9_1 + 55 | 0] = HEAP32[$9_1 + 64 >> 2]; $13_1 = 1; $10_1 = $24_1; $14_1 = $8_1; break label$7 } $8_1 = HEAPU8[$7_1 + 1 | 0]; $7_1 = $7_1 + 1 | 0; continue } } if ($0_1) { break label$1 } if (!$20_1) { break label$6 } $7_1 = 1; while (1) { $0_1 = HEAP32[($7_1 << 2) + $4_1 >> 2]; if ($0_1) { $93(($7_1 << 3) + $3_1 | 0, $0_1, $2_1, $6_1); $15_1 = 1; $7_1 = $7_1 + 1 | 0; if (($7_1 | 0) != 10) { continue } break label$1 } break } $15_1 = 1; if ($7_1 >>> 0 >= 10) { break label$1 } while (1) { if (HEAP32[($7_1 << 2) + $4_1 >> 2]) { break label$8 } $7_1 = $7_1 + 1 | 0; if (($7_1 | 0) != 10) { continue } break } break label$1 } $11_1 = 28; break label$3 } $12_1 = $11_1 - $10_1 | 0; $13_1 = ($13_1 | 0) > ($12_1 | 0) ? $13_1 : $12_1; if (($13_1 | 0) > ($17_1 ^ 2147483647)) { break label$4 } $11_1 = 61; $8_1 = $13_1 + $17_1 | 0; $7_1 = ($8_1 | 0) < ($16_1 | 0) ? $16_1 : $8_1; if (($23_1 | 0) < ($7_1 | 0)) { break label$3 } $12($0_1, 32, $7_1, $8_1, $14_1); $11($0_1, $22_1, $17_1); $12($0_1, 48, $7_1, $8_1, $14_1 ^ 65536); $12($0_1, 48, $13_1, $12_1, 0); $11($0_1, $10_1, $12_1); $12($0_1, 32, $7_1, $8_1, $14_1 ^ 8192); continue } break } $15_1 = 0; break label$1 } $11_1 = 61 } wasm2js_i32$0 = $43(), wasm2js_i32$1 = $11_1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1 } $15_1 = -1 } global$0 = $9_1 + 80 | 0; return $15_1 } function $164($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; $2_1 = $2_1 | 0; $3_1 = $3_1 | 0; $4_1 = $4_1 | 0; $5_1 = $5_1 | 0; var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0; $12_1 = global$0 - 560 | 0; global$0 = $12_1; HEAP32[$12_1 + 44 >> 2] = 0; wasm2js_scratch_store_f64(+$1_1); $6_1 = wasm2js_scratch_load_i32(1) | 0; wasm2js_scratch_load_i32(0) | 0; label$1: { if (($6_1 | 0) < 0) { $18_1 = 1; $23_1 = 1209; $1_1 = -$1_1; wasm2js_scratch_store_f64(+$1_1); $6_1 = wasm2js_scratch_load_i32(1) | 0; wasm2js_scratch_load_i32(0) | 0; break label$1 } if ($4_1 & 2048) { $18_1 = 1; $23_1 = 1212; break label$1 } $18_1 = $4_1 & 1; $23_1 = $18_1 ? 1215 : 1210; $24_1 = !$18_1 } label$4: { if (($6_1 & 2146435072) == 2146435072) { $6_1 = $18_1 + 3 | 0; $12($0_1, 32, $2_1, $6_1, $4_1 & -65537); $11($0_1, $23_1, $18_1); $3_1 = $5_1 & 32; $11($0_1, $1_1 != $1_1 ? $3_1 ? 2483 : 3491 : $3_1 ? 2900 : 3495, 3); $12($0_1, 32, $2_1, $6_1, $4_1 ^ 8192); $13_1 = ($2_1 | 0) < ($6_1 | 0) ? $6_1 : $2_1; break label$4 } $20_1 = $12_1 + 16 | 0; label$6: { label$7: { label$8: { $1_1 = $97($1_1, $12_1 + 44 | 0); $1_1 = $1_1 + $1_1; if ($1_1 != 0) { $6_1 = HEAP32[$12_1 + 44 >> 2]; HEAP32[$12_1 + 44 >> 2] = $6_1 - 1; $21_1 = $5_1 | 32; if (($21_1 | 0) != 97) { break label$8 } break label$6 } $21_1 = $5_1 | 32; if (($21_1 | 0) == 97) { break label$6 } $10_1 = HEAP32[$12_1 + 44 >> 2]; $11_1 = ($3_1 | 0) < 0 ? 6 : $3_1; break label$7 } $10_1 = $6_1 - 29 | 0; HEAP32[$12_1 + 44 >> 2] = $10_1; $1_1 = $1_1 * 268435456; $11_1 = ($3_1 | 0) < 0 ? 6 : $3_1 } $16_1 = ($12_1 + 48 | 0) + (($10_1 | 0) >= 0 ? 288 : 0) | 0; $7_1 = $16_1; while (1) { if ($1_1 < 4294967296 & $1_1 >= 0) { $3_1 = ~~$1_1 >>> 0 } else { $3_1 = 0 } HEAP32[$7_1 >> 2] = $3_1; $7_1 = $7_1 + 4 | 0; $1_1 = ($1_1 - +($3_1 >>> 0)) * 1e9; if ($1_1 != 0) { continue } break } label$13: { if (($10_1 | 0) <= 0) { $3_1 = $10_1; $6_1 = $7_1; $8_1 = $16_1; break label$13 } $8_1 = $16_1; $3_1 = $10_1; while (1) { $14_1 = ($3_1 | 0) >= 29 ? 29 : $3_1; $6_1 = $7_1 - 4 | 0; label$16: { if ($8_1 >>> 0 > $6_1 >>> 0) { break label$16 } $3_1 = 0; while (1) { $9_1 = HEAP32[$6_1 >> 2]; $22_1 = $3_1; $3_1 = $14_1 & 31; if (($14_1 & 63) >>> 0 >= 32) { $13_1 = $9_1 << $3_1; $3_1 = 0 } else { $13_1 = (1 << $3_1) - 1 & $9_1 >>> 32 - $3_1; $3_1 = $9_1 << $3_1 } $22_1 = $22_1 + $3_1 | 0; $9_1 = $13_1 + $15_1 | 0; $3_1 = __wasm_i64_udiv($22_1, $3_1 >>> 0 > $22_1 >>> 0 ? $9_1 + 1 | 0 : $9_1, 1e9); $9_1 = __wasm_i64_mul($3_1, i64toi32_i32$HIGH_BITS, -1e9, 0) + $22_1 | 0; HEAP32[$6_1 >> 2] = $9_1; $6_1 = $6_1 - 4 | 0; if ($8_1 >>> 0 <= $6_1 >>> 0) { continue } break } if (!$3_1) { break label$16 } $8_1 = $8_1 - 4 | 0; HEAP32[$8_1 >> 2] = $3_1 } while (1) { $6_1 = $7_1; if ($8_1 >>> 0 < $6_1 >>> 0) { $7_1 = $6_1 - 4 | 0; if (!HEAP32[$7_1 >> 2]) { continue } } break } $3_1 = HEAP32[$12_1 + 44 >> 2] - $14_1 | 0; HEAP32[$12_1 + 44 >> 2] = $3_1; $7_1 = $6_1; if (($3_1 | 0) > 0) { continue } break } } if (($3_1 | 0) < 0) { $19_1 = (($11_1 + 25 >>> 0) / 9 | 0) + 1 | 0; $15_1 = ($21_1 | 0) == 102; while (1) { $3_1 = 0 - $3_1 | 0; $13_1 = ($3_1 | 0) >= 9 ? 9 : $3_1; label$22: { if ($6_1 >>> 0 <= $8_1 >>> 0) { $7_1 = HEAP32[$8_1 >> 2]; break label$22 } $14_1 = 1e9 >>> $13_1 | 0; $9_1 = -1 << $13_1 ^ -1; $3_1 = 0; $7_1 = $8_1; while (1) { $22_1 = $3_1; $3_1 = HEAP32[$7_1 >> 2]; HEAP32[$7_1 >> 2] = $22_1 + ($3_1 >>> $13_1 | 0); $3_1 = Math_imul($14_1, $3_1 & $9_1); $7_1 = $7_1 + 4 | 0; if ($7_1 >>> 0 < $6_1 >>> 0) { continue } break } $7_1 = HEAP32[$8_1 >> 2]; if (!$3_1) { break label$22 } HEAP32[$6_1 >> 2] = $3_1; $6_1 = $6_1 + 4 | 0 } $3_1 = $13_1 + HEAP32[$12_1 + 44 >> 2] | 0; HEAP32[$12_1 + 44 >> 2] = $3_1; $8_1 = (!$7_1 << 2) + $8_1 | 0; $7_1 = $15_1 ? $16_1 : $8_1; $6_1 = $6_1 - $7_1 >> 2 > ($19_1 | 0) ? $7_1 + ($19_1 << 2) | 0 : $6_1; if (($3_1 | 0) < 0) { continue } break } } $3_1 = 0; label$25: { if ($6_1 >>> 0 <= $8_1 >>> 0) { break label$25 } $3_1 = Math_imul($16_1 - $8_1 >> 2, 9); $7_1 = 10; $9_1 = HEAP32[$8_1 >> 2]; if ($9_1 >>> 0 < 10) { break label$25 } while (1) { $3_1 = $3_1 + 1 | 0; $7_1 = Math_imul($7_1, 10); if ($9_1 >>> 0 >= $7_1 >>> 0) { continue } break } } $7_1 = ($11_1 - (($21_1 | 0) != 102 ? $3_1 : 0) | 0) - (($21_1 | 0) == 103 & ($11_1 | 0) != 0) | 0; if (($7_1 | 0) < (Math_imul($6_1 - $16_1 >> 2, 9) - 9 | 0)) { $14_1 = $7_1 + 9216 | 0; $9_1 = ($14_1 | 0) / 9 | 0; $10_1 = (((($10_1 | 0) < 0 ? 4 : 292) + $12_1 | 0) + ($9_1 << 2) | 0) - 4048 | 0; $7_1 = 10; $13_1 = $14_1 + Math_imul($9_1, -9) | 0; if (($13_1 | 0) <= 7) { while (1) { $7_1 = Math_imul($7_1, 10); $13_1 = $13_1 + 1 | 0; if (($13_1 | 0) != 8) { continue } break } } $14_1 = HEAP32[$10_1 >> 2]; $19_1 = ($14_1 >>> 0) / ($7_1 >>> 0) | 0; $15_1 = Math_imul($19_1, $7_1); $9_1 = $10_1 + 4 | 0; label$30: { if (($14_1 | 0) == ($15_1 | 0) & ($9_1 | 0) == ($6_1 | 0)) { break label$30 } $14_1 = $14_1 - $15_1 | 0; label$31: { if (!($19_1 & 1)) { $1_1 = 9007199254740992; if (!(HEAP8[$10_1 - 4 | 0] & 1) | (($7_1 | 0) != 1e9 | $8_1 >>> 0 >= $10_1 >>> 0)) { break label$31 } } $1_1 = 9007199254740994 } $17_1 = ($6_1 | 0) == ($9_1 | 0) ? 1 : 1.5; $9_1 = $7_1 >>> 1 | 0; $17_1 = $9_1 >>> 0 > $14_1 >>> 0 ? .5 : ($9_1 | 0) == ($14_1 | 0) ? $17_1 : 1.5; if (!(HEAPU8[$23_1 | 0] != 45 | $24_1)) { $17_1 = -$17_1; $1_1 = -$1_1 } HEAP32[$10_1 >> 2] = $15_1; if ($1_1 + $17_1 == $1_1) { break label$30 } $3_1 = $7_1 + $15_1 | 0; HEAP32[$10_1 >> 2] = $3_1; if ($3_1 >>> 0 >= 1e9) { while (1) { HEAP32[$10_1 >> 2] = 0; $10_1 = $10_1 - 4 | 0; if ($10_1 >>> 0 < $8_1 >>> 0) { $8_1 = $8_1 - 4 | 0; HEAP32[$8_1 >> 2] = 0 } $3_1 = HEAP32[$10_1 >> 2] + 1 | 0; HEAP32[$10_1 >> 2] = $3_1; if ($3_1 >>> 0 > 999999999) { continue } break } } $3_1 = Math_imul($16_1 - $8_1 >> 2, 9); $7_1 = 10; $9_1 = HEAP32[$8_1 >> 2]; if ($9_1 >>> 0 < 10) { break label$30 } while (1) { $3_1 = $3_1 + 1 | 0; $7_1 = Math_imul($7_1, 10); if ($9_1 >>> 0 >= $7_1 >>> 0) { continue } break } } $7_1 = $10_1 + 4 | 0; $6_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $7_1 : $6_1 } while (1) { $9_1 = $6_1; $14_1 = $6_1 >>> 0 <= $8_1 >>> 0; if (!$14_1) { $6_1 = $9_1 - 4 | 0; if (!HEAP32[$6_1 >> 2]) { continue } } break } label$40: { if (($21_1 | 0) != 103) { $10_1 = $4_1 & 8; break label$40 } $7_1 = $11_1 ? $11_1 : 1; $6_1 = ($7_1 | 0) > ($3_1 | 0) & ($3_1 | 0) > -5; $11_1 = ($6_1 ? $3_1 ^ -1 : -1) + $7_1 | 0; $5_1 = ($6_1 ? -1 : -2) + $5_1 | 0; $10_1 = $4_1 & 8; if ($10_1) { break label$40 } $6_1 = -9; label$42: { if ($14_1) { break label$42 } $10_1 = HEAP32[$9_1 - 4 >> 2]; if (!$10_1) { break label$42 } $13_1 = 10; $6_1 = 0; if (($10_1 >>> 0) % 10 | 0) { break label$42 } while (1) { $7_1 = $6_1; $6_1 = $6_1 + 1 | 0; $13_1 = Math_imul($13_1, 10); if (!(($10_1 >>> 0) % ($13_1 >>> 0) | 0)) { continue } break } $6_1 = $7_1 ^ -1 } $7_1 = Math_imul($9_1 - $16_1 >> 2, 9); if (($5_1 & -33) == 70) { $10_1 = 0; $6_1 = ($6_1 + $7_1 | 0) - 9 | 0; $6_1 = ($6_1 | 0) > 0 ? $6_1 : 0; $11_1 = ($6_1 | 0) > ($11_1 | 0) ? $11_1 : $6_1; break label$40 } $10_1 = 0; $6_1 = (($3_1 + $7_1 | 0) + $6_1 | 0) - 9 | 0; $6_1 = ($6_1 | 0) > 0 ? $6_1 : 0; $11_1 = ($6_1 | 0) > ($11_1 | 0) ? $11_1 : $6_1 } $13_1 = -1; $14_1 = $10_1 | $11_1; if ((($14_1 ? 2147483645 : 2147483646) | 0) < ($11_1 | 0)) { break label$4 } $15_1 = ((($14_1 | 0) != 0) + $11_1 | 0) + 1 | 0; $7_1 = $5_1 & -33; label$45: { if (($7_1 | 0) == 70) { if (($15_1 ^ 2147483647) < ($3_1 | 0)) { break label$4 } $6_1 = ($3_1 | 0) > 0 ? $3_1 : 0; break label$45 } $6_1 = $3_1 >> 31; $6_1 = $33(($6_1 ^ $3_1) - $6_1 | 0, 0, $20_1); if (($20_1 - $6_1 | 0) <= 1) { while (1) { $6_1 = $6_1 - 1 | 0; HEAP8[$6_1 | 0] = 48; if (($20_1 - $6_1 | 0) < 2) { continue } break } } $19_1 = $6_1 - 2 | 0; HEAP8[$19_1 | 0] = $5_1; HEAP8[$6_1 - 1 | 0] = ($3_1 | 0) < 0 ? 45 : 43; $6_1 = $20_1 - $19_1 | 0; if (($6_1 | 0) > ($15_1 ^ 2147483647)) { break label$4 } } $3_1 = $6_1 + $15_1 | 0; if (($3_1 | 0) > ($18_1 ^ 2147483647)) { break label$4 } $15_1 = $3_1 + $18_1 | 0; $12($0_1, 32, $2_1, $15_1, $4_1); $11($0_1, $23_1, $18_1); $12($0_1, 48, $2_1, $15_1, $4_1 ^ 65536); label$49: { label$50: { label$51: { if (($7_1 | 0) == 70) { $5_1 = $12_1 + 16 | 0; $3_1 = $5_1 | 8; $10_1 = $5_1 | 9; $7_1 = $8_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $8_1; $8_1 = $7_1; while (1) { $6_1 = $33(HEAP32[$8_1 >> 2], 0, $10_1); label$54: { if (($7_1 | 0) != ($8_1 | 0)) { if ($12_1 + 16 >>> 0 >= $6_1 >>> 0) { break label$54 } while (1) { $6_1 = $6_1 - 1 | 0; HEAP8[$6_1 | 0] = 48; if ($12_1 + 16 >>> 0 < $6_1 >>> 0) { continue } break } break label$54 } if (($6_1 | 0) != ($10_1 | 0)) { break label$54 } HEAP8[$12_1 + 24 | 0] = 48; $6_1 = $3_1 } $11($0_1, $6_1, $10_1 - $6_1 | 0); $8_1 = $8_1 + 4 | 0; if ($16_1 >>> 0 >= $8_1 >>> 0) { continue } break } if ($14_1) { $11($0_1, 4374, 1) } if (($11_1 | 0) <= 0 | $8_1 >>> 0 >= $9_1 >>> 0) { break label$51 } while (1) { $6_1 = $33(HEAP32[$8_1 >> 2], 0, $10_1); if ($6_1 >>> 0 > $12_1 + 16 >>> 0) { while (1) { $6_1 = $6_1 - 1 | 0; HEAP8[$6_1 | 0] = 48; if ($12_1 + 16 >>> 0 < $6_1 >>> 0) { continue } break } } $11($0_1, $6_1, ($11_1 | 0) >= 9 ? 9 : $11_1); $6_1 = $11_1 - 9 | 0; $8_1 = $8_1 + 4 | 0; if ($9_1 >>> 0 <= $8_1 >>> 0) { break label$50 } $3_1 = ($11_1 | 0) > 9; $11_1 = $6_1; if ($3_1) { continue } break } break label$50 } label$61: { if (($11_1 | 0) < 0) { break label$61 } $16_1 = $8_1 >>> 0 < $9_1 >>> 0 ? $9_1 : $8_1 + 4 | 0; $5_1 = $12_1 + 16 | 0; $3_1 = $5_1 | 8; $9_1 = $5_1 | 9; $7_1 = $8_1; while (1) { $6_1 = $33(HEAP32[$7_1 >> 2], 0, $9_1); if (($9_1 | 0) == ($6_1 | 0)) { HEAP8[$12_1 + 24 | 0] = 48; $6_1 = $3_1 } label$64: { if (($7_1 | 0) != ($8_1 | 0)) { if ($12_1 + 16 >>> 0 >= $6_1 >>> 0) { break label$64 } while (1) { $6_1 = $6_1 - 1 | 0; HEAP8[$6_1 | 0] = 48; if ($12_1 + 16 >>> 0 < $6_1 >>> 0) { continue } break } break label$64 } $11($0_1, $6_1, 1); $6_1 = $6_1 + 1 | 0; if (!($10_1 | $11_1)) { break label$64 } $11($0_1, 4374, 1) } $5_1 = $9_1 - $6_1 | 0; $11($0_1, $6_1, ($5_1 | 0) > ($11_1 | 0) ? $11_1 : $5_1); $11_1 = $11_1 - $5_1 | 0; $7_1 = $7_1 + 4 | 0; if ($16_1 >>> 0 <= $7_1 >>> 0) { break label$61 } if (($11_1 | 0) >= 0) { continue } break } } $12($0_1, 48, $11_1 + 18 | 0, 18, 0); $11($0_1, $19_1, $20_1 - $19_1 | 0); break label$49 } $6_1 = $11_1 } $12($0_1, 48, $6_1 + 9 | 0, 9, 0) } $12($0_1, 32, $2_1, $15_1, $4_1 ^ 8192); $13_1 = ($2_1 | 0) < ($15_1 | 0) ? $15_1 : $2_1; break label$4 } $10_1 = ($5_1 << 26 >> 31 & 9) + $23_1 | 0; label$67: { if ($3_1 >>> 0 > 11) { break label$67 } $6_1 = 12 - $3_1 | 0; $17_1 = 16; while (1) { $17_1 = $17_1 * 16; $6_1 = $6_1 - 1 | 0; if ($6_1) { continue } break } if (HEAPU8[$10_1 | 0] == 45) { $1_1 = -($17_1 + (-$1_1 - $17_1)); break label$67 } $1_1 = $1_1 + $17_1 - $17_1 } $16_1 = $18_1 | 2; $8_1 = $5_1 & 32; $7_1 = HEAP32[$12_1 + 44 >> 2]; $6_1 = $7_1 >> 31; $6_1 = $33(($6_1 ^ $7_1) - $6_1 | 0, 0, $20_1); if (($20_1 | 0) == ($6_1 | 0)) { HEAP8[$12_1 + 15 | 0] = 48; $6_1 = $12_1 + 15 | 0 } $11_1 = $6_1 - 2 | 0; HEAP8[$11_1 | 0] = $5_1 + 15; HEAP8[$6_1 - 1 | 0] = ($7_1 | 0) < 0 ? 45 : 43; $6_1 = $4_1 & 8; $7_1 = $12_1 + 16 | 0; while (1) { $5_1 = $7_1; if (Math_abs($1_1) < 2147483648) { $9_1 = ~~$1_1 } else { $9_1 = -2147483648 } HEAP8[$7_1 | 0] = $8_1 | HEAPU8[$9_1 + 5600 | 0]; $1_1 = ($1_1 - +($9_1 | 0)) * 16; $7_1 = $5_1 + 1 | 0; if (!(!($6_1 | ($3_1 | 0) > 0) & $1_1 == 0 | ($7_1 - ($12_1 + 16 | 0) | 0) != 1)) { HEAP8[$5_1 + 1 | 0] = 46; $7_1 = $5_1 + 2 | 0 } if ($1_1 != 0) { continue } break } $13_1 = -1; $6_1 = $20_1 - $11_1 | 0; $5_1 = $6_1 + $16_1 | 0; if ((2147483645 - $5_1 | 0) < ($3_1 | 0)) { break label$4 } $9_1 = $5_1; $5_1 = $12_1 + 16 | 0; $8_1 = $7_1 - $5_1 | 0; $3_1 = $3_1 ? ($8_1 - 2 | 0) < ($3_1 | 0) ? $3_1 + 2 | 0 : $8_1 : $8_1; $7_1 = $9_1 + $3_1 | 0; $12($0_1, 32, $2_1, $7_1, $4_1); $11($0_1, $10_1, $16_1); $12($0_1, 48, $2_1, $7_1, $4_1 ^ 65536); $11($0_1, $5_1, $8_1); $12($0_1, 48, $3_1 - $8_1 | 0, 0, 0); $11($0_1, $11_1, $6_1); $12($0_1, 32, $2_1, $7_1, $4_1 ^ 8192); $13_1 = ($2_1 | 0) < ($7_1 | 0) ? $7_1 : $2_1 } global$0 = $12_1 + 560 | 0; return $13_1 | 0 } function $101($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_f64$0 = 0; label$1: { label$2: { label$3: { label$4: { label$5: { label$6: { label$7: { label$8: { label$9: { label$10: { label$11: { label$12: { label$13: { label$14: { label$15: { label$16: { label$17: { label$18: { label$19: { label$20: { label$21: { label$22: { $1_1 = HEAP32[$0_1 >> 2]; if (($1_1 | 0) <= 201326591) { if (($1_1 | 0) <= 100663327) { if (($1_1 | 0) <= 67108863) { label$26: { switch ($1_1 - 33554432 | 0) { case 1: break label$1; case 2: break label$20; case 0: break label$21; default: break label$26 } } if (($1_1 | 0) == -2129657856) { break label$22 } if ($1_1) { break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](); break label$1 } label$27: { switch ($1_1 - 67108872 | 0) { case 1: break label$1; case 2: break label$17; case 0: break label$18; default: break label$27 } } if (($1_1 | 0) == 67108864) { break label$19 } if (($1_1 | 0) != 100663296) { break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2]); break label$1 } if (($1_1 | 0) <= 134217759) { label$29: { switch ($1_1 - 100663336 | 0) { case 1: break label$1; case 2: break label$14; case 0: break label$15; default: break label$29 } } if (($1_1 | 0) == 100663328) { break label$16 } if (($1_1 | 0) != 134217728) { break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2]); break label$1 } if (($1_1 | 0) <= 167772159) { switch ($1_1 - 134217896 | 0) { case 1: break label$1; case 2: break label$11; case 0: break label$12; default: break label$13 } } if (($1_1 | 0) == 167772160) { break label$10 } if (($1_1 | 0) != 167772840) { break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 32 >> 2], HEAPF32[$0_1 + 40 >> 2], HEAPF32[$0_1 + 48 >> 2]); break label$1 } if (($1_1 | 0) <= 603979775) { if (($1_1 | 0) <= 335544319) { if (($1_1 | 0) <= 268435455) { if (($1_1 | 0) == 201326592) { break label$9 } if (($1_1 | 0) != 234881024) { break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2], HEAP32[$0_1 - -64 >> 2]); break label$1 } if (($1_1 | 0) == 268435456) { break label$8 } if (($1_1 | 0) != 301989888) { break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2], HEAP32[$0_1 - -64 >> 2], HEAP32[$0_1 + 72 >> 2], HEAP32[$0_1 + 80 >> 2]); break label$1 } if (($1_1 | 0) <= 536870911) { if (($1_1 | 0) == 335544320) { break label$7 } if (($1_1 | 0) != 369098752) { break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2], HEAP32[$0_1 - -64 >> 2], HEAP32[$0_1 + 72 >> 2], HEAP32[$0_1 + 80 >> 2], HEAP32[$0_1 + 88 >> 2], HEAP32[$0_1 + 96 >> 2]); break label$1 } if (($1_1 | 0) == 536870912) { break label$6 } if (($1_1 | 0) != 570425344) { break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } label$35: { if (($1_1 | 0) <= 704643071) { if (($1_1 | 0) <= 654311423) { if (($1_1 | 0) == 603979776) { break label$5 } if (($1_1 | 0) != 637534208) { break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } if (($1_1 | 0) == 654311424) { break label$35 } if (($1_1 | 0) != 671088640) { break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } if (($1_1 | 0) <= 771751935) { if (($1_1 | 0) == 704643072) { break label$4 } if (($1_1 | 0) != 738197504) { break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } if (($1_1 | 0) == 771751936) { break label$3 } if (($1_1 | 0) == 805306368) { break label$2 } if (($1_1 | 0) != 838860800) { break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2], HEAP32[$0_1 - -64 >> 2], HEAP32[$0_1 + 72 >> 2], HEAP32[$0_1 + 80 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = fimport$27(HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } wasm2js_i32$0 = $0_1, wasm2js_f64$0 = +fimport$26(HEAP32[$0_1 + 4 >> 2], HEAP32[$0_1 + 16 >> 2], $0_1 + 24 | 0), HEAPF64[wasm2js_i32$0 + 176 >> 3] = wasm2js_f64$0; break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAPF32[$0_1 + 16 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 24 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAPF32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 24 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 32 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 32 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAPF32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 32 >> 2]); break label$1 } if (($1_1 | 0) != 134217760) { break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 32 >> 2], HEAPF32[$0_1 + 40 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAPF32[$0_1 + 16 >> 2], HEAPF32[$0_1 + 24 >> 2], HEAPF32[$0_1 + 32 >> 2], HEAPF32[$0_1 + 40 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2], HEAP32[$0_1 - -64 >> 2], HEAP32[$0_1 + 72 >> 2]); break label$1 } FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2], HEAP32[$0_1 - -64 >> 2], HEAP32[$0_1 + 72 >> 2], HEAP32[$0_1 + 80 >> 2], HEAP32[$0_1 + 88 >> 2]); break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]]() | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2], HEAP32[$0_1 - -64 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1; break label$1 } wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[$0_1 + 4 >> 2]](HEAP32[$0_1 + 16 >> 2], HEAP32[$0_1 + 24 >> 2], HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 40 >> 2], HEAP32[$0_1 + 48 >> 2], HEAP32[$0_1 + 56 >> 2], HEAP32[$0_1 - -64 >> 2], HEAP32[$0_1 + 72 >> 2]) | 0, HEAP32[wasm2js_i32$0 + 176 >> 2] = wasm2js_i32$1 } if (HEAP32[$0_1 + 188 >> 2]) { if ($0_1) { $8(HEAP32[$0_1 + 184 >> 2]) } $8($0_1); return } Atomics.store(HEAP32, $0_1 + 8 >> 2, 1); $38($0_1 + 8 | 0, 2147483647) } function $100($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0; $6_1 = $0_1; $0_1 = 0; if ((global$3 | 0) == 7892) { $101($6_1); $2_1 = 1 } else { $2_1 = 0 } if ($2_1) { $0_1 = 1 } else { $8_1 = global$0 - 32 | 0; global$0 = $8_1; HEAP32[$8_1 + 28 >> 2] = $6_1; HEAP32[$8_1 + 16 >> 2] = $6_1; HEAP32[$8_1 + 24 >> 2] = 0; HEAP32[$8_1 + 20 >> 2] = 201; $6_1 = HEAP32[$8_1 + 24 >> 2]; HEAP32[$8_1 + 8 >> 2] = HEAP32[$8_1 + 20 >> 2]; HEAP32[$8_1 + 12 >> 2] = $6_1; $9_1 = global$0 - 16 | 0; global$0 = $9_1; $22(7856); $6_1 = $102(7892); label$9: { if ($6_1) { break label$9 } $1_1 = HEAP32[1971]; if (($1_1 | 0) == HEAP32[1972]) { $6_1 = 0; $13_1 = $1_1 ? $1_1 << 1 : 1; $1_1 = $13_1 << 2; $10_1 = HEAP32[1970]; label$11: { if (!$10_1) { $2_1 = $49(8, $1_1); break label$11 } if (!$1_1) { $8($10_1); $2_1 = 0; break label$11 } label$14: { if ($1_1 >>> 0 > 4294967239) { break label$14 } $11_1 = $1_1 >>> 0 <= 8 ? 8 : $1_1 + 3 & -4; $1_1 = $11_1 + 8 | 0; if (Atomics.exchange(HEAP8, 0 + 6128 | 0, 1)) { while (1) { if (HEAPU8[6128]) { continue } if (Atomics.exchange(HEAP8, 0 + 6128 | 0, 1)) { continue } break } } $4_1 = $10_1 - 4 | 0; $5_1 = HEAP32[$4_1 >> 2]; $2_1 = $4_1 + $5_1 | 0; $12_1 = HEAP32[$2_1 >> 2]; $7_1 = $12_1 + $2_1 | 0; label$17: { label$18: { if (HEAP32[$7_1 - 4 >> 2] != ($12_1 | 0)) { $3_1 = $1_1 + $4_1 | 0; if ($7_1 >>> 0 >= $3_1 + 16 >>> 0) { $5_1 = HEAP32[$2_1 + 4 >> 2]; HEAP32[$5_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2]; HEAP32[HEAP32[$2_1 + 8 >> 2] + 4 >> 2] = $5_1; $2_1 = $7_1 - $3_1 | 0; HEAP32[$3_1 >> 2] = $2_1; HEAP32[(($2_1 & -4) + $3_1 | 0) - 4 >> 2] = $2_1 | 1; $2_1 = HEAP32[$3_1 >> 2] - 8 | 0; label$21: { if ($2_1 >>> 0 <= 127) { $7_1 = ($2_1 >>> 3 | 0) - 1 | 0; break label$21 } $5_1 = Math_clz32($2_1); $7_1 = (($2_1 >>> 29 - $5_1 ^ 4) - ($5_1 << 2) | 0) + 110 | 0; if ($2_1 >>> 0 <= 4095) { break label$21 } $2_1 = (($2_1 >>> 30 - $5_1 ^ 2) - ($5_1 << 1) | 0) + 71 | 0; $7_1 = $2_1 >>> 0 >= 63 ? 63 : $2_1 } $2_1 = $7_1; $5_1 = $2_1 << 4; HEAP32[$3_1 + 4 >> 2] = $5_1 + 6144; $5_1 = $5_1 + 6152 | 0; HEAP32[$3_1 + 8 >> 2] = HEAP32[$5_1 >> 2]; HEAP32[$5_1 >> 2] = $3_1; HEAP32[HEAP32[$3_1 + 8 >> 2] + 4 >> 2] = $3_1; $5_1 = HEAP32[1795]; $3_1 = $2_1 & 31; if (($2_1 & 63) >>> 0 >= 32) { $3_1 = 1 << $3_1; $2_1 = 0 } else { $2_1 = 1 << $3_1; $3_1 = $2_1 - 1 & 1 >>> 32 - $3_1 } HEAP32[1794] = $2_1 | HEAP32[1794]; HEAP32[1795] = $3_1 | $5_1; HEAP32[$4_1 >> 2] = $1_1; HEAP32[(($1_1 & -4) + $4_1 | 0) - 4 >> 2] = $1_1; $2_1 = 1; break label$17 } if ($3_1 >>> 0 > $7_1 >>> 0) { break label$18 } $1_1 = HEAP32[$2_1 + 4 >> 2]; HEAP32[$1_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2]; HEAP32[HEAP32[$2_1 + 8 >> 2] + 4 >> 2] = $1_1; $1_1 = $5_1 + $12_1 | 0; HEAP32[$4_1 >> 2] = $1_1; HEAP32[(($1_1 & -4) + $4_1 | 0) - 4 >> 2] = $1_1; $2_1 = 1; break label$17 } if ($1_1 + 16 >>> 0 <= $5_1 >>> 0) { HEAP32[$4_1 >> 2] = $1_1; HEAP32[(($1_1 & -4) + $4_1 | 0) - 4 >> 2] = $1_1; $3_1 = $1_1 + $4_1 | 0; $1_1 = $5_1 - $1_1 | 0; HEAP32[$3_1 >> 2] = $1_1; HEAP32[($3_1 + ($1_1 & -4) | 0) - 4 >> 2] = $1_1 | 1; $1_1 = HEAP32[$3_1 >> 2] - 8 | 0; label$24: { if ($1_1 >>> 0 <= 127) { $7_1 = ($1_1 >>> 3 | 0) - 1 | 0; break label$24 } $2_1 = Math_clz32($1_1); $7_1 = (($1_1 >>> 29 - $2_1 ^ 4) - ($2_1 << 2) | 0) + 110 | 0; if ($1_1 >>> 0 <= 4095) { break label$24 } $1_1 = (($1_1 >>> 30 - $2_1 ^ 2) - ($2_1 << 1) | 0) + 71 | 0; $7_1 = $1_1 >>> 0 >= 63 ? 63 : $1_1 } $2_1 = $7_1; $1_1 = $2_1 << 4; HEAP32[$3_1 + 4 >> 2] = $1_1 + 6144; $1_1 = $1_1 + 6152 | 0; HEAP32[$3_1 + 8 >> 2] = HEAP32[$1_1 >> 2]; HEAP32[$1_1 >> 2] = $3_1; HEAP32[HEAP32[$3_1 + 8 >> 2] + 4 >> 2] = $3_1; $5_1 = HEAP32[1795]; $1_1 = $2_1 & 31; if (($2_1 & 63) >>> 0 >= 32) { $3_1 = 1 << $1_1; $2_1 = 0 } else { $2_1 = 1 << $1_1; $3_1 = $2_1 - 1 & 1 >>> 32 - $1_1 } HEAP32[1794] = $2_1 | HEAP32[1794]; HEAP32[1795] = $3_1 | $5_1; $2_1 = 1; break label$17 } $2_1 = 1; if ($1_1 >>> 0 <= $5_1 >>> 0) { break label$17 } } $2_1 = 0 } $1_1 = $2_1; Atomics.store(HEAP8, 6128, 0); $2_1 = $10_1; if ($1_1) { break label$11 } $1_1 = $49(8, $11_1); if (!$1_1) { break label$14 } $0_1 = HEAP32[$4_1 >> 2] - 8 | 0; $23($1_1, $10_1, $0_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $0_1); $8($10_1); $0_1 = $1_1 } $2_1 = $0_1 } $0_1 = $2_1; if (!$0_1) { break label$9 } HEAP32[1972] = $13_1; HEAP32[1970] = $0_1 } $6_1 = 0; $0_1 = $107(); if (!$0_1) { break label$9 } $6_1 = HEAP32[1971]; HEAP32[1971] = $6_1 + 1; HEAP32[HEAP32[1970] + ($6_1 << 2) >> 2] = $0_1; $6_1 = $0_1 } $20(7856); if ($6_1) { HEAP32[$9_1 + 8 >> 2] = HEAP32[$8_1 + 16 >> 2]; $0_1 = HEAP32[$8_1 + 12 >> 2]; HEAP32[$9_1 >> 2] = HEAP32[$8_1 + 8 >> 2]; HEAP32[$9_1 + 4 >> 2] = $0_1; $4_1 = global$0 - 48 | 0; global$0 = $4_1; $3_1 = HEAP32[$6_1 + 28 >> 2]; $0_1 = Atomics.load(HEAP32, $3_1 + 124 >> 2); label$27: { while (1) { $2_1 = 0; if (!$0_1) { break label$27 } $1_1 = $0_1; $0_1 = Atomics.compareExchange(HEAP32, $3_1 + 124 >> 2, $1_1, $1_1 + 1 | 0) | 0; if (($0_1 | 0) != ($1_1 | 0)) { continue } break } $2_1 = 1 } if ($2_1) { $0_1 = $6_1 + 4 | 0; $22($0_1); HEAP32[$4_1 + 32 >> 2] = HEAP32[$9_1 + 8 >> 2]; $1_1 = HEAP32[$9_1 + 4 >> 2]; HEAP32[$4_1 + 24 >> 2] = HEAP32[$9_1 >> 2]; HEAP32[$4_1 + 28 >> 2] = $1_1; $1_1 = $106($6_1, $4_1 + 24 | 0); $20($0_1); label$30: { if ($1_1) { $1_1 = Atomics.exchange(HEAP32, $6_1 >> 2, 2); $0_1 = HEAP32[$6_1 + 28 >> 2]; if (($1_1 | 0) == 2) { break label$30 } HEAP32[$4_1 + 44 >> 2] = $6_1; HEAP32[$4_1 + 16 >> 2] = $6_1; HEAP32[$4_1 + 40 >> 2] = 199; HEAP32[$4_1 + 36 >> 2] = 200; $1_1 = HEAP32[$4_1 + 40 >> 2]; HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 36 >> 2]; HEAP32[$4_1 + 12 >> 2] = $1_1; $1_1 = global$0 - 16 | 0; global$0 = $1_1; $22(HEAP32[$0_1 + 120 >> 2] + 4 | 0); $3_1 = HEAP32[$0_1 + 120 >> 2]; HEAP32[$1_1 + 8 >> 2] = HEAP32[$4_1 + 16 >> 2]; $2_1 = HEAP32[$4_1 + 12 >> 2]; HEAP32[$1_1 >> 2] = HEAP32[$4_1 + 8 >> 2]; HEAP32[$1_1 + 4 >> 2] = $2_1; $106($3_1, $1_1); $20(HEAP32[$0_1 + 120 >> 2] + 4 | 0); label$32: { if ((Atomics.exchange(HEAP32, HEAP32[$0_1 + 120 >> 2] >> 2, 2) | 0) == 2) { break label$32 } if (Atomics.load(HEAP32, $0_1 + 128 >> 2)) { Atomics.notify(HEAP32, $0_1 >> 2, 4294967295); break label$32 } fimport$30($0_1 | 0, global$3 | 0, 7892) } global$0 = $1_1 + 16 | 0 } $0_1 = HEAP32[$6_1 + 28 >> 2] } if ((Atomics.sub(HEAP32, $0_1 + 124 >> 2, 1) | 0) == 1) { $38($0_1 + 124 | 0, 2147483647) } } global$0 = $4_1 + 48 | 0 } global$0 = $9_1 + 16 | 0; global$0 = $8_1 + 32 | 0; $0_1 = 0 } } function $223($0_1, $1_1, $2_1, $3_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; $2_1 = +$2_1; $3_1 = $3_1 | 0; var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0; $12_1 = global$0 + -64 | 0; global$0 = $12_1; $6_1 = HEAP32[$0_1 >> 2]; wasm2js_memory_fill($12_1 + 8 | 0, 0, 56); Atomics.add(HEAP32, 0 + 7196 >> 2, 1); $82($6_1); $7_1 = Math_fround($1_1); $5_1 = HEAPF32[$6_1 + 572 >> 2]; label$1: { label$2: { label$3: { $0_1 = HEAP32[$6_1 + 576 >> 2]; switch ($0_1 | 0) { case 0: case 3: break label$2; default: break label$3 } } $4_1 = HEAPF32[$6_1 + 572 >> 2]; label$4: { if (!(($0_1 | 0) != 1 | $4_1 != $4_1)) { $4_1 = $5_1; if (!($4_1 < Math_fround(0))) { break label$4 } break label$2 } label$6: { if (!(($0_1 | 0) != 2 | $4_1 != $4_1)) { if ($7_1 != $7_1 | $5_1 < Math_fround(0)) { break label$2 } break label$6 } $4_1 = Math_fround(NaN); label$8: { switch ($0_1 - 1 | 0) { case 1: break label$6; case 0: break label$8; default: break label$4 } } $4_1 = $5_1; break label$4 } $4_1 = Math_fround(Math_fround($5_1 * $7_1) * Math_fround(.009999999776482582)) } $11_1 = Math_fround($4_1 + Math_fround($2($6_1, 2, $7_1) + $5($6_1, 2, $7_1))); $10_1 = 1; break label$1 } $4_1 = Math_fround(0); $5_1 = HEAPF32[$6_1 + 216 >> 2]; label$9: { label$10: { $0_1 = HEAP32[$6_1 + 216 >> 2]; label$11: { label$12: { if (($0_1 | 0) == 2139156720) { break label$12 } if (($0_1 | 0) == 2140081935) { break label$9 } $10_1 = 4436; label$13: { if (($0_1 | 0) != 2141891242) { if ($5_1 == $5_1) { break label$13 } $10_1 = 4444 } $4_1 = HEAPF32[$10_1 >> 2]; switch (HEAP32[$10_1 + 4 >> 2] - 1 | 0) { case 0: break label$11; case 1: break label$12; default: break label$10 } } $4_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($0_1 & 1073741824)) { break label$11 } } $4_1 = Math_fround(Math_fround($4_1 * $7_1) * Math_fround(.009999999776482582)) } if ($4_1 != $4_1) { break label$10 } $4_1 = Math_fround(0); label$15: { if (($0_1 | 0) == 2139156720) { break label$15 } if (($0_1 | 0) == 2140081935) { break label$9 } $8_1 = 4436; label$16: { if (($0_1 | 0) != 2141891242) { if ($5_1 == $5_1) { break label$16 } $8_1 = 4444 } $4_1 = HEAPF32[$8_1 >> 2]; $11_1 = Math_fround(NaN); $10_1 = 2; switch (HEAP32[$8_1 + 4 >> 2] - 1 | 0) { case 1: break label$15; case 0: break label$9; default: break label$1 } } $4_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($0_1 & 1073741824)) { break label$9 } } $11_1 = Math_fround(Math_fround($4_1 * $7_1) * Math_fround(.009999999776482582)); $10_1 = 2; break label$1 } $10_1 = $7_1 == $7_1; $11_1 = $7_1; break label$1 } $10_1 = 2; $11_1 = $4_1 } $9_1 = Math_fround($2_1); $5_1 = HEAPF32[$6_1 + 580 >> 2]; label$18: { label$19: { label$20: { $0_1 = HEAP32[$6_1 + 584 >> 2]; switch ($0_1 | 0) { case 0: case 3: break label$19; default: break label$20 } } $4_1 = HEAPF32[$6_1 + 580 >> 2]; label$21: { if (!(($0_1 | 0) != 1 | $4_1 != $4_1)) { $4_1 = $5_1; if (!($4_1 < Math_fround(0))) { break label$21 } break label$19 } label$23: { if (!(($0_1 | 0) != 2 | $4_1 != $4_1)) { if ($9_1 != $9_1 | $5_1 < Math_fround(0)) { break label$19 } break label$23 } $4_1 = Math_fround(NaN); label$25: { switch ($0_1 - 1 | 0) { case 1: break label$23; case 0: break label$25; default: break label$21 } } $4_1 = $5_1; break label$21 } $4_1 = Math_fround(Math_fround($5_1 * $9_1) * Math_fround(.009999999776482582)) } $5_1 = Math_fround($4_1 + Math_fround($2($6_1, 0, $7_1) + $5($6_1, 0, $7_1))); $0_1 = 1; break label$18 } $4_1 = Math_fround(0); $5_1 = HEAPF32[$6_1 + 220 >> 2]; label$26: { label$27: { $0_1 = HEAP32[$6_1 + 220 >> 2]; label$28: { label$29: { if (($0_1 | 0) == 2139156720) { break label$29 } if (($0_1 | 0) == 2140081935) { break label$26 } $8_1 = 4436; label$30: { if (($0_1 | 0) != 2141891242) { if ($5_1 == $5_1) { break label$30 } $8_1 = 4444 } $4_1 = HEAPF32[$8_1 >> 2]; switch (HEAP32[$8_1 + 4 >> 2] - 1 | 0) { case 0: break label$28; case 1: break label$29; default: break label$27 } } $4_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($0_1 & 1073741824)) { break label$28 } } $4_1 = Math_fround(Math_fround($4_1 * $9_1) * Math_fround(.009999999776482582)) } if ($4_1 != $4_1) { break label$27 } $4_1 = Math_fround(0); label$32: { if (($0_1 | 0) == 2139156720) { break label$32 } if (($0_1 | 0) == 2140081935) { break label$26 } $8_1 = 4436; label$33: { if (($0_1 | 0) != 2141891242) { if ($5_1 == $5_1) { break label$33 } $8_1 = 4444 } $4_1 = HEAPF32[$8_1 >> 2]; $5_1 = Math_fround(NaN); $0_1 = 2; switch (HEAP32[$8_1 + 4 >> 2] - 1 | 0) { case 0: break label$26; case 1: break label$32; default: break label$18 } } $4_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($0_1 & 1073741824)) { break label$26 } } $5_1 = Math_fround(Math_fround($4_1 * $9_1) * Math_fround(.009999999776482582)); $0_1 = 2; break label$18 } $0_1 = $9_1 == $9_1; $5_1 = $9_1; break label$18 } $0_1 = 2; $5_1 = $4_1 } if ($25($6_1, $11_1, $5_1, $3_1, $10_1, $0_1, $7_1, $9_1, 1, 0, HEAP32[$6_1 + 568 >> 2], $12_1 + 8 | 0, 0, Atomics.load(HEAP32, 1799))) { $84($6_1, HEAPU8[$6_1 + 300 | 0] & 3, $7_1, $9_1, $7_1); $70($6_1, +HEAPF32[HEAP32[$6_1 + 568 >> 2] + 20 >> 2], 0, 0) } global$0 = $12_1 - -64 | 0 } function $137($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0); label$1: { $8_1 = HEAP32[$1_1 >> 2]; $1_1 = HEAP32[$0_1 >> 2]; label$2: { if ((HEAP32[$8_1 + 24 >> 2] ^ HEAP32[$1_1 + 24 >> 2]) & 8388607) { break label$2 } $10_1 = HEAPF32[$8_1 + 40 >> 2]; $4_1 = HEAP32[$8_1 + 40 >> 2]; $3_1 = HEAPF32[$1_1 + 40 >> 2]; label$3: { label$4: { $2_1 = HEAP32[$1_1 + 40 >> 2]; if (($2_1 | 0) != 2139156720) { $5_1 = Math_fround(NaN); $0_1 = 3; if (($2_1 | 0) == 2141891242) { break label$3 } if (($2_1 | 0) != 2140081935) { break label$4 } $5_1 = Math_fround(0); $0_1 = 1; break label$3 } $0_1 = 2; break label$3 } $0_1 = 0; if ($3_1 != $3_1) { break label$3 } $5_1 = (wasm2js_scratch_store_i32(2, ($2_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $0_1 = $2_1 & 1073741824 ? 2 : 1 } label$6: { label$7: { if (($4_1 | 0) != 2139156720) { $3_1 = Math_fround(NaN); $2_1 = 3; if (($4_1 | 0) == 2141891242) { break label$6 } if (($4_1 | 0) != 2140081935) { break label$7 } $3_1 = Math_fround(0); $2_1 = 1; break label$6 } $3_1 = Math_fround(0); $2_1 = 2; break label$6 } $2_1 = 0; if ($10_1 != $10_1) { break label$6 } $3_1 = (wasm2js_scratch_store_i32(2, ($4_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $2_1 = $4_1 & 1073741824 ? 2 : 1 } if (($2_1 | 0) != ($0_1 | 0) | !(!$0_1 | $5_1 != $5_1 & $3_1 != $3_1 | Math_fround(Math_abs(Math_fround($5_1 - $3_1))) < Math_fround(9999999747378752e-20))) { break label$2 } $2_1 = $1_1 + 44 | 0; $6_1 = $8_1 + 44 | 0; if (HEAP32[$2_1 >> 2] != HEAP32[$6_1 >> 2]) { break label$2 } $0_1 = 0; label$9: { while (1) { $4_1 = $0_1; $0_1 = $0_1 + 1 | 0; if (($0_1 | 0) == 9) { break label$9 } $7_1 = $0_1 << 2; if (HEAP32[$7_1 + $2_1 >> 2] == HEAP32[$6_1 + $7_1 >> 2]) { continue } break } if ($4_1 >>> 0 < 8) { break label$2 } } $2_1 = $1_1 + 80 | 0; $6_1 = $8_1 + 80 | 0; if (HEAP32[$2_1 >> 2] != HEAP32[$6_1 >> 2]) { break label$2 } $0_1 = 0; label$11: { while (1) { $4_1 = $0_1; $0_1 = $0_1 + 1 | 0; if (($0_1 | 0) == 9) { break label$11 } $7_1 = $0_1 << 2; if (HEAP32[$7_1 + $2_1 >> 2] == HEAP32[$6_1 + $7_1 >> 2]) { continue } break } if ($4_1 >>> 0 < 8) { break label$2 } } $2_1 = $1_1 + 116 | 0; $6_1 = $8_1 + 116 | 0; if (HEAP32[$2_1 >> 2] != HEAP32[$6_1 >> 2]) { break label$2 } $0_1 = 0; label$13: { while (1) { $4_1 = $0_1; $0_1 = $0_1 + 1 | 0; if (($0_1 | 0) == 9) { break label$13 } $7_1 = $0_1 << 2; if (HEAP32[$7_1 + $2_1 >> 2] == HEAP32[$6_1 + $7_1 >> 2]) { continue } break } if ($4_1 >>> 0 < 8) { break label$2 } } $2_1 = $1_1 + 152 | 0; $6_1 = $8_1 + 152 | 0; if (HEAP32[$2_1 >> 2] != HEAP32[$6_1 >> 2]) { break label$2 } $0_1 = 0; label$15: { while (1) { $4_1 = $0_1; $0_1 = $0_1 + 1 | 0; if (($0_1 | 0) == 9) { break label$15 } $7_1 = $0_1 << 2; if (HEAP32[$7_1 + $2_1 >> 2] == HEAP32[$6_1 + $7_1 >> 2]) { continue } break } if ($4_1 >>> 0 < 8) { break label$2 } } $2_1 = $1_1 + 188 | 0; $6_1 = $8_1 + 188 | 0; if (HEAP32[$2_1 >> 2] != HEAP32[$6_1 >> 2]) { break label$2 } $0_1 = 0; label$17: { while (1) { $4_1 = $0_1; $0_1 = $0_1 + 1 | 0; if (($0_1 | 0) == 3) { break label$17 } $7_1 = $0_1 << 2; if (HEAP32[$7_1 + $2_1 >> 2] == HEAP32[$6_1 + $7_1 >> 2]) { continue } break } if ($4_1 >>> 0 < 2) { break label$2 } } $7_1 = $8_1 + 200 | 0; $9_1 = $1_1 + 200 | 0; $0_1 = 0; $4_1 = 1; while (1) { label$20: { $0_1 = $0_1 << 2; $2_1 = HEAP32[$0_1 + $7_1 >> 2]; $6_1 = HEAP32[$0_1 + $9_1 >> 2]; if (!$4_1) { break label$20 } $4_1 = 0; $0_1 = 1; if (($2_1 | 0) == ($6_1 | 0)) { continue } } break } if (($2_1 | 0) != ($6_1 | 0)) { break label$2 } $7_1 = $8_1 + 208 | 0; $9_1 = $1_1 + 208 | 0; $0_1 = 0; $4_1 = 1; while (1) { label$22: { $0_1 = $0_1 << 2; $2_1 = HEAP32[$0_1 + $7_1 >> 2]; $6_1 = HEAP32[$0_1 + $9_1 >> 2]; if (!$4_1) { break label$22 } $4_1 = 0; $0_1 = 1; if (($2_1 | 0) == ($6_1 | 0)) { continue } } break } if (($2_1 | 0) != ($6_1 | 0)) { break label$2 } $7_1 = $8_1 + 216 | 0; $9_1 = $1_1 + 216 | 0; $0_1 = 0; $4_1 = 1; while (1) { label$24: { $0_1 = $0_1 << 2; $2_1 = HEAP32[$0_1 + $7_1 >> 2]; $6_1 = HEAP32[$0_1 + $9_1 >> 2]; if (!$4_1) { break label$24 } $4_1 = 0; $0_1 = 1; if (($2_1 | 0) == ($6_1 | 0)) { continue } } break } if (($2_1 | 0) != ($6_1 | 0)) { break label$2 } $3_1 = HEAPF32[$1_1 + 28 >> 2]; $5_1 = HEAPF32[$8_1 + 28 >> 2]; if (($3_1 == $3_1 | 0) == ($5_1 != $5_1 | 0) | ($3_1 < $5_1 | $3_1 > $5_1)) { break label$2 } $3_1 = HEAPF32[$1_1 + 32 >> 2]; $5_1 = HEAPF32[$8_1 + 32 >> 2]; if (($3_1 == $3_1 | 0) == ($5_1 != $5_1 | 0) | $3_1 == $3_1 & $3_1 != $5_1) { break label$2 } $5_1 = HEAPF32[$8_1 + 36 >> 2]; $0_1 = $5_1 != $5_1; $3_1 = HEAPF32[$1_1 + 36 >> 2]; if (($0_1 | 0) == ($3_1 == $3_1 | 0) | !$0_1 & $3_1 != $5_1) { break label$2 } $0_1 = 0; $3_1 = HEAPF32[$1_1 + 224 >> 2]; if ($3_1 != $3_1) { $0_1 = 1; $5_1 = HEAPF32[$8_1 + 224 >> 2]; if ($5_1 != $5_1) { break label$1 } } $5_1 = $3_1; $3_1 = HEAPF32[$8_1 + 224 >> 2]; if ($5_1 == $3_1 | $3_1 != $3_1 & $0_1) { break label$1 } } wasm2js_memory_copy($1_1 + 24 | 0, $8_1 + 24 | 0, 204); while (1) { $0_1 = HEAPU8[$1_1 + 4 | 0]; if ($0_1 & 4) { break label$1 } HEAP8[$1_1 + 4 | 0] = $0_1 | 4; $0_1 = HEAP32[$1_1 + 20 >> 2]; if ($0_1) { FUNCTION_TABLE[$0_1 | 0]($1_1) } HEAP32[$1_1 + 308 >> 2] = 2143289344; $1_1 = HEAP32[$1_1 + 552 >> 2]; if ($1_1) { continue } break } } } function $25($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) { var $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0); label$1: { if (!(HEAP32[$0_1 + 312 >> 2] != ($13_1 | 0) ? HEAPU8[$0_1 + 4 | 0] & 4 : 0)) { $19_1 = 0; if (HEAP32[$0_1 + 316 >> 2] == ($3_1 | 0)) { break label$1 } } HEAP32[$0_1 + 540 >> 2] = -1082130432; HEAP32[$0_1 + 544 >> 2] = -1082130432; HEAP32[$0_1 + 532 >> 2] = 0; HEAP32[$0_1 + 536 >> 2] = 0; HEAP32[$0_1 + 524 >> 2] = -1082130432; HEAP32[$0_1 + 528 >> 2] = -1082130432; HEAP32[$0_1 + 320 >> 2] = 0; $19_1 = 1 } $20_1 = $12_1 + 1 | 0; label$4: { label$5: { label$6: { label$7: { if (HEAP32[$0_1 + 8 >> 2]) { $18_1 = $2($0_1, 2, $6_1); $22_1 = $5($0_1, 2, $6_1); $14_1 = Math_fround($2($0_1, 0, $6_1) + $5($0_1, 0, $6_1)); $12_1 = $0_1 + 524 | 0; $18_1 = Math_fround($18_1 + $22_1); if ($75($4_1, $1_1, $5_1, $2_1, HEAP32[$0_1 + 532 >> 2], HEAPF32[$12_1 >> 2], HEAP32[$0_1 + 536 >> 2], HEAPF32[$0_1 + 528 >> 2], HEAPF32[$0_1 + 540 >> 2], HEAPF32[$0_1 + 544 >> 2], $18_1, $14_1, $10_1)) { break label$6 } $16_1 = HEAP32[$0_1 + 320 >> 2]; if (!$16_1) { break label$7 } $15_1 = $0_1 + 324 | 0; while (1) { $12_1 = $15_1 + Math_imul($17_1, 24) | 0; if ($75($4_1, $1_1, $5_1, $2_1, HEAP32[$12_1 + 8 >> 2], HEAPF32[$12_1 >> 2], HEAP32[$12_1 + 12 >> 2], HEAPF32[$12_1 + 4 >> 2], HEAPF32[$12_1 + 16 >> 2], HEAPF32[$12_1 + 20 >> 2], $18_1, $14_1, $10_1)) { break label$6 } $17_1 = $17_1 + 1 | 0; if (($16_1 | 0) != ($17_1 | 0)) { continue } break } break label$7 } if (!$8_1) { $21_1 = HEAP32[$0_1 + 320 >> 2]; if (!$21_1) { break label$7 } $16_1 = $0_1 + 324 | 0; while (1) { $15_1 = Math_imul($17_1, 24); $12_1 = $15_1 + $16_1 | 0; $14_1 = HEAPF32[$12_1 >> 2]; label$12: { label$13: { if (!($14_1 != $14_1 | $1_1 != $1_1)) { if (Math_fround(Math_abs(Math_fround($14_1 - $1_1))) < Math_fround(9999999747378752e-20)) { break label$13 } break label$12 } if ($14_1 == $14_1 | $1_1 == $1_1) { break label$12 } } $15_1 = $16_1 + $15_1 | 0; $14_1 = HEAPF32[$15_1 + 4 >> 2]; label$15: { if (!($14_1 != $14_1 | $2_1 != $2_1)) { if (Math_fround(Math_abs(Math_fround($14_1 - $2_1))) < Math_fround(9999999747378752e-20)) { break label$15 } break label$12 } if ($14_1 == $14_1 | $2_1 == $2_1) { break label$12 } } if (HEAP32[$15_1 + 8 >> 2] != ($4_1 | 0)) { break label$12 } if (HEAP32[$15_1 + 12 >> 2] == ($5_1 | 0)) { break label$6 } } $17_1 = $17_1 + 1 | 0; if (($21_1 | 0) != ($17_1 | 0)) { continue } break } break label$7 } $12_1 = $0_1 + 524 | 0; $14_1 = HEAPF32[$12_1 >> 2]; label$17: { if (!($14_1 != $14_1 | $1_1 != $1_1)) { if (Math_fround(Math_abs(Math_fround($14_1 - $1_1))) < Math_fround(9999999747378752e-20)) { break label$17 } break label$7 } if ($14_1 == $14_1 | $1_1 == $1_1) { break label$7 } } $15_1 = HEAP32[$0_1 + 532 >> 2] == ($4_1 | 0) ? HEAP32[$0_1 + 536 >> 2] == ($5_1 | 0) ? $12_1 : 0 : 0; $14_1 = HEAPF32[$0_1 + 528 >> 2]; $12_1 = $14_1 != $14_1; $16_1 = $2_1 != $2_1; label$19: { if ($12_1 | $16_1) { $12_1 = $12_1 & $16_1; break label$19 } $12_1 = Math_fround(Math_abs(Math_fround($14_1 - $2_1))) < Math_fround(9999999747378752e-20) } $12_1 = $12_1 ? $15_1 : 0; break label$6 } $74($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $10_1, $11_1, $20_1, $13_1, $9_1); HEAP32[$0_1 + 316 >> 2] = $3_1; break label$5 } if (!(!$12_1 | $19_1)) { HEAPF32[$0_1 + 516 >> 2] = HEAPF32[$12_1 + 16 >> 2]; HEAPF32[$0_1 + 520 >> 2] = HEAPF32[$12_1 + 20 >> 2]; $3_1 = ($8_1 ? 12 : 16) + $11_1 | 0; HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] + 1; $3_1 = 0; break label$4 } $74($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $10_1, $11_1, $20_1, $13_1, $9_1); HEAP32[$0_1 + 316 >> 2] = $3_1; $3_1 = 1; if ($12_1) { break label$4 } } $12_1 = HEAP32[$0_1 + 320 >> 2]; $3_1 = $12_1 + 1 | 0; if ($3_1 >>> 0 > HEAPU32[$11_1 + 8 >> 2]) { HEAP32[$11_1 + 8 >> 2] = $3_1 } if (($12_1 | 0) == 8) { HEAP32[$0_1 + 320 >> 2] = 0; $12_1 = 0 } if ($8_1) { $3_1 = $0_1 + 524 | 0 } else { HEAP32[$0_1 + 320 >> 2] = $12_1 + 1; $3_1 = (Math_imul($12_1, 24) + $0_1 | 0) + 324 | 0 } HEAP32[$3_1 + 12 >> 2] = $5_1; HEAP32[$3_1 + 8 >> 2] = $4_1; HEAPF32[$3_1 + 4 >> 2] = $2_1; HEAPF32[$3_1 >> 2] = $1_1; HEAPF32[$3_1 + 16 >> 2] = HEAPF32[$0_1 + 516 >> 2]; HEAPF32[$3_1 + 20 >> 2] = HEAPF32[$0_1 + 520 >> 2]; $3_1 = 1 } label$26: { if (!$8_1) { break label$26 } $4_1 = HEAP32[$0_1 + 520 >> 2]; HEAP32[$0_1 + 244 >> 2] = HEAP32[$0_1 + 516 >> 2]; HEAP32[$0_1 + 248 >> 2] = $4_1; $4_1 = HEAPU8[$0_1 + 4 | 0]; $5_1 = $4_1 | 1; HEAP8[$0_1 + 4 | 0] = $5_1; if (!($4_1 & 4)) { break label$26 } HEAP8[$0_1 + 4 | 0] = $5_1 & 251 } HEAP32[$0_1 + 312 >> 2] = $13_1; return $3_1 } function $163($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0; $2_1 = $1_1; $1_1 = HEAP32[$1_1 >> 2] + 7 & -8; HEAP32[$2_1 >> 2] = $1_1 + 16; $14_1 = $0_1; $8_1 = HEAP32[$1_1 >> 2]; $3_1 = HEAP32[$1_1 + 4 >> 2]; $0_1 = HEAP32[$1_1 + 12 >> 2]; $12_1 = $0_1; $6_1 = global$0 - 32 | 0; global$0 = $6_1; $0_1 = $0_1 & 2147483647; $7_1 = $0_1; $4_1 = $0_1 - 1006698496 | 0; $0_1 = $0_1 - 1140785152 | 0; $2_1 = HEAP32[$1_1 + 8 >> 2]; $1_1 = $2_1; label$1: { if (($4_1 | 0) == ($0_1 | 0) & $1_1 >>> 0 < $1_1 >>> 0 | $0_1 >>> 0 > $4_1 >>> 0) { $0_1 = $2_1; $2_1 = $12_1 << 4 | $0_1 >>> 28; $1_1 = $0_1 << 4 | $3_1 >>> 28; $0_1 = $2_1; $3_1 = $3_1 & 268435455; if (($3_1 | 0) == 134217728 & ($8_1 | 0) != 0 | $3_1 >>> 0 > 134217728) { $0_1 = $0_1 + 1073741824 | 0; $1_1 = $1_1 + 1 | 0; $0_1 = $1_1 ? $0_1 : $0_1 + 1 | 0; break label$1 } $0_1 = $0_1 + 1073741824 | 0; if ($8_1 | ($3_1 | 0) != 134217728) { break label$1 } $3_1 = $1_1 & 1; $1_1 = $3_1 + $1_1 | 0; $0_1 = $1_1 >>> 0 < $3_1 >>> 0 ? $0_1 + 1 | 0 : $0_1; break label$1 } if (!(!$1_1 & ($7_1 | 0) == 2147418112 ? !($3_1 | $8_1) : $7_1 >>> 0 < 2147418112)) { $0_1 = $2_1; $2_1 = $12_1 << 4 | $0_1 >>> 28; $1_1 = $0_1 << 4 | $3_1 >>> 28; $0_1 = $2_1 & 524287 | 2146959360; break label$1 } $1_1 = 0; $0_1 = 2146435072; if ($7_1 >>> 0 > 1140785151) { break label$1 } $0_1 = 0; $13_1 = $7_1 >>> 16 | 0; if ($13_1 >>> 0 < 15249) { break label$1 } $1_1 = $8_1; $0_1 = $3_1; $4_1 = $12_1 & 65535 | 65536; $7_1 = $4_1; $11_1 = $2_1; $5_1 = $2_1; $9_1 = $13_1 - 15233 | 0; label$5: { if ($9_1 & 64) { $2_1 = $1_1; $4_1 = $9_1 + -64 | 0; $1_1 = $4_1 & 31; if (($4_1 & 63) >>> 0 >= 32) { $0_1 = $2_1 << $1_1; $5_1 = 0 } else { $0_1 = (1 << $1_1) - 1 & $2_1 >>> 32 - $1_1 | $0_1 << $1_1; $5_1 = $2_1 << $1_1 } $4_1 = $0_1; $1_1 = 0; $0_1 = 0; break label$5 } if (!$9_1) { break label$5 } $10_1 = $5_1; $5_1 = $9_1 & 31; if (($9_1 & 63) >>> 0 >= 32) { $2_1 = $10_1 << $5_1; $5_1 = 0 } else { $2_1 = (1 << $5_1) - 1 & $10_1 >>> 32 - $5_1 | $4_1 << $5_1; $5_1 = $10_1 << $5_1 } $4_1 = $2_1; $15_1 = $5_1; $10_1 = $1_1; $2_1 = 64 - $9_1 | 0; $5_1 = $2_1 & 31; if (($2_1 & 63) >>> 0 >= 32) { $2_1 = 0; $1_1 = $0_1 >>> $5_1 | 0 } else { $2_1 = $0_1 >>> $5_1 | 0; $1_1 = ((1 << $5_1) - 1 & $0_1) << 32 - $5_1 | $10_1 >>> $5_1 } $5_1 = $15_1 | $1_1; $4_1 = $2_1 | $4_1; $1_1 = $9_1 & 31; if (($9_1 & 63) >>> 0 >= 32) { $2_1 = $10_1 << $1_1; $1_1 = 0 } else { $2_1 = (1 << $1_1) - 1 & $10_1 >>> 32 - $1_1 | $0_1 << $1_1; $1_1 = $10_1 << $1_1 } $0_1 = $2_1 } HEAP32[$6_1 + 16 >> 2] = $1_1; HEAP32[$6_1 + 20 >> 2] = $0_1; HEAP32[$6_1 + 24 >> 2] = $5_1; HEAP32[$6_1 + 28 >> 2] = $4_1; $1_1 = 15361 - $13_1 | 0; label$7: { if ($1_1 & 64) { $3_1 = $11_1; $1_1 = $1_1 + -64 | 0; $0_1 = $1_1 & 31; if (($1_1 & 63) >>> 0 >= 32) { $2_1 = 0; $8_1 = $7_1 >>> $0_1 | 0 } else { $2_1 = $7_1 >>> $0_1 | 0; $8_1 = ((1 << $0_1) - 1 & $7_1) << 32 - $0_1 | $3_1 >>> $0_1 } $3_1 = $2_1; $11_1 = 0; $7_1 = 0; break label$7 } if (!$1_1) { break label$7 } $4_1 = $11_1; $0_1 = 64 - $1_1 | 0; $2_1 = $0_1 & 31; if (($0_1 & 63) >>> 0 >= 32) { $0_1 = $4_1 << $2_1; $5_1 = 0 } else { $0_1 = (1 << $2_1) - 1 & $4_1 >>> 32 - $2_1 | $7_1 << $2_1; $5_1 = $4_1 << $2_1 } $4_1 = $8_1; $8_1 = $1_1 & 31; if (($1_1 & 63) >>> 0 >= 32) { $2_1 = 0; $4_1 = $3_1 >>> $8_1 | 0 } else { $2_1 = $3_1 >>> $8_1 | 0; $4_1 = ((1 << $8_1) - 1 & $3_1) << 32 - $8_1 | $4_1 >>> $8_1 } $8_1 = $5_1 | $4_1; $3_1 = $0_1 | $2_1; $4_1 = $11_1; $2_1 = $1_1 & 31; if (($1_1 & 63) >>> 0 >= 32) { $0_1 = 0; $11_1 = $7_1 >>> $2_1 | 0 } else { $0_1 = $7_1 >>> $2_1 | 0; $11_1 = ((1 << $2_1) - 1 & $7_1) << 32 - $2_1 | $4_1 >>> $2_1 } $7_1 = $0_1 } HEAP32[$6_1 >> 2] = $8_1; HEAP32[$6_1 + 4 >> 2] = $3_1; HEAP32[$6_1 + 8 >> 2] = $11_1; HEAP32[$6_1 + 12 >> 2] = $7_1; $1_1 = HEAP32[$6_1 + 8 >> 2]; $0_1 = HEAP32[$6_1 + 12 >> 2] << 4 | $1_1 >>> 28; $1_1 = $1_1 << 4; $2_1 = HEAP32[$6_1 >> 2]; $7_1 = HEAP32[$6_1 + 4 >> 2]; $1_1 = $7_1 >>> 28 | $1_1; $3_1 = $7_1 & 268435455; $2_1 = $2_1 | (HEAP32[$6_1 + 16 >> 2] | HEAP32[$6_1 + 24 >> 2] | (HEAP32[$6_1 + 20 >> 2] | HEAP32[$6_1 + 28 >> 2])) != 0; if (($3_1 | 0) == 134217728 & ($2_1 | 0) != 0 | $3_1 >>> 0 > 134217728) { $1_1 = $1_1 + 1 | 0; $0_1 = $1_1 ? $0_1 : $0_1 + 1 | 0; break label$1 } if ($2_1 | ($3_1 | 0) != 134217728) { break label$1 } $2_1 = $1_1; $1_1 = $1_1 + ($1_1 & 1) | 0; $0_1 = $2_1 >>> 0 > $1_1 >>> 0 ? $0_1 + 1 | 0 : $0_1 } global$0 = $6_1 + 32 | 0; wasm2js_scratch_store_i32(0, $1_1 | 0); wasm2js_scratch_store_i32(1, $12_1 & -2147483648 | $0_1); wasm2js_i32$0 = $14_1, wasm2js_f64$0 = +wasm2js_scratch_load_f64(), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0 } function $49($0_1, $1_1) { var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0; if (Atomics.exchange(HEAP8, 0 + 6128 | 0, 1)) { while (1) { if (HEAPU8[6128]) { continue } if (Atomics.exchange(HEAP8, 0 + 6128 | 0, 1)) { continue } break } } label$3: { if ($0_1 - 1 & $0_1 | $1_1 >>> 0 > 4294967239) { break label$3 } while (1) { $0_1 = $0_1 >>> 0 <= 8 ? 8 : $0_1; $2_1 = HEAP32[1795]; $6_1 = $2_1; $5_1 = HEAP32[1794]; $1_1 = $1_1 >>> 0 <= 8 ? 8 : $1_1 + 3 & -4; label$5: { if ($1_1 >>> 0 <= 127) { $7_1 = ($1_1 >>> 3 | 0) - 1 | 0; break label$5 } $3_1 = Math_clz32($1_1); $7_1 = (($1_1 >>> 29 - $3_1 ^ 4) - ($3_1 << 2) | 0) + 110 | 0; if ($1_1 >>> 0 <= 4095) { break label$5 } $3_1 = (($1_1 >>> 30 - $3_1 ^ 2) - ($3_1 << 1) | 0) + 71 | 0; $7_1 = $3_1 >>> 0 >= 63 ? 63 : $3_1 } $4_1 = $7_1 & 31; if (($7_1 & 63) >>> 0 >= 32) { $3_1 = 0; $2_1 = $2_1 >>> $4_1 | 0 } else { $3_1 = $2_1 >>> $4_1 | 0; $2_1 = ((1 << $4_1) - 1 & $2_1) << 32 - $4_1 | $5_1 >>> $4_1 } if ($2_1 | $3_1) { while (1) { $5_1 = $3_1; __inlined_func$__wasm_ctz_i64$6: { if ($3_1 | $2_1) { $3_1 = $5_1 - 1 | 0; $4_1 = $2_1 - 1 | 0; $3_1 = ($4_1 | 0) != -1 ? $3_1 + 1 | 0 : $3_1; $3_1 = Math_clz32($3_1 ^ $5_1); $4_1 = ($3_1 | 0) == 32 ? Math_clz32($4_1 ^ $2_1) + 32 | 0 : $3_1; $3_1 = 63 - $4_1 | 0; i64toi32_i32$HIGH_BITS = 0 - ($4_1 >>> 0 > 63) | 0; break __inlined_func$__wasm_ctz_i64$6 } i64toi32_i32$HIGH_BITS = 0; $3_1 = 64 } $4_1 = $3_1; $6_1 = $4_1 & 31; if (($4_1 & 63) >>> 0 >= 32) { $3_1 = 0; $10_1 = $5_1 >>> $6_1 | 0 } else { $3_1 = $5_1 >>> $6_1 | 0; $10_1 = ((1 << $6_1) - 1 & $5_1) << 32 - $6_1 | $2_1 >>> $6_1 } $7_1 = $4_1 + $7_1 | 0; $4_1 = $7_1 << 4; $6_1 = HEAP32[$4_1 + 6152 >> 2]; $5_1 = $4_1 + 6144 | 0; label$9: { if (($6_1 | 0) != ($5_1 | 0)) { $2_1 = $65($6_1, $0_1, $1_1); if ($2_1) { break label$3 } $2_1 = HEAP32[$6_1 + 4 >> 2]; HEAP32[$2_1 + 8 >> 2] = HEAP32[$6_1 + 8 >> 2]; HEAP32[HEAP32[$6_1 + 8 >> 2] + 4 >> 2] = $2_1; HEAP32[$6_1 + 8 >> 2] = $5_1; $2_1 = $4_1 + 6148 | 0; HEAP32[$6_1 + 4 >> 2] = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $6_1; HEAP32[HEAP32[$6_1 + 4 >> 2] + 8 >> 2] = $6_1; $7_1 = $7_1 + 1 | 0; $2_1 = ($3_1 & 1) << 31 | $10_1 >>> 1; $3_1 = $3_1 >>> 1 | 0; break label$9 } $11_1 = HEAP32[1795]; $5_1 = $7_1; $2_1 = $5_1 & 63; $6_1 = $2_1 & 31; if ($2_1 >>> 0 >= 32) { $4_1 = 0; $6_1 = -1 >>> $6_1 | 0 } else { $4_1 = -1 >>> $6_1 | 0; $6_1 = $4_1 | (1 << $6_1) - 1 << 32 - $6_1 } $6_1 = $6_1 & -2; $8_1 = $2_1 & 31; if ($2_1 >>> 0 >= 32) { $4_1 = $6_1 << $8_1; $6_1 = 0 } else { $4_1 = (1 << $8_1) - 1 & $6_1 >>> 32 - $8_1 | $4_1 << $8_1; $6_1 = $6_1 << $8_1 } $2_1 = $4_1; $8_1 = 0 - $5_1 & 63; $5_1 = $8_1; $4_1 = $5_1 & 31; if ($5_1 >>> 0 >= 32) { $4_1 = -1 << $4_1; $5_1 = 0 } else { $5_1 = -1 << $4_1; $4_1 = $5_1 | (1 << $4_1) - 1 & -1 >>> 32 - $4_1 } $5_1 = $5_1 & -2; $9_1 = $8_1 & 31; if ($8_1 >>> 0 >= 32) { $8_1 = 0; $5_1 = $4_1 >>> $9_1 | 0 } else { $8_1 = $4_1 >>> $9_1 | 0; $5_1 = ((1 << $9_1) - 1 & $4_1) << 32 - $9_1 | $5_1 >>> $9_1 } $5_1 = $5_1 | $6_1; i64toi32_i32$HIGH_BITS = $2_1 | $8_1; HEAP32[1794] = HEAP32[1794] & $5_1; HEAP32[1795] = i64toi32_i32$HIGH_BITS & $11_1; $2_1 = $10_1 ^ 1 } if ($3_1 | $2_1) { continue } break } $6_1 = HEAP32[1795]; $5_1 = HEAP32[1794] } label$11: { label$12: { if ($6_1 | $5_1) { $2_1 = Math_clz32($6_1); $4_1 = 63 - (($2_1 | 0) == 32 ? Math_clz32($5_1) + 32 | 0 : $2_1) | 0; $2_1 = $4_1 << 4; $3_1 = HEAP32[$2_1 + 6152 >> 2]; label$14: { if (!$6_1 & $5_1 >>> 0 < 1073741824) { break label$14 } $7_1 = 99; $5_1 = $2_1 + 6144 | 0; if (($5_1 | 0) == ($3_1 | 0)) { break label$14 } while (1) { if (!$7_1) { break label$14 } $2_1 = $65($3_1, $0_1, $1_1); if ($2_1) { break label$3 } $7_1 = $7_1 - 1 | 0; $3_1 = HEAP32[$3_1 + 8 >> 2]; if (($5_1 | 0) != ($3_1 | 0)) { continue } break } $3_1 = $5_1 } if ($50($1_1 + 48 | 0)) { break label$12 } if (!$3_1) { break label$11 } $5_1 = ($4_1 << 4) + 6144 | 0; if (($5_1 | 0) == ($3_1 | 0)) { break label$11 } while (1) { $2_1 = $65($3_1, $0_1, $1_1); if ($2_1) { break label$3 } $3_1 = HEAP32[$3_1 + 8 >> 2]; if (($5_1 | 0) != ($3_1 | 0)) { continue } break } break label$11 } if (!$50($1_1 + 48 | 0)) { break label$11 } } $2_1 = 0; if ($0_1 - 1 & $0_1) { break label$3 } if ($1_1 >>> 0 <= 4294967239) { continue } break label$3 } break } $2_1 = 0 } Atomics.store(HEAP8, 6128, 0); return $2_1 } function $237($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0; $7_1 = global$0 + -64 | 0; global$0 = $7_1; $0_1 = HEAP32[$0_1 >> 2]; label$1: { label$2: { $8_1 = HEAP32[$1_1 >> 2]; if (!HEAP32[$8_1 + 552 >> 2]) { if (HEAP32[$0_1 + 8 >> 2]) { break label$2 } $1_1 = HEAP32[$0_1 + 556 >> 2]; $6_1 = $1_1 + ($2_1 << 2) | 0; $3_1 = HEAP32[$0_1 + 560 >> 2]; $4_1 = $0_1 + 564 | 0; $5_1 = HEAP32[$4_1 >> 2]; label$4: { if ($3_1 >>> 0 < $5_1 >>> 0) { if (($3_1 | 0) == ($6_1 | 0)) { HEAP32[$6_1 >> 2] = $8_1; HEAP32[$0_1 + 560 >> 2] = $6_1 + 4; break label$4 } $2_1 = $3_1; $1_1 = $3_1 - 4 | 0; if ($3_1 >>> 0 > $1_1 >>> 0) { while (1) { HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2]; $2_1 = $2_1 + 4 | 0; $1_1 = $1_1 + 4 | 0; if ($3_1 >>> 0 > $1_1 >>> 0) { continue } break } } HEAP32[$0_1 + 560 >> 2] = $2_1; $1_1 = $6_1 + 4 | 0; if (($1_1 | 0) != ($3_1 | 0)) { $1_1 = $3_1 - $1_1 | 0; wasm2js_memory_copy($3_1 - ($1_1 & -4) | 0, $6_1, $1_1) } HEAP32[$6_1 >> 2] = $8_1; break label$4 } $3_1 = ($3_1 - $1_1 >> 2) + 1 | 0; if ($3_1 >>> 0 >= 1073741824) { break label$1 } $1_1 = $5_1 - $1_1 | 0; $5_1 = $1_1 >> 1; $4_1 = $36($7_1 + 24 | 0, $1_1 >>> 0 >= 2147483644 ? 1073741823 : $3_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $3_1, $2_1, $4_1); $2_1 = HEAP32[$4_1 + 8 >> 2]; label$10: { if (($2_1 | 0) != HEAP32[$4_1 + 12 >> 2]) { break label$10 } $1_1 = HEAP32[$4_1 + 4 >> 2]; $3_1 = HEAP32[$4_1 >> 2]; if ($1_1 >>> 0 > $3_1 >>> 0) { $3_1 = (($1_1 - $3_1 >> 2) + 1 | 0) / -2 << 2; $5_1 = $3_1 + $1_1 | 0; $9_1 = $1_1; $1_1 = $2_1 - $1_1 | 0; wasm2js_memory_copy($5_1, $9_1, $1_1); $2_1 = $1_1 + $5_1 | 0; HEAP32[$4_1 + 8 >> 2] = $2_1; HEAP32[$4_1 + 4 >> 2] = $3_1 + HEAP32[$4_1 + 4 >> 2]; break label$10 } $1_1 = ($2_1 | 0) == ($3_1 | 0) ? 1 : $2_1 - $3_1 >> 1; $5_1 = $36($7_1 + 44 | 0, $1_1, $1_1 >>> 2 | 0, HEAP32[$4_1 + 16 >> 2]); $3_1 = HEAP32[$5_1 + 8 >> 2]; $1_1 = HEAP32[$4_1 + 4 >> 2]; $2_1 = HEAP32[$4_1 + 8 >> 2]; label$12: { if (($1_1 | 0) == ($2_1 | 0)) { $2_1 = $3_1; $3_1 = $1_1; break label$12 } $2_1 = ($2_1 - $1_1 | 0) + $3_1 | 0; while (1) { HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2]; $1_1 = $1_1 + 4 | 0; $3_1 = $3_1 + 4 | 0; if (($3_1 | 0) != ($2_1 | 0)) { continue } break } $1_1 = HEAP32[$4_1 + 8 >> 2]; $3_1 = HEAP32[$4_1 + 4 >> 2] } $9_1 = HEAP32[$4_1 >> 2]; HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2]; HEAP32[$5_1 >> 2] = $9_1; HEAP32[$4_1 + 4 >> 2] = HEAP32[$5_1 + 4 >> 2]; HEAP32[$5_1 + 4 >> 2] = $3_1; HEAP32[$4_1 + 8 >> 2] = $2_1; HEAP32[$5_1 + 8 >> 2] = $1_1; $10_1 = HEAP32[$4_1 + 12 >> 2]; HEAP32[$4_1 + 12 >> 2] = HEAP32[$5_1 + 12 >> 2]; HEAP32[$5_1 + 12 >> 2] = $10_1; if (($1_1 | 0) != ($3_1 | 0)) { HEAP32[$5_1 + 8 >> 2] = (($3_1 - $1_1 | 0) + 3 & -4) + $1_1 } if (!$9_1) { break label$10 } $8($9_1); $2_1 = HEAP32[$4_1 + 8 >> 2] } HEAP32[$2_1 >> 2] = $8_1; HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2] + 4; $1_1 = HEAP32[$0_1 + 556 >> 2]; $2_1 = $6_1 - $1_1 | 0; $3_1 = HEAP32[$4_1 + 4 >> 2] - $2_1 | 0; wasm2js_memory_copy($3_1, $1_1, $2_1); HEAP32[$4_1 + 4 >> 2] = $3_1; $3_1 = HEAP32[$4_1 + 8 >> 2]; $1_1 = $6_1; $6_1 = HEAP32[$0_1 + 560 >> 2] - $6_1 | 0; wasm2js_memory_copy($3_1, $1_1, $6_1); $1_1 = HEAP32[$0_1 + 556 >> 2]; HEAP32[$0_1 + 556 >> 2] = HEAP32[$4_1 + 4 >> 2]; HEAP32[$4_1 + 4 >> 2] = $1_1; $2_1 = HEAP32[$0_1 + 560 >> 2]; HEAP32[$0_1 + 560 >> 2] = $3_1 + $6_1; HEAP32[$4_1 + 8 >> 2] = $2_1; $3_1 = HEAP32[$0_1 + 564 >> 2]; HEAP32[$0_1 + 564 >> 2] = HEAP32[$4_1 + 12 >> 2]; HEAP32[$4_1 >> 2] = $1_1; HEAP32[$4_1 + 12 >> 2] = $3_1; if (($1_1 | 0) != ($2_1 | 0)) { HEAP32[$4_1 + 8 >> 2] = $2_1 + (($1_1 - $2_1 | 0) + 3 & -4) } if (!$1_1) { break label$4 } $8($1_1) } HEAP32[$8_1 + 552 >> 2] = $0_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if (!($1_1 & 4)) { HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } } break } global$0 = $7_1 - -64 | 0; return } HEAP32[$7_1 + 16 >> 2] = 4174; $14($0_1, $7_1 + 16 | 0); $13(); wasm2js_trap() } HEAP32[$7_1 >> 2] = 4307; $14($0_1, $7_1); $13(); wasm2js_trap() } fimport$4(); wasm2js_trap() } function $9($0_1, $1_1, $2_1, $3_1) { var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0); label$1: { label$2: { label$3: { label$4: { label$5: { label$6: { if ($1_1 >>> 0 <= 1) { $5_1 = HEAPF32[$0_1 + 212 >> 2]; $1_1 = HEAP32[$0_1 + 212 >> 2]; label$8: { if (($1_1 | 0) == 2139156720) { break label$8 } if (($1_1 | 0) == 2140081935) { break label$6 } $6_1 = 4436; label$9: { if (($1_1 | 0) != 2141891242) { if ($5_1 == $5_1) { break label$9 } $6_1 = 4444 } $4_1 = HEAPF32[$6_1 >> 2]; $5_1 = Math_fround(NaN); switch (HEAP32[$6_1 + 4 >> 2] - 1 | 0) { case 0: break label$6; case 1: break label$8; default: break label$5 } } $4_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($1_1 & 1073741824)) { break label$6 } } $5_1 = Math_fround(Math_fround($4_1 * $3_1) * Math_fround(.009999999776482582)); break label$5 } $5_1 = HEAPF32[$0_1 + 208 >> 2]; label$11: { label$12: { $1_1 = HEAP32[$0_1 + 208 >> 2]; label$13: { if (($1_1 | 0) == 2139156720) { break label$13 } if (($1_1 | 0) == 2140081935) { break label$12 } $6_1 = 4436; label$14: { if (($1_1 | 0) != 2141891242) { if ($5_1 == $5_1) { break label$14 } $6_1 = 4444 } $4_1 = HEAPF32[$6_1 >> 2]; $5_1 = Math_fround(NaN); switch (HEAP32[$6_1 + 4 >> 2] - 1 | 0) { case 0: break label$12; case 1: break label$13; default: break label$11 } } $4_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($1_1 & 1073741824)) { break label$12 } } $5_1 = Math_fround(Math_fround($4_1 * $3_1) * Math_fround(.009999999776482582)); break label$11 } $5_1 = $4_1 } $4_1 = Math_fround(0); $7_1 = HEAPF32[$0_1 + 216 >> 2]; $0_1 = HEAP32[$0_1 + 216 >> 2]; label$16: { if (($0_1 | 0) == 2139156720) { break label$16 } if (($0_1 | 0) == 2140081935) { break label$3 } $1_1 = 4436; label$17: { if (($0_1 | 0) != 2141891242) { if ($7_1 == $7_1) { break label$17 } $1_1 = 4444 } $4_1 = HEAPF32[$1_1 >> 2]; switch (HEAP32[$1_1 + 4 >> 2] - 1 | 0) { case 1: break label$16; case 0: break label$4; default: break label$2 } } $4_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($0_1 & 1073741824)) { break label$4 } } $4_1 = Math_fround(Math_fround($4_1 * $3_1) * Math_fround(.009999999776482582)); break label$4 } $5_1 = $4_1 } $4_1 = Math_fround(0); $7_1 = HEAPF32[$0_1 + 220 >> 2]; $0_1 = HEAP32[$0_1 + 220 >> 2]; label$19: { if (($0_1 | 0) == 2139156720) { break label$19 } if (($0_1 | 0) == 2140081935) { break label$3 } $1_1 = 4436; label$20: { if (($0_1 | 0) != 2141891242) { if ($7_1 == $7_1) { break label$20 } $1_1 = 4444 } $4_1 = HEAPF32[$1_1 >> 2]; switch (HEAP32[$1_1 + 4 >> 2] - 1 | 0) { case 1: break label$19; case 0: break label$4; default: break label$2 } } $4_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($0_1 & 1073741824)) { break label$4 } } $4_1 = Math_fround(Math_fround($4_1 * $3_1) * Math_fround(.009999999776482582)) } if (!($4_1 >= Math_fround(0))) { break label$2 } } if ($2_1 > $4_1) { break label$1 } } if (!($5_1 >= Math_fround(0))) { return $2_1 } $4_1 = $2_1 < $5_1 ? $5_1 : $2_1 } return $4_1 } function $156($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0; $1_1 = global$3; HEAP8[$1_1 + 40 | 0] = 1; HEAP32[$1_1 + 64 >> 2] = $0_1; HEAP8[$1_1 + 41 | 0] = 0; $0_1 = Atomics.sub(HEAP32, $1_1 + 124 >> 2, 1) - 1 | 0; if ($0_1) { $2_1 = $1_1 + 124 | 0; while (1) { $34($2_1, $0_1, Infinity); $0_1 = Atomics.load(HEAP32, $2_1 >> 2); if ($0_1) { continue } break } } $108(HEAP32[$1_1 + 120 >> 2]); $0_1 = HEAP32[$1_1 + 120 >> 2]; label$3: { if (!Atomics.load(HEAP32, $0_1 >> 2)) { $105($0_1); break label$3 } $22(5916); HEAP32[$0_1 + 56 >> 2] = 5912; HEAP32[$0_1 + 52 >> 2] = HEAP32[1491]; HEAP32[1491] = $0_1; HEAP32[HEAP32[$0_1 + 52 >> 2] + 56 >> 2] = $0_1; $20(5916) } $2_1 = global$3; while (1) { $0_1 = HEAP32[$2_1 + 68 >> 2]; if ($0_1) { $4_1 = HEAP32[$0_1 + 4 >> 2]; $3_1 = HEAP32[$0_1 >> 2]; HEAP32[$2_1 + 68 >> 2] = HEAP32[$0_1 + 8 >> 2]; FUNCTION_TABLE[$3_1 | 0]($4_1); continue } break } $4_1 = 0; $2_1 = global$3; label$7: { if (!(HEAP8[$2_1 + 42 | 0] & 1)) { break label$7 } while (1) { label$9: { if (($103() | 0) != 10) { break label$9 } $0_1 = 100; while (1) { if (!(!$0_1 | !HEAP32[1956])) { $0_1 = $0_1 - 1 | 0; if (!HEAP32[1957]) { continue } } break } while (1) { if (($103() | 0) != 10) { break label$9 } $0_1 = HEAP32[1956]; if (($0_1 & 2147483647) != 2147483647) { continue } Atomics.add(HEAP32, 0 + 7828 >> 2, 1); $3_1 = $0_1; $0_1 = $0_1 | -2147483648; Atomics.compareExchange(HEAP32, 0 + 7824 >> 2, $3_1, $0_1) | 0; $0_1 = $113(7824, $0_1); Atomics.sub(HEAP32, 0 + 7828 >> 2, 1); if (!$0_1 | ($0_1 | 0) == 27) { continue } break } } HEAP8[$2_1 + 42 | 0] = HEAPU8[$2_1 + 42 | 0] & 254; $0_1 = 0; while (1) { HEAP32[HEAP32[$2_1 + 72 >> 2] + ($0_1 << 2) >> 2] = 0; $0_1 = $0_1 + 1 | 0; if (($0_1 | 0) != 128) { continue } break } if (HEAP32[1959] == HEAP32[global$3 + 24 >> 2]) { HEAP32[1959] = 0 } while (1) { $6_1 = HEAP32[1957]; $0_1 = HEAP32[1956]; $3_1 = $0_1 & 2147483647; $5_1 = ($3_1 | 0) != 2147483647 ? ($3_1 | 0) != 1 ? $0_1 - 1 | 0 : 0 : 0; if (($0_1 | 0) != (Atomics.compareExchange(HEAP32, 0 + 7824 >> 2, $0_1, $5_1) | 0)) { continue } break } if (!(!$6_1 & ($0_1 | 0) >= 0 | $5_1)) { $38(7824, $3_1) } if (!(HEAP8[$2_1 + 42 | 0] & 1)) { break label$7 } $0_1 = $4_1 >>> 0 < 3; $4_1 = $4_1 + 1 | 0; if ($0_1) { continue } break } } $0_1 = HEAP32[2275] - 1 | 0; HEAP32[2275] = $0_1; if (!$0_1) { HEAP8[9099] = 0 } $0_1 = HEAP32[global$3 + 24 >> 2]; label$18: { if (($0_1 | 0) != HEAP32[2271]) { $2_1 = $16(9084, 0, $0_1); if ($2_1) { while (1) { $58(9084, 9092, $2_1); $2_1 = $16(9084, 0, $0_1); if ($2_1) { continue } break } } break label$18 } HEAP32[2272] = HEAP32[2272] + 1 } $0_1 = HEAP32[$1_1 + 12 >> 2]; HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2]; HEAP32[HEAP32[$1_1 + 8 >> 2] + 12 >> 2] = $0_1; HEAP32[$1_1 + 8 >> 2] = $1_1; HEAP32[$1_1 + 12 >> 2] = $1_1; $0_1 = HEAP32[2272]; label$22: { if ($0_1) { HEAP32[2272] = $0_1 - 1; break label$22 } $90(9084); if (HEAP32[2273]) { $40(9084) } } if (!global$4) { $86(0, 0, 1); $0_1 = $1_1 + 32 | 0; if (($16($0_1, 2, 1) | 0) == 3) { fimport$23($1_1 | 0); return } $90($0_1); $40($0_1); return } fimport$24(0); wasm2js_trap() } function $115($0_1, $1_1) { var $2_1 = 0, $3_1 = 0; HEAP32[$0_1 >> 2] = 0; HEAP32[$0_1 + 8 >> 2] = 0; HEAP32[$0_1 + 12 >> 2] = 0; HEAP32[$0_1 + 16 >> 2] = 0; HEAP32[$0_1 + 20 >> 2] = 0; HEAP32[$0_1 + 24 >> 2] = 0; HEAP32[$0_1 + 36 >> 2] = 2143289344; HEAP32[$0_1 + 40 >> 2] = 2141891242; HEAP32[$0_1 + 28 >> 2] = 2143289344; HEAP32[$0_1 + 32 >> 2] = 2143289344; HEAP8[$0_1 + 4 | 0] = HEAPU8[$0_1 + 4 | 0] & 128; $3_1 = $0_1 + 44 | 0; wasm2js_memory_fill($3_1, 0, 36); while (1) { HEAP32[$3_1 + ($2_1 << 2) >> 2] = 2143289344; $2_1 = $2_1 + 1 | 0; if (($2_1 | 0) != 9) { continue } break } $2_1 = 0; $3_1 = $0_1 + 80 | 0; wasm2js_memory_fill($3_1, 0, 36); while (1) { HEAP32[$3_1 + ($2_1 << 2) >> 2] = 2143289344; $2_1 = $2_1 + 1 | 0; if (($2_1 | 0) != 9) { continue } break } $2_1 = 0; $3_1 = $0_1 + 116 | 0; wasm2js_memory_fill($3_1, 0, 36); while (1) { HEAP32[$3_1 + ($2_1 << 2) >> 2] = 2143289344; $2_1 = $2_1 + 1 | 0; if (($2_1 | 0) != 9) { continue } break } $2_1 = 0; $3_1 = $0_1 + 152 | 0; wasm2js_memory_fill($3_1, 0, 36); while (1) { HEAP32[$3_1 + ($2_1 << 2) >> 2] = 2143289344; $2_1 = $2_1 + 1 | 0; if (($2_1 | 0) != 9) { continue } break } $2_1 = 0; HEAP32[$0_1 + 196 >> 2] = 0; $3_1 = $0_1 + 188 | 0; HEAP32[$3_1 >> 2] = 0; HEAP32[$3_1 + 4 >> 2] = 0; while (1) { HEAP32[$3_1 + ($2_1 << 2) >> 2] = 2143289344; $2_1 = $2_1 + 1 | 0; if (($2_1 | 0) != 3) { continue } break } HEAP32[$0_1 + 24 >> 2] = 4224; HEAP32[$0_1 + 224 >> 2] = 2143289344; HEAP32[$0_1 + 216 >> 2] = 2143289344; HEAP32[$0_1 + 220 >> 2] = 2143289344; HEAP32[$0_1 + 208 >> 2] = 2143289344; HEAP32[$0_1 + 212 >> 2] = 2143289344; HEAP32[$0_1 + 200 >> 2] = 2141891242; HEAP32[$0_1 + 204 >> 2] = 2141891242; wasm2js_memory_fill($0_1 + 228 | 0, 0, 288); HEAP32[$0_1 + 244 >> 2] = 2143289344; HEAP32[$0_1 + 248 >> 2] = 2143289344; wasm2js_memory_fill($0_1 + 252 | 0, 0, 49); HEAP32[$0_1 + 308 >> 2] = 2143289344; $3_1 = $0_1 + 516 | 0; $2_1 = $0_1 + 324 | 0; while (1) { HEAP32[$2_1 + 16 >> 2] = -1082130432; HEAP32[$2_1 + 20 >> 2] = -1082130432; HEAP32[$2_1 + 8 >> 2] = 0; HEAP32[$2_1 + 12 >> 2] = 0; HEAP32[$2_1 >> 2] = -1082130432; HEAP32[$2_1 + 4 >> 2] = -1082130432; $2_1 = $2_1 + 24 | 0; if (($3_1 | 0) != ($2_1 | 0)) { continue } break } HEAP32[$0_1 + 548 >> 2] = 0; HEAP32[$0_1 + 552 >> 2] = 0; HEAP32[$0_1 + 516 >> 2] = 2143289344; HEAP32[$0_1 + 520 >> 2] = 2143289344; HEAP32[$0_1 + 572 >> 2] = 2143289344; HEAP32[$0_1 + 576 >> 2] = 0; HEAP32[$0_1 + 568 >> 2] = $1_1; HEAP32[$0_1 + 540 >> 2] = -1082130432; HEAP32[$0_1 + 544 >> 2] = -1082130432; HEAP32[$0_1 + 532 >> 2] = 0; HEAP32[$0_1 + 536 >> 2] = 0; HEAP32[$0_1 + 524 >> 2] = -1082130432; HEAP32[$0_1 + 528 >> 2] = -1082130432; HEAP32[$0_1 + 556 >> 2] = 0; HEAP32[$0_1 + 560 >> 2] = 0; HEAP32[$0_1 + 564 >> 2] = 0; HEAP32[$0_1 + 580 >> 2] = 2143289344; HEAP32[$0_1 + 584 >> 2] = 0; $109(($1_1 | 0) != 0, 2792); HEAP8[$0_1 + 4 | 0] = HEAPU8[$0_1 + 4 | 0] | 1; if (HEAP8[$1_1 + 8 | 0] & 1) { HEAP32[$0_1 + 24 >> 2] = HEAP32[$0_1 + 24 >> 2] & -909 | 520 } return $0_1 } function $82($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0; $6_1 = global$0 - 16 | 0; HEAP32[$6_1 + 8 >> 2] = 0; HEAP32[$6_1 + 12 >> 2] = 1; $10_1 = $0_1 + 200 | 0; $11_1 = $0_1 + 572 | 0; $12_1 = $0_1 + 208 | 0; $13_1 = $0_1 + 216 | 0; $0_1 = 0; while (1) { $14_1 = $0_1; $9_1 = HEAP32[($6_1 + 8 | 0) + ($0_1 << 2) >> 2]; $7_1 = $9_1 << 2; $0_1 = $13_1 + $7_1 | 0; $3_1 = HEAPF32[$0_1 >> 2]; label$2: { label$3: { label$4: { label$5: { label$6: { label$7: { $1_1 = HEAP32[$0_1 >> 2]; $8_1 = ($1_1 | 0) == 2139156720; if (!($8_1 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242) & $3_1 != $3_1) { break label$7 } $0_1 = $7_1 + $12_1 | 0; $4_1 = HEAPF32[$0_1 >> 2]; $2_1 = HEAP32[$0_1 >> 2]; label$12: { label$13: { if (($2_1 | 0) != 2139156720) { $5_1 = Math_fround(NaN); $0_1 = 3; if (($2_1 | 0) == 2141891242) { break label$12 } if (($2_1 | 0) != 2140081935) { break label$13 } $5_1 = Math_fround(0); $0_1 = 1; break label$12 } $5_1 = Math_fround(0); $0_1 = 2; break label$12 } $0_1 = 0; if ($4_1 != $4_1) { break label$12 } $5_1 = (wasm2js_scratch_store_i32(2, ($2_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $0_1 = $2_1 & 1073741824 ? 2 : 1 } $2_1 = $0_1; label$9: { label$10: { if (!$8_1) { $4_1 = Math_fround(NaN); $0_1 = 3; if (($1_1 | 0) == 2141891242) { break label$9 } if (($1_1 | 0) != 2140081935) { break label$10 } $4_1 = Math_fround(0); $0_1 = 1; break label$9 } $4_1 = Math_fround(0); $0_1 = 2; break label$9 } $0_1 = 0; if ($3_1 != $3_1) { break label$9 } $4_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $0_1 = $1_1 & 1073741824 ? 2 : 1 } if (($2_1 | 0) != ($0_1 | 0) | !(!$0_1 | $4_1 != $4_1 & $5_1 != $5_1 | Math_fround(Math_abs(Math_fround($4_1 - $5_1))) < Math_fround(9999999747378752e-20))) { break label$7 } $0_1 = 0; if ($8_1) { break label$6 } if (($1_1 | 0) == 2140081935) { break label$3 } if (($1_1 | 0) == 2141891242) { break label$4 } if ($3_1 != $3_1) { break label$5 } $0_1 = ($1_1 & -1073741825) + 536870912 | 0; $1_1 = $1_1 & 1073741824 ? 2 : 1; break label$2 } $0_1 = 0; $1_1 = $7_1 + $10_1 | 0; $3_1 = HEAPF32[$1_1 >> 2]; $1_1 = HEAP32[$1_1 >> 2]; if (($1_1 | 0) == 2139156720) { break label$6 } if (($1_1 | 0) == 2140081935) { break label$3 } if (($1_1 | 0) == 2141891242) { break label$4 } if ($3_1 != $3_1) { break label$5 } $0_1 = ($1_1 & -1073741825) + 536870912 | 0; $1_1 = $1_1 & 1073741824 ? 2 : 1; break label$2 } $1_1 = 2; break label$2 } $0_1 = 2143289344; $1_1 = 0; break label$2 } $0_1 = 2143289344; $1_1 = 3; break label$2 } $1_1 = 1 } $2_1 = ($9_1 << 3) + $11_1 | 0; HEAP32[$2_1 + 4 >> 2] = $1_1; HEAP32[$2_1 >> 2] = $0_1; $0_1 = 1; if (!($14_1 & 1)) { continue } break } } function $75($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) { var $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = 0; if ($8_1 < Math_fround(0) | $9_1 < Math_fround(0)) { $0_1 = 0 } else { $17_1 = $5_1; $18_1 = $1_1; $19_1 = $3_1; $14_1 = $7_1; label$3: { if (!$12_1) { break label$3 } $13_1 = HEAPF32[$12_1 + 20 >> 2]; $14_1 = $7_1; if ($13_1 == Math_fround(0)) { break label$3 } $20_1 = +$13_1; $18_1 = $17(+$1_1, $20_1, 0, 0); $19_1 = $17(+$3_1, $20_1, 0, 0); $17_1 = $17(+$5_1, $20_1, 0, 0); $14_1 = $17(+$7_1, $20_1, 0, 0) } $13_1 = $14_1; $12_1 = 0; label$4: { if (($0_1 | 0) != ($4_1 | 0)) { break label$4 } $21_1 = $17_1 != $17_1; $12_1 = $18_1 != $18_1; if ($21_1 | $12_1) { $12_1 = $12_1 & $21_1; break label$4 } $12_1 = Math_fround(Math_abs(Math_fround($17_1 - $18_1))) < Math_fround(9999999747378752e-20) } $21_1 = $12_1; label$6: { if (($2_1 | 0) != ($6_1 | 0)) { break label$6 } $15_1 = $13_1 != $13_1; $12_1 = $19_1 != $19_1; if ($15_1 | $12_1) { $15_1 = $12_1 & $15_1; break label$6 } $15_1 = Math_fround(Math_abs(Math_fround($13_1 - $19_1))) < Math_fround(9999999747378752e-20) } $16_1 = 1; $12_1 = 1; label$8: { if ($21_1) { break label$8 } $1_1 = Math_fround($1_1 - $10_1); label$9: { if (($0_1 | 0) == 1) { break label$9 } $0_1 = ($0_1 | 0) != 2; if (!($0_1 | $4_1)) { if (!($1_1 >= $8_1)) { break label$9 } break label$8 } $12_1 = 0; if (!($1_1 < $5_1) | ($0_1 | ($4_1 | 0) != 2 | ($1_1 != $1_1 | $5_1 != $5_1 | $8_1 != $8_1))) { break label$8 } $12_1 = 1; if ($1_1 >= $8_1) { break label$8 } } $4_1 = $1_1 != $1_1; $0_1 = $8_1 != $8_1; if ($4_1 | $0_1) { $12_1 = $0_1 & $4_1; break label$8 } $12_1 = Math_fround(Math_abs(Math_fround($1_1 - $8_1))) < Math_fround(9999999747378752e-20) } label$12: { if ($15_1) { break label$12 } $1_1 = Math_fround($3_1 - $11_1); label$13: { if (($2_1 | 0) == 1) { break label$13 } $0_1 = ($2_1 | 0) != 2; if (!($0_1 | $6_1)) { if (!($1_1 >= $9_1)) { break label$13 } break label$12 } $16_1 = 0; if (!($1_1 < $7_1) | ($0_1 | ($6_1 | 0) != 2 | ($1_1 != $1_1 | $7_1 != $7_1 | $9_1 != $9_1))) { break label$12 } $16_1 = 1; if ($1_1 >= $9_1) { break label$12 } } $2_1 = $1_1 != $1_1; $0_1 = $9_1 != $9_1; if ($2_1 | $0_1) { $16_1 = $0_1 & $2_1; break label$12 } $16_1 = Math_fround(Math_abs(Math_fround($1_1 - $9_1))) < Math_fround(9999999747378752e-20) } $0_1 = $12_1 & $16_1 } return $0_1 } function $73($0_1, $1_1, $2_1, $3_1, $4_1) { var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0; $7_1 = Math_fround($2_1 - $3_1); $10_1 = $7_1 != $7_1; if (!$10_1) { $2_1 = Math_fround(0); $6_1 = ($1_1 << 2) + $0_1 | 0; $5_1 = HEAPF32[$6_1 + 208 >> 2]; label$3: { label$4: { $6_1 = HEAP32[$6_1 + 208 >> 2]; label$5: { label$6: { if (($6_1 | 0) == 2139156720) { break label$6 } if (($6_1 | 0) == 2140081935) { break label$4 } $9_1 = 4436; label$7: { if (($6_1 | 0) != 2141891242) { if ($5_1 == $5_1) { break label$7 } $9_1 = 4444 } $2_1 = HEAPF32[$9_1 >> 2]; switch (HEAP32[$9_1 + 4 >> 2] - 1 | 0) { case 0: break label$5; case 1: break label$6; default: break label$3 } } $2_1 = (wasm2js_scratch_store_i32(2, ($6_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($6_1 & 1073741824)) { break label$5 } } $2_1 = Math_fround(Math_fround($2_1 * $4_1) * Math_fround(.009999999776482582)) } if ($2_1 == $2_1) { break label$4 } break label$3 } $8_1 = Math_fround($2_1 - $3_1) } $2_1 = Math_fround(0); $0_1 = ($1_1 << 2) + $0_1 | 0; $5_1 = HEAPF32[$0_1 + 216 >> 2]; label$9: { label$10: { $1_1 = HEAP32[$0_1 + 216 >> 2]; label$11: { label$12: { if (($1_1 | 0) == 2139156720) { break label$12 } if (($1_1 | 0) == 2140081935) { break label$10 } $0_1 = 4436; label$13: { if (($1_1 | 0) != 2141891242) { if ($5_1 == $5_1) { break label$13 } $0_1 = 4444 } $2_1 = HEAPF32[$0_1 >> 2]; $5_1 = Math_fround(34028234663852886e22); switch (HEAP32[$0_1 + 4 >> 2] - 1 | 0) { case 0: break label$11; case 1: break label$12; default: break label$9 } } $2_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($1_1 & 1073741824)) { break label$11 } } $2_1 = Math_fround(Math_fround($2_1 * $4_1) * Math_fround(.009999999776482582)) } if ($2_1 == $2_1) { break label$10 } $5_1 = Math_fround(34028234663852886e22); break label$9 } $5_1 = Math_fround($2_1 - $3_1) } $2_1 = (wasm2js_f32$0 = $7_1, wasm2js_f32$1 = $63($7_1, $5_1), wasm2js_i32$0 = $5_1 != $5_1 | $10_1, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1); $0_1 = $2_1 != $2_1; if (!($0_1 | $8_1 != $8_1)) { return $1($2_1, $8_1) } $7_1 = $0_1 ? $8_1 : $2_1 } return $7_1 } function __wasm_i64_udiv($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0; __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E$20: { label$1: { label$2: { label$3: { label$4: { label$5: { label$6: { label$7: { label$9: { label$11: { if ($1_1) { if (!$2_1) { break label$11 } break label$9 } i64toi32_i32$HIGH_BITS = 0; $0_1 = ($0_1 >>> 0) / ($2_1 >>> 0) | 0; break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E$20 } if (!$0_1) { break label$7 } break label$6 } if (!($2_1 - 1 & $2_1)) { break label$5 } $5_1 = (Math_clz32($2_1) + 33 | 0) - Math_clz32($1_1) | 0; $6_1 = 0 - $5_1 | 0; break label$3 } i64toi32_i32$HIGH_BITS = 0; $0_1 = ($1_1 >>> 0) / 0 | 0; break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E$20 } $3_1 = 32 - Math_clz32($1_1) | 0; if ($3_1 >>> 0 < 31) { break label$4 } break label$2 } if (($2_1 | 0) == 1) { break label$1 } $5_1 = $2_1 ? 31 - Math_clz32($2_1 - 1 ^ $2_1) | 0 : 32; $2_1 = $5_1 & 31; if (($5_1 & 63) >>> 0 >= 32) { $0_1 = $1_1 >>> $2_1 | 0 } else { $3_1 = $1_1 >>> $2_1 | 0; $0_1 = ((1 << $2_1) - 1 & $1_1) << 32 - $2_1 | $0_1 >>> $2_1 } i64toi32_i32$HIGH_BITS = $3_1; break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E$20 } $5_1 = $3_1 + 1 | 0; $6_1 = 63 - $3_1 | 0 } $3_1 = $5_1 & 63; $4_1 = $3_1 & 31; if ($3_1 >>> 0 >= 32) { $3_1 = 0; $7_1 = $1_1 >>> $4_1 | 0 } else { $3_1 = $1_1 >>> $4_1 | 0; $7_1 = ((1 << $4_1) - 1 & $1_1) << 32 - $4_1 | $0_1 >>> $4_1 } $6_1 = $6_1 & 63; $4_1 = $6_1 & 31; if ($6_1 >>> 0 >= 32) { $1_1 = $0_1 << $4_1; $0_1 = 0 } else { $1_1 = (1 << $4_1) - 1 & $0_1 >>> 32 - $4_1 | $1_1 << $4_1; $0_1 = $0_1 << $4_1 } if ($5_1) { $6_1 = $2_1 - 1 | 0; $11_1 = ($6_1 | 0) == -1 ? -1 : 0; while (1) { $8_1 = $3_1 << 1 | $7_1 >>> 31; $3_1 = $7_1 << 1 | $1_1 >>> 31; $4_1 = $11_1 - ($8_1 + ($3_1 >>> 0 > $6_1 >>> 0) | 0) >> 31; $9_1 = $2_1 & $4_1; $7_1 = $3_1 - $9_1 | 0; $3_1 = $8_1 - ($3_1 >>> 0 < $9_1 >>> 0) | 0; $1_1 = $1_1 << 1 | $0_1 >>> 31; $0_1 = $10_1 | $0_1 << 1; $10_1 = $4_1 & 1; $5_1 = $5_1 - 1 | 0; if ($5_1) { continue } break } } i64toi32_i32$HIGH_BITS = $1_1 << 1 | $0_1 >>> 31; $0_1 = $10_1 | $0_1 << 1; break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E$20 } $0_1 = 0; $1_1 = 0 } i64toi32_i32$HIGH_BITS = $1_1 } return $0_1 }
              function $50($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0; $2_1 = $0_1 + 7 & -8; label$1: { label$2: { while (1) { $3_1 = Atomics.load(HEAP32, 1440); $1_1 = $3_1 + $2_1 | 0; if ($1_1 >>> 0 <= $3_1 >>> 0 ? $2_1 : 0) { break label$2 } if ($1_1 >>> 0 > __wasm_memory_size() << 16 >>> 0) { if (!(fimport$25($1_1 | 0) | 0)) { break label$2 } } if (($3_1 | 0) != (Atomics.compareExchange(HEAP32, 0 + 5760 >> 2, $3_1, $1_1) | 0)) { continue } break } break label$1 } wasm2js_i32$0 = $43(), wasm2js_i32$1 = 48, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1; $3_1 = -1 } if (($3_1 | 0) != -1) { $0_1 = $0_1 + $3_1 | 0; HEAP32[$0_1 - 4 >> 2] = 16; $2_1 = $0_1 - 16 | 0; HEAP32[$2_1 >> 2] = 16; $1_1 = HEAP32[1792]; if ($1_1) { $5_1 = HEAP32[$1_1 + 8 >> 2] } else { $5_1 = 0 } label$6: { label$7: { if (($5_1 | 0) == ($3_1 | 0)) { $4_1 = $3_1 - (HEAP32[$3_1 - 4 >> 2] & -2) | 0; $5_1 = HEAP32[$4_1 - 4 >> 2]; HEAP32[$1_1 + 8 >> 2] = $0_1; $0_1 = $4_1 - ($5_1 & -2) | 0; $1_1 = -16; if (!(HEAP8[($0_1 + HEAP32[$0_1 >> 2] | 0) - 4 | 0] & 1)) { break label$7 } $1_1 = HEAP32[$0_1 + 4 >> 2]; HEAP32[$1_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2]; HEAP32[HEAP32[$0_1 + 8 >> 2] + 4 >> 2] = $1_1; $1_1 = $2_1 - $0_1 | 0; HEAP32[$0_1 >> 2] = $1_1; break label$6 } HEAP32[$3_1 + 12 >> 2] = 16; HEAP32[$3_1 >> 2] = 16; HEAP32[$3_1 + 8 >> 2] = $0_1; HEAP32[$3_1 + 4 >> 2] = $1_1; HEAP32[1792] = $3_1; $1_1 = 16 } $0_1 = $1_1 + $3_1 | 0; $1_1 = $2_1 - $0_1 | 0; HEAP32[$0_1 >> 2] = $1_1 } HEAP32[(($1_1 & -4) + $0_1 | 0) - 4 >> 2] = $1_1 | 1; $2_1 = HEAP32[$0_1 >> 2] - 8 | 0; label$11: { if ($2_1 >>> 0 <= 127) { $1_1 = ($2_1 >>> 3 | 0) - 1 | 0; break label$11 } $4_1 = Math_clz32($2_1); $1_1 = (($2_1 >>> 29 - $4_1 ^ 4) - ($4_1 << 2) | 0) + 110 | 0; if ($2_1 >>> 0 <= 4095) { break label$11 } $1_1 = (($2_1 >>> 30 - $4_1 ^ 2) - ($4_1 << 1) | 0) + 71 | 0; $1_1 = $1_1 >>> 0 >= 63 ? 63 : $1_1 } $2_1 = $1_1 << 4; HEAP32[$0_1 + 4 >> 2] = $2_1 + 6144; $2_1 = $2_1 + 6152 | 0; HEAP32[$0_1 + 8 >> 2] = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $0_1; HEAP32[HEAP32[$0_1 + 8 >> 2] + 4 >> 2] = $0_1; $2_1 = HEAP32[1794]; $4_1 = HEAP32[1795]; $0_1 = $1_1 & 31; if (($1_1 & 63) >>> 0 >= 32) { $1_1 = 1 << $0_1; $5_1 = 0 } else { $5_1 = 1 << $0_1; $1_1 = $5_1 - 1 & 1 >>> 32 - $0_1 } HEAP32[1794] = $5_1 | $2_1; HEAP32[1795] = $1_1 | $4_1 } return ($3_1 | 0) != -1 } function $23($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = 0, $5_1 = 0; if ($2_1 >>> 0 >= 512) { wasm2js_memory_copy($0_1, $1_1, $2_1); return $0_1 } $5_1 = $0_1 + $2_1 | 0; label$2: { if (!(($0_1 ^ $1_1) & 3)) { $4_1 = $0_1 & 3; $3_1 = $0_1; label$4: { if (!$4_1) { break label$4 } $3_1 = $0_1; if (!$2_1) { break label$4 } $2_1 = $0_1 + 1 | 0; $2_1 = ($0_1 ^ -1) + ($2_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $2_1) | 0; $3_1 = $4_1 ^ 3; $2_1 = ($2_1 >>> 0 < $3_1 >>> 0 ? $2_1 : $3_1) + 1 | 0; wasm2js_memory_copy($0_1, $1_1, $2_1); $1_1 = $1_1 + $2_1 | 0; $3_1 = $0_1 + $2_1 | 0 } $2_1 = $3_1; $3_1 = $5_1 & -4; label$5: { if ($3_1 >>> 0 < 64) { break label$5 } $4_1 = $3_1 + -64 | 0; if ($4_1 >>> 0 < $2_1 >>> 0) { break label$5 } while (1) { HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2]; HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2]; HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2]; HEAP32[$2_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2]; HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2]; HEAP32[$2_1 + 20 >> 2] = HEAP32[$1_1 + 20 >> 2]; HEAP32[$2_1 + 24 >> 2] = HEAP32[$1_1 + 24 >> 2]; HEAP32[$2_1 + 28 >> 2] = HEAP32[$1_1 + 28 >> 2]; HEAP32[$2_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2]; HEAP32[$2_1 + 36 >> 2] = HEAP32[$1_1 + 36 >> 2]; HEAP32[$2_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2]; HEAP32[$2_1 + 44 >> 2] = HEAP32[$1_1 + 44 >> 2]; HEAP32[$2_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2]; HEAP32[$2_1 + 52 >> 2] = HEAP32[$1_1 + 52 >> 2]; HEAP32[$2_1 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2]; HEAP32[$2_1 + 60 >> 2] = HEAP32[$1_1 + 60 >> 2]; $1_1 = $1_1 - -64 | 0; $2_1 = $2_1 - -64 | 0; if ($4_1 >>> 0 >= $2_1 >>> 0) { continue } break } } if ($2_1 >>> 0 >= $3_1 >>> 0) { break label$2 } $4_1 = $2_1 + 4 | 0; $3_1 = (($2_1 ^ -1) + ($3_1 >>> 0 > $4_1 >>> 0 ? $3_1 : $4_1) & -4) + 4 | 0; wasm2js_memory_copy($2_1, $1_1, $3_1); $1_1 = $1_1 + $3_1 | 0; $2_1 = $2_1 + $3_1 | 0; break label$2 } if ($5_1 >>> 0 < 4) { $2_1 = $0_1; break label$2 } $3_1 = $5_1 - 4 | 0; if ($3_1 >>> 0 < $0_1 >>> 0) { $2_1 = $0_1; break label$2 } $2_1 = $0_1; while (1) { HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0]; HEAP8[$2_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0]; HEAP8[$2_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0]; HEAP8[$2_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0]; $1_1 = $1_1 + 4 | 0; $2_1 = $2_1 + 4 | 0; if ($3_1 >>> 0 >= $2_1 >>> 0) { continue } break } } if ($2_1 >>> 0 < $5_1 >>> 0) { wasm2js_memory_copy($2_1, $1_1, $5_1 - $2_1 | 0) } return $0_1 } function $64($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0; wasm2js_scratch_store_f64(+$0_1); $5_1 = wasm2js_scratch_load_i32(1) | 0; $3_1 = wasm2js_scratch_load_i32(0) | 0; $4_1 = $5_1 >>> 20 & 2047; if (($4_1 | 0) == 2047) { $0_1 = $0_1 * 1; return $0_1 / $0_1 } $1_1 = $3_1 << 1; $6_1 = $5_1 << 1 | $3_1 >>> 31; if (!$1_1 & ($6_1 | 0) == 2145386496 | $6_1 >>> 0 < 2145386496) { return !$1_1 & ($6_1 | 0) == 2145386496 ? $0_1 * 0 : $0_1 } label$3: { if (!$4_1) { $4_1 = 0; $2_1 = $3_1 << 12; $1_1 = $5_1 << 12 | $3_1 >>> 20; if (($1_1 | 0) > 0 | ($1_1 | 0) >= 0) { while (1) { $4_1 = $4_1 - 1 | 0; $1_1 = $1_1 << 1 | $2_1 >>> 31; $2_1 = $2_1 << 1; if (($1_1 | 0) > 0 | ($1_1 | 0) >= 0) { continue } break } } $1_1 = 1 - $4_1 | 0; $2_1 = $1_1 & 31; if (($1_1 & 63) >>> 0 >= 32) { $1_1 = $3_1 << $2_1; $3_1 = 0 } else { $1_1 = (1 << $2_1) - 1 & $3_1 >>> 32 - $2_1 | $5_1 << $2_1; $3_1 = $3_1 << $2_1 } break label$3 } $1_1 = $5_1 & 1048575 | 1048576 } $2_1 = $3_1; if (($4_1 | 0) > 1023) { while (1) { label$9: { $3_1 = $1_1 + -1048576 | 0; if (($3_1 | 0) < 0) { break label$9 } $1_1 = $3_1; if ($1_1 | $2_1) { break label$9 } return $0_1 * 0 } $1_1 = $1_1 << 1 | $2_1 >>> 31; $2_1 = $2_1 << 1; $4_1 = $4_1 - 1 | 0; if (($4_1 | 0) > 1023) { continue } break } $4_1 = 1023 } label$10: { $3_1 = $1_1 + -1048576 | 0; if (($3_1 | 0) < 0) { break label$10 } $1_1 = $3_1; if ($1_1 | $2_1) { break label$10 } return $0_1 * 0 } if (($1_1 | 0) == 1048575 | $1_1 >>> 0 < 1048575) { while (1) { $4_1 = $4_1 - 1 | 0; $3_1 = $1_1 >>> 0 < 524288; $6_1 = $1_1 << 1 | $2_1 >>> 31; $2_1 = $2_1 << 1; $1_1 = $6_1; if ($3_1) { continue } break } } $8_1 = $5_1 & -2147483648; $6_1 = $1_1 + -1048576 | $4_1 << 20; $7_1 = $2_1; $5_1 = $1_1; $7_1 = $2_1; $3_1 = 1 - $4_1 | 0; $2_1 = $3_1 & 31; if (($3_1 & 63) >>> 0 >= 32) { $1_1 = 0; $3_1 = $5_1 >>> $2_1 | 0 } else { $1_1 = $5_1 >>> $2_1 | 0; $3_1 = ((1 << $2_1) - 1 & $5_1) << 32 - $2_1 | $7_1 >>> $2_1 } $2_1 = ($4_1 | 0) > 0; wasm2js_scratch_store_i32(0, ($2_1 ? $7_1 : $3_1) | 0); wasm2js_scratch_store_i32(1, ($2_1 ? $6_1 : $1_1) | $8_1); return +wasm2js_scratch_load_f64() } function $96($0_1, $1_1, $2_1, $3_1, $4_1) { var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0; $5_1 = global$0 - 208 | 0; global$0 = $5_1; HEAP32[$5_1 + 204 >> 2] = $2_1; $2_1 = $5_1 + 160 | 0; wasm2js_memory_fill($2_1, 0, 40); HEAP32[$5_1 + 200 >> 2] = HEAP32[$5_1 + 204 >> 2]; label$1: { if (($95(0, $1_1, $5_1 + 200 | 0, $5_1 + 80 | 0, $2_1, $3_1, $4_1) | 0) < 0) { $4_1 = -1; break label$1 } if (HEAP32[$0_1 + 76 >> 2] >= 0) { label$4: { $2_1 = HEAP32[global$3 + 24 >> 2]; if (($2_1 | 0) == (HEAP32[$0_1 + 76 >> 2] & -1073741825)) { break label$4 } $10_1 = 1; $6_1 = $0_1 + 76 | 0; if (!$16($6_1, 0, $2_1)) { break label$4 } $7_1 = $2_1 | 1073741824; $2_1 = $16($6_1, 0, $7_1); if (!$2_1) { break label$4 } while (1) { $8_1 = $2_1 | 1073741824; label$6: { if (!($2_1 & 1073741824)) { if (($16($6_1, $2_1, $8_1) | 0) != ($2_1 | 0)) { break label$6 } } $58($6_1, 0, $8_1) } $2_1 = $16($6_1, 0, $7_1); if ($2_1) { continue } break } } } $6_1 = HEAP32[$0_1 >> 2]; if (HEAP32[$0_1 + 72 >> 2] <= 0) { HEAP32[$0_1 >> 2] = $6_1 & -33 } label$9: { label$10: { label$11: { if (!HEAP32[$0_1 + 48 >> 2]) { HEAP32[$0_1 + 48 >> 2] = 80; HEAP32[$0_1 + 28 >> 2] = 0; HEAP32[$0_1 + 16 >> 2] = 0; HEAP32[$0_1 + 20 >> 2] = 0; $9_1 = HEAP32[$0_1 + 44 >> 2]; HEAP32[$0_1 + 44 >> 2] = $5_1; break label$11 } if (HEAP32[$0_1 + 16 >> 2]) { break label$10 } } $2_1 = -1; if ($69($0_1)) { break label$9 } } $2_1 = $95($0_1, $1_1, $5_1 + 200 | 0, $5_1 + 80 | 0, $5_1 + 160 | 0, $3_1, $4_1) } if ($9_1) { FUNCTION_TABLE[HEAP32[$0_1 + 36 >> 2]]($0_1, 0, 0) | 0; HEAP32[$0_1 + 48 >> 2] = 0; HEAP32[$0_1 + 44 >> 2] = $9_1; HEAP32[$0_1 + 28 >> 2] = 0; $1_1 = HEAP32[$0_1 + 20 >> 2]; HEAP32[$0_1 + 16 >> 2] = 0; HEAP32[$0_1 + 20 >> 2] = 0; $2_1 = $1_1 ? $2_1 : -1 } $1_1 = HEAP32[$0_1 >> 2]; HEAP32[$0_1 >> 2] = $1_1 | $6_1 & 32; $4_1 = $1_1 & 32 ? -1 : $2_1; if (!$10_1) { break label$1 } $0_1 = $0_1 + 76 | 0; if (Atomics.exchange(HEAP32, $0_1 >> 2, 0) & 1073741824) { $40($0_1) } } global$0 = $5_1 + 208 | 0; return $4_1 } function $70($0_1, $1_1, $2_1, $3_1) { var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0); label$1: { if ($1_1 == 0) { break label$1 } $15_1 = HEAPF32[$0_1 + 248 >> 2]; $16_1 = HEAPF32[$0_1 + 244 >> 2]; $17_1 = HEAPF32[$0_1 + 232 >> 2]; $11_1 = +HEAPF32[$0_1 + 228 >> 2]; $6_1 = HEAPU8[$0_1 + 4 | 0] & 8; $4_1 = $6_1 >>> 3 | 0; wasm2js_i32$0 = $0_1, wasm2js_f32$0 = $17($11_1, $1_1, 0, $4_1), HEAPF32[wasm2js_i32$0 + 228 >> 2] = wasm2js_f32$0; $12_1 = +$17_1; wasm2js_i32$0 = $0_1, wasm2js_f32$0 = $17($12_1, $1_1, 0, $4_1), HEAPF32[wasm2js_i32$0 + 232 >> 2] = wasm2js_f32$0; $13_1 = +$16_1; $8_1 = $64($13_1 * $1_1); $4_1 = $8_1 != $8_1; $14_1 = +$15_1; $9_1 = $64($14_1 * $1_1); $5_1 = $9_1 != $9_1; $2_1 = $11_1 + $2_1; $7_1 = Math_abs($8_1) < 1e-4; $7_1 = $4_1 | $7_1 ? $4_1 | !$7_1 : !(Math_abs($8_1 + -1) < 1e-4); $4_1 = ($6_1 | 0) != 0; wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround($17($2_1 + $13_1, $1_1, $7_1 & $4_1, $4_1 & !$7_1) - $17($2_1, $1_1, 0, $4_1)), HEAPF32[wasm2js_i32$0 + 244 >> 2] = wasm2js_f32$0; $3_1 = $12_1 + $3_1; $6_1 = Math_abs($9_1) < 1e-4; $5_1 = $5_1 | $6_1 ? $5_1 | !$6_1 : !(Math_abs($9_1 + -1) < 1e-4); wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround($17($3_1 + $14_1, $1_1, $4_1 & $5_1, $4_1 & !$5_1) - $17($3_1, $1_1, 0, $4_1)), HEAPF32[wasm2js_i32$0 + 248 >> 2] = wasm2js_f32$0; $4_1 = HEAP32[$0_1 + 560 >> 2]; $5_1 = HEAP32[$0_1 + 556 >> 2]; if (($4_1 | 0) == ($5_1 | 0)) { break label$1 } $4_1 = $4_1 - $5_1 >> 2; $5_1 = $4_1 >>> 0 <= 1 ? 1 : $4_1; while (1) { $4_1 = HEAP32[$0_1 + 556 >> 2]; if (HEAP32[$0_1 + 560 >> 2] - $4_1 >> 2 >>> 0 > $10_1 >>> 0) { $4_1 = HEAP32[$4_1 + ($10_1 << 2) >> 2] } else { $4_1 = 0 } $70($4_1, $1_1, $2_1, $3_1); $10_1 = $10_1 + 1 | 0; if (($5_1 | 0) != ($10_1 | 0)) { continue } break } } } function $107() { var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0; $0_1 = global$0 + -64 | 0; global$0 = $0_1; if (!$57(5916)) { $1_1 = HEAP32[1492]; if (($1_1 | 0) != 5912) { while (1) { $2_1 = HEAP32[$1_1 + 56 >> 2]; if (!Atomics.load(HEAP32, $1_1 >> 2)) { $3_1 = HEAP32[$1_1 + 52 >> 2]; HEAP32[$3_1 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2]; HEAP32[HEAP32[$1_1 + 56 >> 2] + 52 >> 2] = $3_1; $105($1_1) } $1_1 = $2_1; if (($1_1 | 0) != 5912) { continue } break } } $20(5916) } $1_1 = $29(60); label$5: { if (!$1_1) { break label$5 } $2_1 = $29(1536); if (!$2_1) { $8($1_1); break label$5 } HEAP32[$0_1 + 40 >> 2] = 0; HEAP32[$0_1 + 44 >> 2] = 0; HEAP32[$0_1 + 48 >> 2] = 0; HEAP32[$0_1 + 52 >> 2] = 0; HEAP32[$0_1 + 60 >> 2] = 0; HEAP32[$0_1 + 32 >> 2] = 0; HEAP32[$0_1 + 36 >> 2] = 0; HEAP32[$0_1 + 28 >> 2] = 7892; HEAP32[$0_1 + 24 >> 2] = 0; HEAP32[$0_1 + 20 >> 2] = $2_1; HEAP32[$0_1 + 16 >> 2] = 128; HEAP32[$0_1 + 12 >> 2] = 0; HEAP32[$0_1 + 8 >> 2] = 0; HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 >> 2] = 0; HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 60 >> 2]; $2_1 = HEAP32[$0_1 + 52 >> 2]; HEAP32[$1_1 + 20 >> 2] = HEAP32[$0_1 + 48 >> 2]; HEAP32[$1_1 + 24 >> 2] = $2_1; $2_1 = HEAP32[$0_1 + 44 >> 2]; HEAP32[$1_1 + 12 >> 2] = HEAP32[$0_1 + 40 >> 2]; HEAP32[$1_1 + 16 >> 2] = $2_1; $2_1 = HEAP32[$0_1 + 36 >> 2]; HEAP32[$1_1 + 4 >> 2] = HEAP32[$0_1 + 32 >> 2]; HEAP32[$1_1 + 8 >> 2] = $2_1; HEAP32[$1_1 + 28 >> 2] = HEAP32[$0_1 + 28 >> 2]; HEAP32[$1_1 + 32 >> 2] = HEAP32[$0_1 + 24 >> 2]; HEAP32[$1_1 + 36 >> 2] = HEAP32[$0_1 + 20 >> 2]; HEAP32[$1_1 + 40 >> 2] = HEAP32[$0_1 + 16 >> 2]; HEAP32[$1_1 + 44 >> 2] = HEAP32[$0_1 + 12 >> 2]; HEAP32[$1_1 + 48 >> 2] = HEAP32[$0_1 + 8 >> 2]; HEAP32[$1_1 + 52 >> 2] = HEAP32[$0_1 + 4 >> 2]; HEAP32[$1_1 + 56 >> 2] = HEAP32[$0_1 >> 2]; $4_1 = $1_1 } global$0 = $0_1 - -64 | 0; return $4_1 } function $44($0_1, $1_1, $2_1) { var $3_1 = Math_fround(0), $4_1 = Math_fround(0); label$1: { label$2: { label$3: { if (($1_1 & -2) == 2) { $1_1 = HEAP32[$0_1 + 188 >> 2]; $3_1 = HEAPF32[$0_1 + 188 >> 2]; if (($1_1 | 0) == 2139156720 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242 | $3_1 == $3_1) { break label$3 } $1_1 = HEAP32[$0_1 + 196 >> 2]; $3_1 = HEAPF32[$0_1 + 196 >> 2]; if (($1_1 | 0) == 2139156720 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242 | $3_1 == $3_1) { break label$3 } break label$2 } $1_1 = HEAP32[$0_1 + 192 >> 2]; $3_1 = HEAPF32[$0_1 + 192 >> 2]; if (($1_1 | 0) == 2139156720 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242 | $3_1 == $3_1) { break label$3 } $3_1 = HEAPF32[$0_1 + 196 >> 2]; $1_1 = HEAP32[$0_1 + 196 >> 2]; if (($1_1 | 0) == 2139156720 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242) { break label$3 } if ($3_1 != $3_1) { break label$2 } } $3_1 = Math_fround(0); label$5: { label$6: { if (($1_1 | 0) == 2139156720) { break label$6 } if (($1_1 | 0) == 2140081935) { break label$1 } $0_1 = 4436; label$7: { if (($1_1 | 0) != 2141891242) { $3_1 = (wasm2js_scratch_store_i32(2, $1_1), wasm2js_scratch_load_f32()); if ($3_1 == $3_1) { break label$7 } $0_1 = 4444 } $3_1 = HEAPF32[$0_1 >> 2]; $4_1 = Math_fround(NaN); switch (HEAP32[$0_1 + 4 >> 2] - 1 | 0) { case 0: break label$1; case 1: break label$6; default: break label$5 } } $3_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($1_1 & 1073741824)) { break label$1 } } $4_1 = Math_fround(Math_fround($3_1 * $2_1) * Math_fround(.009999999776482582)) } return $4_1 } $3_1 = Math_fround(0) } return $3_1 } function $66($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0; if ($0_1) { $6_1 = global$0 - 32 | 0; global$0 = $6_1; $1_1 = HEAP32[$0_1 >> 2]; $3_1 = HEAP32[$1_1 + 552 >> 2]; if ($3_1) { $87($3_1, $1_1); HEAP32[$1_1 + 552 >> 2] = 0 } $3_1 = HEAP32[$1_1 + 556 >> 2]; $2_1 = HEAP32[$1_1 + 560 >> 2]; if (($3_1 | 0) != ($2_1 | 0)) { $2_1 = $2_1 - $3_1 >> 2; $4_1 = $2_1 >>> 0 <= 1 ? 1 : $2_1; $2_1 = 0; while (1) { HEAP32[HEAP32[($2_1 << 2) + $3_1 >> 2] + 552 >> 2] = 0; $2_1 = $2_1 + 1 | 0; if (($4_1 | 0) != ($2_1 | 0)) { continue } break } } HEAP32[$1_1 + 560 >> 2] = $3_1; $2_1 = $1_1 + 564 | 0; label$5: { if (HEAP32[$2_1 >> 2] == ($3_1 | 0)) { break label$5 } $2_1 = $36($6_1 + 12 | 0, 0, 0, $2_1); $4_1 = HEAP32[$1_1 + 556 >> 2]; $5_1 = HEAP32[$1_1 + 560 >> 2] - $4_1 | 0; $3_1 = HEAP32[$2_1 + 4 >> 2] - $5_1 | 0; wasm2js_memory_copy($3_1, $4_1, $5_1); $4_1 = HEAP32[$1_1 + 556 >> 2]; HEAP32[$1_1 + 556 >> 2] = $3_1; HEAP32[$2_1 + 4 >> 2] = $4_1; $5_1 = HEAP32[$1_1 + 560 >> 2]; HEAP32[$1_1 + 560 >> 2] = HEAP32[$2_1 + 8 >> 2]; HEAP32[$2_1 + 8 >> 2] = $5_1; $7_1 = HEAP32[$1_1 + 564 >> 2]; HEAP32[$1_1 + 564 >> 2] = HEAP32[$2_1 + 12 >> 2]; HEAP32[$2_1 >> 2] = $4_1; HEAP32[$2_1 + 12 >> 2] = $7_1; if (($4_1 | 0) != ($5_1 | 0)) { HEAP32[$2_1 + 8 >> 2] = $5_1 + (($4_1 - $5_1 | 0) + 3 & -4) } if (!$4_1) { break label$5 } $8($4_1); $3_1 = HEAP32[$1_1 + 556 >> 2] } if ($3_1) { HEAP32[$1_1 + 560 >> 2] = $3_1; $8($3_1) } $8($1_1); $1_1 = HEAP32[$0_1 + 8 >> 2]; HEAP32[$0_1 + 8 >> 2] = 0; if ($1_1) { FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2]]($1_1) } $1_1 = HEAP32[$0_1 + 4 >> 2]; HEAP32[$0_1 + 4 >> 2] = 0; if ($1_1) { FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2]]($1_1) } global$0 = $6_1 + 32 | 0; $8($0_1) } } function $65($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0; $3_1 = $0_1 + 4 | 0; $4_1 = ($3_1 + $1_1 | 0) - 1 & 0 - $1_1; $1_1 = HEAP32[$0_1 >> 2]; if ($4_1 + $2_1 >>> 0 <= ($1_1 + $0_1 | 0) - 4 >>> 0) { $5_1 = HEAP32[$0_1 + 4 >> 2]; HEAP32[$5_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2]; HEAP32[HEAP32[$0_1 + 8 >> 2] + 4 >> 2] = $5_1; if (($3_1 | 0) != ($4_1 | 0)) { $4_1 = $4_1 - $3_1 | 0; $5_1 = $0_1 - (HEAP32[$0_1 - 4 >> 2] & -2) | 0; $3_1 = $4_1 + HEAP32[$5_1 >> 2] | 0; HEAP32[$5_1 >> 2] = $3_1; HEAP32[($5_1 + ($3_1 & -4) | 0) - 4 >> 2] = $3_1; $0_1 = $0_1 + $4_1 | 0; $1_1 = $1_1 - $4_1 | 0; HEAP32[$0_1 >> 2] = $1_1 } label$3: { if ($2_1 + 24 >>> 0 <= $1_1 >>> 0) { $3_1 = ($0_1 + $2_1 | 0) + 8 | 0; $1_1 = ($1_1 - $2_1 | 0) - 8 | 0; HEAP32[$3_1 >> 2] = $1_1; HEAP32[($3_1 + ($1_1 & -4) | 0) - 4 >> 2] = $1_1 | 1; $4_1 = HEAP32[$3_1 >> 2] - 8 | 0; label$5: { if ($4_1 >>> 0 <= 127) { $1_1 = ($4_1 >>> 3 | 0) - 1 | 0; break label$5 } $5_1 = Math_clz32($4_1); $1_1 = (($4_1 >>> 29 - $5_1 ^ 4) - ($5_1 << 2) | 0) + 110 | 0; if ($4_1 >>> 0 <= 4095) { break label$5 } $1_1 = (($4_1 >>> 30 - $5_1 ^ 2) - ($5_1 << 1) | 0) + 71 | 0; $1_1 = $1_1 >>> 0 >= 63 ? 63 : $1_1 } $4_1 = $1_1 << 4; HEAP32[$3_1 + 4 >> 2] = $4_1 + 6144; $4_1 = $4_1 + 6152 | 0; HEAP32[$3_1 + 8 >> 2] = HEAP32[$4_1 >> 2]; HEAP32[$4_1 >> 2] = $3_1; HEAP32[HEAP32[$3_1 + 8 >> 2] + 4 >> 2] = $3_1; $4_1 = HEAP32[1794]; $5_1 = HEAP32[1795]; $3_1 = $1_1 & 31; if (($1_1 & 63) >>> 0 >= 32) { $1_1 = 1 << $3_1; $3_1 = 0 } else { $6_1 = 1 << $3_1; $1_1 = $6_1 - 1 & 1 >>> 32 - $3_1; $3_1 = $6_1 } HEAP32[1794] = $3_1 | $4_1; HEAP32[1795] = $1_1 | $5_1; $1_1 = $2_1 + 8 | 0; HEAP32[$0_1 >> 2] = $1_1; HEAP32[(($1_1 & -4) + $0_1 | 0) - 4 >> 2] = $1_1; break label$3 } HEAP32[($0_1 + $1_1 | 0) - 4 >> 2] = $1_1 } $0_1 = $0_1 + 4 | 0 } else { $0_1 = 0 } return $0_1 } function $138($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0, $2_1 = 0, $3_1 = 0; $3_1 = global$0 - 608 | 0; global$0 = $3_1; $1_1 = HEAP32[$0_1 + 4 >> 2]; HEAP32[$0_1 + 4 >> 2] = 0; if ($1_1) { FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2]]($1_1) } $1_1 = HEAP32[$0_1 + 8 >> 2]; HEAP32[$0_1 + 8 >> 2] = 0; if ($1_1) { FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2]]($1_1) } label$3: { $0_1 = HEAP32[$0_1 >> 2]; if (HEAP32[$0_1 + 560 >> 2] == HEAP32[$0_1 + 556 >> 2]) { if (HEAP32[$0_1 + 552 >> 2]) { break label$3 } $1_1 = $115($3_1 + 20 | 0, HEAP32[$0_1 + 568 >> 2]); $2_1 = HEAP32[$1_1 + 4 >> 2]; HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2]; HEAP32[$0_1 + 4 >> 2] = $2_1; $2_1 = HEAP32[$1_1 + 20 >> 2]; HEAP32[$0_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2]; HEAP32[$0_1 + 20 >> 2] = $2_1; $2_1 = HEAP32[$1_1 + 12 >> 2]; HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2]; HEAP32[$0_1 + 12 >> 2] = $2_1; wasm2js_memory_copy($0_1 + 24 | 0, $1_1 + 24 | 0, 204); wasm2js_memory_copy($0_1 + 228 | 0, $1_1 + 228 | 0, 328); $2_1 = HEAP32[$0_1 + 556 >> 2]; if ($2_1) { HEAP32[$0_1 + 560 >> 2] = $2_1; $8($2_1) } HEAP32[$0_1 + 556 >> 2] = HEAP32[$1_1 + 556 >> 2]; HEAP32[$0_1 + 560 >> 2] = HEAP32[$1_1 + 560 >> 2]; HEAP32[$0_1 + 564 >> 2] = HEAP32[$1_1 + 564 >> 2]; HEAP32[$0_1 + 584 >> 2] = HEAP32[$1_1 + 584 >> 2]; $2_1 = HEAP32[$1_1 + 580 >> 2]; HEAP32[$0_1 + 576 >> 2] = HEAP32[$1_1 + 576 >> 2]; HEAP32[$0_1 + 580 >> 2] = $2_1; $2_1 = HEAP32[$1_1 + 572 >> 2]; HEAP32[$0_1 + 568 >> 2] = HEAP32[$1_1 + 568 >> 2]; HEAP32[$0_1 + 572 >> 2] = $2_1; global$0 = $3_1 + 608 | 0; return } HEAP32[$3_1 + 16 >> 2] = 3333; $14($0_1, $3_1 + 16 | 0); $13(); wasm2js_trap() } HEAP32[$3_1 >> 2] = 2079; $14($0_1, $3_1); $13(); wasm2js_trap() } function $203() { label$1: { label$2: { switch (Atomics.compareExchange(HEAP32, 2288, 0, 1) | 0) { case 0: global$1 = 1024; wasm2js_memory_fill(1024, 0, 20); wasm2js_memory_init(0, 1056, 0, 4194); wasm2js_memory_fill(5250, 0, 25); wasm2js_memory_init(1, 5275, 0, 33); wasm2js_memory_fill(5308, 0, 25); wasm2js_memory_init(2, 5333, 0, 33); wasm2js_memory_fill(5366, 0, 25); wasm2js_memory_init(3, 5391, 0, 42); wasm2js_memory_fill(5433, 0, 25); wasm2js_memory_init(4, 5458, 0, 14); wasm2js_memory_fill(5472, 0, 35); wasm2js_memory_init(5, 5507, 0, 33); wasm2js_memory_fill(5540, 0, 25); wasm2js_memory_init(6, 5565, 0, 51); wasm2js_memory_fill(5616, 0, 36); wasm2js_memory_init(7, 5652, 0, 1); wasm2js_memory_fill(5653, 0, 39); wasm2js_memory_init(8, 5692, 0, 8); wasm2js_memory_fill(5700, 0, 60); wasm2js_memory_init(9, 5760, 0, 92); wasm2js_memory_fill(5852, 0, 112); wasm2js_memory_init(10, 5964, 0, 93); wasm2js_memory_fill(6057, 0, 63); wasm2js_memory_init(11, 6120, 0, 4); wasm2js_memory_fill(6128, 0, 3024); Atomics.store(HEAP32, 2288, 2); Atomics.notify(HEAP32, 2288, 4294967295); break label$1; case 1: break label$2; default: break label$1 } } wasm2js_atomic_wait_i32(0, 9152, 1, -1, -1) | 0 } wasm2js_data_drop(0); wasm2js_data_drop(1); wasm2js_data_drop(2); wasm2js_data_drop(3); wasm2js_data_drop(4); wasm2js_data_drop(5); wasm2js_data_drop(6); wasm2js_data_drop(7); wasm2js_data_drop(8); wasm2js_data_drop(9); wasm2js_data_drop(10); wasm2js_data_drop(11) } function $98($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = 0; if ($2_1 >>> 0 >= 512) { wasm2js_memory_fill($0_1, $1_1 << 24 >> 24, $2_1); return } label$2: { if (!$2_1) { break label$2 } HEAP8[$0_1 | 0] = $1_1; $3_1 = $0_1 + $2_1 | 0; HEAP8[$3_1 - 1 | 0] = $1_1; if ($2_1 >>> 0 < 3) { break label$2 } HEAP8[$0_1 + 2 | 0] = $1_1; HEAP8[$0_1 + 1 | 0] = $1_1; HEAP8[$3_1 - 3 | 0] = $1_1; HEAP8[$3_1 - 2 | 0] = $1_1; if ($2_1 >>> 0 < 7) { break label$2 } HEAP8[$0_1 + 3 | 0] = $1_1; HEAP8[$3_1 - 4 | 0] = $1_1; if ($2_1 >>> 0 < 9) { break label$2 } $3_1 = 0 - $0_1 & 3; $4_1 = $3_1 + $0_1 | 0; $0_1 = Math_imul($1_1 & 255, 16843009); HEAP32[$4_1 >> 2] = $0_1; $2_1 = $2_1 - $3_1 & -4; $1_1 = $2_1 + $4_1 | 0; HEAP32[$1_1 - 4 >> 2] = $0_1; if ($2_1 >>> 0 < 9) { break label$2 } HEAP32[$4_1 + 8 >> 2] = $0_1; HEAP32[$4_1 + 4 >> 2] = $0_1; HEAP32[$1_1 - 8 >> 2] = $0_1; HEAP32[$1_1 - 12 >> 2] = $0_1; if ($2_1 >>> 0 < 25) { break label$2 } HEAP32[$4_1 + 24 >> 2] = $0_1; HEAP32[$4_1 + 20 >> 2] = $0_1; HEAP32[$4_1 + 16 >> 2] = $0_1; HEAP32[$4_1 + 12 >> 2] = $0_1; HEAP32[$1_1 - 16 >> 2] = $0_1; HEAP32[$1_1 - 20 >> 2] = $0_1; HEAP32[$1_1 - 24 >> 2] = $0_1; HEAP32[$1_1 - 28 >> 2] = $0_1; $1_1 = $2_1; $2_1 = $4_1 & 4 | 24; $1_1 = $1_1 - $2_1 | 0; if ($1_1 >>> 0 < 32) { break label$2 } $0_1 = __wasm_i64_mul($0_1, 0, 1, 1); $3_1 = i64toi32_i32$HIGH_BITS; $2_1 = $2_1 + $4_1 | 0; while (1) { HEAP32[$2_1 + 24 >> 2] = $0_1; HEAP32[$2_1 + 28 >> 2] = $3_1; HEAP32[$2_1 + 16 >> 2] = $0_1; HEAP32[$2_1 + 20 >> 2] = $3_1; HEAP32[$2_1 + 8 >> 2] = $0_1; HEAP32[$2_1 + 12 >> 2] = $3_1; HEAP32[$2_1 >> 2] = $0_1; HEAP32[$2_1 + 4 >> 2] = $3_1; $2_1 = $2_1 + 32 | 0; $1_1 = $1_1 - 32 | 0; if ($1_1 >>> 0 > 31) { continue } break } } } function $8($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0; if ($0_1) { if (Atomics.exchange(HEAP8, 0 + 6128 | 0, 1)) { while (1) { if (HEAPU8[6128]) { continue } if (Atomics.exchange(HEAP8, 0 + 6128 | 0, 1)) { continue } break } } $1_1 = $0_1 - 4 | 0; $4_1 = HEAP32[$1_1 >> 2]; $2_1 = $4_1; $3_1 = $1_1; $5_1 = HEAP32[$0_1 - 8 >> 2]; $0_1 = $5_1 & -2; if (($0_1 | 0) != ($5_1 | 0)) { $3_1 = $1_1 - $0_1 | 0; $2_1 = HEAP32[$3_1 + 4 >> 2]; HEAP32[$2_1 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2]; HEAP32[HEAP32[$3_1 + 8 >> 2] + 4 >> 2] = $2_1; $2_1 = $0_1 + $4_1 | 0 } $0_1 = $1_1 + $4_1 | 0; $1_1 = HEAP32[$0_1 >> 2]; if (($1_1 | 0) != HEAP32[($0_1 + $1_1 | 0) - 4 >> 2]) { $4_1 = HEAP32[$0_1 + 4 >> 2]; HEAP32[$4_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2]; HEAP32[HEAP32[$0_1 + 8 >> 2] + 4 >> 2] = $4_1; $2_1 = $1_1 + $2_1 | 0 } HEAP32[$3_1 >> 2] = $2_1; HEAP32[(($2_1 & -4) + $3_1 | 0) - 4 >> 2] = $2_1 | 1; $1_1 = HEAP32[$3_1 >> 2] - 8 | 0; label$6: { if ($1_1 >>> 0 <= 127) { $0_1 = ($1_1 >>> 3 | 0) - 1 | 0; break label$6 } $2_1 = Math_clz32($1_1); $0_1 = (($1_1 >>> 29 - $2_1 ^ 4) - ($2_1 << 2) | 0) + 110 | 0; if ($1_1 >>> 0 <= 4095) { break label$6 } $0_1 = (($1_1 >>> 30 - $2_1 ^ 2) - ($2_1 << 1) | 0) + 71 | 0; $0_1 = $0_1 >>> 0 >= 63 ? 63 : $0_1 } $1_1 = $0_1 << 4; HEAP32[$3_1 + 4 >> 2] = $1_1 + 6144; $1_1 = $1_1 + 6152 | 0; HEAP32[$3_1 + 8 >> 2] = HEAP32[$1_1 >> 2]; HEAP32[$1_1 >> 2] = $3_1; HEAP32[HEAP32[$3_1 + 8 >> 2] + 4 >> 2] = $3_1; $1_1 = HEAP32[1794]; $2_1 = HEAP32[1795]; $3_1 = $0_1 & 31; if (($0_1 & 63) >>> 0 >= 32) { $0_1 = 1 << $3_1; $4_1 = 0 } else { $4_1 = 1 << $3_1; $0_1 = $4_1 - 1 & 1 >>> 32 - $3_1 } HEAP32[1794] = $4_1 | $1_1; HEAP32[1795] = $0_1 | $2_1; Atomics.store(HEAP8, 6128, 0) } } function $72($0_1, $1_1) { var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0; $2_1 = global$0 - 320 | 0; global$0 = $2_1; wasm2js_memory_fill($2_1, 0, 288); HEAP32[$2_1 + 16 >> 2] = 2143289344; HEAP32[$2_1 + 20 >> 2] = 2143289344; wasm2js_memory_fill($2_1 + 24 | 0, 0, 49); HEAP32[$2_1 + 80 >> 2] = 2143289344; $4_1 = $2_1 + 288 | 0; $3_1 = $2_1 + 96 | 0; while (1) { HEAP32[$3_1 + 16 >> 2] = -1082130432; HEAP32[$3_1 + 20 >> 2] = -1082130432; HEAP32[$3_1 + 8 >> 2] = 0; HEAP32[$3_1 + 12 >> 2] = 0; HEAP32[$3_1 >> 2] = -1082130432; HEAP32[$3_1 + 4 >> 2] = -1082130432; $3_1 = $3_1 + 24 | 0; if (($4_1 | 0) != ($3_1 | 0)) { continue } break } HEAP32[$2_1 + 312 >> 2] = -1082130432; HEAP32[$2_1 + 316 >> 2] = -1082130432; HEAP32[$2_1 + 304 >> 2] = 0; HEAP32[$2_1 + 308 >> 2] = 0; HEAP32[$2_1 + 296 >> 2] = -1082130432; HEAP32[$2_1 + 300 >> 2] = -1082130432; HEAP32[$2_1 + 288 >> 2] = 2143289344; HEAP32[$2_1 + 292 >> 2] = 2143289344; wasm2js_memory_copy($0_1 + 228 | 0, $2_1, 320); HEAP32[$0_1 + 244 >> 2] = 0; HEAP32[$0_1 + 248 >> 2] = 0; HEAP8[$0_1 + 4 | 0] = HEAPU8[$0_1 + 4 | 0] | 1; $3_1 = HEAP32[$0_1 + 556 >> 2]; $5_1 = HEAP32[$0_1 + 560 >> 2]; if (($3_1 | 0) != ($5_1 | 0)) { while (1) { $4_1 = HEAP32[$3_1 >> 2]; if (HEAP32[$4_1 + 552 >> 2] != ($0_1 | 0)) { $6_1 = HEAP32[$0_1 + 568 >> 2]; $4_1 = $121(HEAP32[$6_1 >> 2], HEAPU8[$6_1 + 8 | 0], $4_1, $0_1, $7_1, $1_1); HEAP32[$3_1 >> 2] = $4_1; HEAP32[$4_1 + 552 >> 2] = $0_1; $4_1 = HEAP32[$3_1 >> 2] } $72($4_1, $1_1); $7_1 = $7_1 + 1 | 0; $3_1 = $3_1 + 4 | 0; if (($5_1 | 0) != ($3_1 | 0)) { continue } break } } global$0 = $2_1 + 320 | 0 } function $236($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0, $4_1 = 0; $2_1 = global$0 - 320 | 0; global$0 = $2_1; $0_1 = HEAP32[$0_1 >> 2]; label$1: { if (HEAP32[$0_1 + 560 >> 2] == HEAP32[$0_1 + 556 >> 2]) { break label$1 } $3_1 = HEAP32[$1_1 >> 2]; $1_1 = HEAP32[$3_1 + 552 >> 2]; if (!$87($0_1, $3_1)) { break label$1 } if (($0_1 | 0) == ($1_1 | 0)) { wasm2js_memory_fill($2_1, 0, 288); HEAP32[$2_1 + 16 >> 2] = 2143289344; HEAP32[$2_1 + 20 >> 2] = 2143289344; wasm2js_memory_fill($2_1 + 24 | 0, 0, 49); HEAP32[$2_1 + 80 >> 2] = 2143289344; $4_1 = $2_1 + 288 | 0; $1_1 = $2_1 + 96 | 0; while (1) { HEAP32[$1_1 + 16 >> 2] = -1082130432; HEAP32[$1_1 + 20 >> 2] = -1082130432; HEAP32[$1_1 + 8 >> 2] = 0; HEAP32[$1_1 + 12 >> 2] = 0; HEAP32[$1_1 >> 2] = -1082130432; HEAP32[$1_1 + 4 >> 2] = -1082130432; $1_1 = $1_1 + 24 | 0; if (($4_1 | 0) != ($1_1 | 0)) { continue } break } HEAP32[$2_1 + 312 >> 2] = -1082130432; HEAP32[$2_1 + 316 >> 2] = -1082130432; HEAP32[$2_1 + 304 >> 2] = 0; HEAP32[$2_1 + 308 >> 2] = 0; HEAP32[$2_1 + 296 >> 2] = -1082130432; HEAP32[$2_1 + 300 >> 2] = -1082130432; HEAP32[$2_1 + 288 >> 2] = 2143289344; HEAP32[$2_1 + 292 >> 2] = 2143289344; wasm2js_memory_copy($3_1 + 228 | 0, $2_1, 320); HEAP32[$3_1 + 552 >> 2] = 0 } while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } global$0 = $2_1 + 320 | 0 } function $57($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0; if (!(HEAPU8[$0_1 | 0] & 15)) { return $16($0_1 + 4 | 0, 0, 10) & 10 } $6_1 = HEAP32[$0_1 >> 2]; label$2: { label$4: { label$5: { $2_1 = global$3; $5_1 = HEAP32[$2_1 + 24 >> 2]; $1_1 = HEAP32[$0_1 + 4 >> 2]; $3_1 = $1_1 & 1073741823; if (($5_1 | 0) != ($3_1 | 0)) { break label$5 } if (!(!($6_1 & 8) | HEAP32[$0_1 + 20 >> 2] >= 0)) { HEAP32[$0_1 + 20 >> 2] = 0; $1_1 = $1_1 & 1073741824; break label$4 } if (($6_1 & 3) != 1) { break label$5 } $4_1 = 6; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1 >>> 0 > 2147483646) { break label$2 } HEAP32[$0_1 + 20 >> 2] = $1_1 + 1; $4_1 = 0; break label$2 } $4_1 = 56; if (($3_1 | 0) == 1073741823) { break label$2 } label$7: { if ($3_1 | ($6_1 & 4 ? 0 : $1_1)) { break label$7 } $7_1 = $0_1 + 4 | 0; if ($6_1 & 128) { if (!HEAP32[$2_1 + 80 >> 2]) { HEAP32[$2_1 + 80 >> 2] = -12 } $3_1 = HEAP32[$0_1 + 8 >> 2]; HEAP32[$2_1 + 84 >> 2] = $0_1 + 16; $5_1 = $3_1 ? $5_1 | -2147483648 : $5_1 } if (($16($7_1, $1_1, $1_1 & 1073741824 | $5_1) | 0) == ($1_1 | 0)) { break label$4 } HEAP32[$2_1 + 84 >> 2] = 0; if (($6_1 & 12) != 12) { break label$7 } if (HEAP32[$0_1 + 8 >> 2]) { break label$2 } } $4_1 = 10; break label$2 } $3_1 = HEAP32[$2_1 + 76 >> 2]; $5_1 = $2_1 + 76 | 0; HEAP32[$0_1 + 12 >> 2] = $5_1; HEAP32[$0_1 + 16 >> 2] = $3_1; $4_1 = $0_1 + 16 | 0; if (($3_1 | 0) != ($5_1 | 0)) { HEAP32[$3_1 - 4 >> 2] = $4_1 } HEAP32[$2_1 + 76 >> 2] = $4_1; $4_1 = 0; HEAP32[$2_1 + 84 >> 2] = 0; if (!$1_1) { break label$2 } HEAP32[$0_1 + 20 >> 2] = 0; $4_1 = 62 } return $4_1 } function $93($0_1, $1_1, $2_1, $3_1) { label$1: { switch ($1_1 - 9 | 0) { case 0: $1_1 = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $1_1 + 4; HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2]; return; case 6: $1_1 = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $1_1 + 4; $1_1 = HEAP16[$1_1 >> 1]; HEAP32[$0_1 >> 2] = $1_1; HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31; return; case 7: $1_1 = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $1_1 + 4; HEAP32[$0_1 >> 2] = HEAPU16[$1_1 >> 1]; HEAP32[$0_1 + 4 >> 2] = 0; return; case 8: $1_1 = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $1_1 + 4; $1_1 = HEAP8[$1_1 | 0]; HEAP32[$0_1 >> 2] = $1_1; HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31; return; case 9: $1_1 = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $1_1 + 4; HEAP32[$0_1 >> 2] = HEAPU8[$1_1 | 0]; HEAP32[$0_1 + 4 >> 2] = 0; return; case 16: $1_1 = HEAP32[$2_1 >> 2] + 7 & -8; HEAP32[$2_1 >> 2] = $1_1 + 8; HEAPF64[$0_1 >> 3] = HEAPF64[$1_1 >> 3]; return; case 17: FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1); default: return; case 1: case 4: case 14: $1_1 = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $1_1 + 4; $1_1 = HEAP32[$1_1 >> 2]; HEAP32[$0_1 >> 2] = $1_1; HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31; return; case 2: case 5: case 11: case 15: $1_1 = HEAP32[$2_1 >> 2]; HEAP32[$2_1 >> 2] = $1_1 + 4; HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2]; HEAP32[$0_1 + 4 >> 2] = 0; return; case 3: case 10: case 12: case 13: break label$1 } } $1_1 = HEAP32[$2_1 >> 2] + 7 & -8; HEAP32[$2_1 >> 2] = $1_1 + 8; $2_1 = HEAP32[$1_1 + 4 >> 2]; HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2]; HEAP32[$0_1 + 4 >> 2] = $2_1 } function $174($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0; $3_1 = global$0 - 32 | 0; global$0 = $3_1; $4_1 = HEAP32[$0_1 + 28 >> 2]; HEAP32[$3_1 + 16 >> 2] = $4_1; $5_1 = HEAP32[$0_1 + 20 >> 2]; HEAP32[$3_1 + 28 >> 2] = $2_1; HEAP32[$3_1 + 24 >> 2] = $1_1; $1_1 = $5_1 - $4_1 | 0; HEAP32[$3_1 + 20 >> 2] = $1_1; $5_1 = $1_1 + $2_1 | 0; $8_1 = 2; $1_1 = $3_1 + 16 | 0; label$1: { while (1) { label$3: { label$4: { label$5: { if (!$116(fimport$33(HEAP32[$0_1 + 60 >> 2], $1_1 | 0, $8_1 | 0, $3_1 + 12 | 0) | 0)) { $6_1 = HEAP32[$3_1 + 12 >> 2]; if (($6_1 | 0) == ($5_1 | 0)) { break label$5 } if (($6_1 | 0) >= 0) { break label$4 } break label$3 } if (($5_1 | 0) != -1) { break label$3 } } $1_1 = HEAP32[$0_1 + 44 >> 2]; HEAP32[$0_1 + 28 >> 2] = $1_1; HEAP32[$0_1 + 20 >> 2] = $1_1; HEAP32[$0_1 + 16 >> 2] = $1_1 + HEAP32[$0_1 + 48 >> 2]; $0_1 = $2_1; break label$1 } $7_1 = HEAP32[$1_1 + 4 >> 2]; $9_1 = $7_1 >>> 0 < $6_1 >>> 0; $4_1 = ($9_1 << 3) + $1_1 | 0; $7_1 = $6_1 - ($9_1 ? $7_1 : 0) | 0; HEAP32[$4_1 >> 2] = $7_1 + HEAP32[$4_1 >> 2]; $1_1 = ($9_1 ? 12 : 4) + $1_1 | 0; HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - $7_1; $5_1 = $5_1 - $6_1 | 0; $8_1 = $8_1 - $9_1 | 0; $1_1 = $4_1; continue } break } HEAP32[$0_1 + 28 >> 2] = 0; HEAP32[$0_1 + 16 >> 2] = 0; HEAP32[$0_1 + 20 >> 2] = 0; HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 32; $0_1 = 0; if (($8_1 | 0) == 2) { break label$1 } $0_1 = $2_1 - HEAP32[$1_1 + 4 >> 2] | 0 } global$0 = $3_1 + 32 | 0; return $0_1 | 0 } function $178($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0; $2_1 = global$0 - 96 | 0; global$0 = $2_1; HEAP32[$2_1 >> 2] = $0_1; $3_1 = global$0 - 16 | 0; global$0 = $3_1; HEAP32[$3_1 + 12 >> 2] = $2_1; $0_1 = global$0 - 144 | 0; global$0 = $0_1; wasm2js_memory_copy($0_1, 5616, 144); $5_1 = $2_1 + 16 | 0; $1_1 = $5_1; HEAP32[$0_1 + 44 >> 2] = $1_1; HEAP32[$0_1 + 20 >> 2] = $1_1; $4_1 = -2 - $1_1 | 0; $4_1 = $4_1 >>> 0 >= 2147483647 ? 2147483647 : $4_1; HEAP32[$0_1 + 48 >> 2] = $4_1; $1_1 = $1_1 + $4_1 | 0; HEAP32[$0_1 + 28 >> 2] = $1_1; HEAP32[$0_1 + 16 >> 2] = $1_1; $96($0_1, 2234, $2_1, 0, 0); if ($4_1) { $1_1 = HEAP32[$0_1 + 20 >> 2]; HEAP8[$1_1 - (($1_1 | 0) == HEAP32[$0_1 + 16 >> 2]) | 0] = 0 } global$0 = $0_1 + 144 | 0; global$0 = $3_1 + 16 | 0; label$2: { label$3: { label$4: { $0_1 = $5_1; if (!($0_1 & 3)) { break label$4 } $1_1 = 0; if (!HEAPU8[$5_1 | 0]) { break label$2 } while (1) { $0_1 = $0_1 + 1 | 0; if (!($0_1 & 3)) { break label$4 } if (HEAPU8[$0_1 | 0]) { continue } break } break label$3 } while (1) { $1_1 = $0_1; $0_1 = $0_1 + 4 | 0; $3_1 = HEAP32[$1_1 >> 2]; if (!(($3_1 ^ -1) & $3_1 - 16843009 & -2139062144)) { continue } break } while (1) { $0_1 = $1_1; $1_1 = $0_1 + 1 | 0; if (HEAPU8[$0_1 | 0]) { continue } break } } $1_1 = $0_1 - $5_1 | 0 } $0_1 = $1_1 + 1 | 0; $1_1 = $29($0_1); if ($1_1) { $0_1 = $23($1_1, $5_1, $0_1) } else { $0_1 = 0 } global$0 = $2_1 + 96 | 0; return $0_1 | 0 } function $167($0_1, $1_1, $2_1, $3_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; $3_1 = $3_1 | 0; var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0; $4_1 = global$0 - 192 | 0; global$0 = $4_1; label$1: { if ($3_1) { Atomics.store(HEAP32, $4_1 + 8 >> 2, 0); HEAP32[$4_1 + 184 >> 2] = 0; $5_1 = $4_1; break label$1 } $5_1 = $29(192); if ($5_1) { Atomics.store(HEAP32, $5_1 + 8 >> 2, 0); HEAP32[$5_1 + 184 >> 2] = 0; HEAP32[$5_1 + 4 >> 2] = 0 } } $7_1 = $5_1; HEAP32[$7_1 + 16 >> 2] = $1_1; HEAP32[$7_1 + 4 >> 2] = $0_1; HEAP32[$7_1 >> 2] = -2129657856; HEAP32[$7_1 + 188 >> 2] = 1 - $3_1; $0_1 = 0; if (($1_1 | 0) > 0) { while (1) { $5_1 = $0_1 + 1 | 0; $9_1 = ($5_1 << 3) + $7_1 | 0; $0_1 = ($0_1 << 3) + $2_1 | 0; $10_1 = HEAP32[$0_1 + 4 >> 2]; HEAP32[$9_1 + 16 >> 2] = HEAP32[$0_1 >> 2]; HEAP32[$9_1 + 20 >> 2] = $10_1; $0_1 = $5_1; if (($1_1 | 0) != ($0_1 | 0)) { continue } break } } label$5: { if ($3_1) { $100($4_1); label$7: { if (Atomics.load(HEAP32, $4_1 + 8 >> 2)) { break label$7 } $6_1 = +fimport$5(); $8_1 = $6_1 + Infinity; if (!($6_1 < $8_1)) { break label$7 } $0_1 = $4_1 + 8 | 0; while (1) { $34($0_1, 0, $8_1 - $6_1); $1_1 = Atomics.load(HEAP32, $0_1 >> 2); $6_1 = +fimport$5(); if ($1_1) { break label$7 } if ($6_1 < $8_1) { continue } break } } $6_1 = HEAPF64[$4_1 + 176 >> 3]; break label$5 } $100($7_1); $6_1 = 0 } global$0 = $4_1 + 192 | 0; return +$6_1 } function $39($0_1) { var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = Math_fround(0), $9_1 = 0; $5_1 = global$0 - 16 | 0; global$0 = $5_1; $1_1 = HEAP32[$0_1 + 12 >> 2]; label$1: { if ($1_1) { $8_1 = HEAPF32[$0_1 + 520 >> 2]; $2_1 = HEAPF32[$0_1 + 516 >> 2]; label$3: { if (HEAPU8[$0_1 + 4 | 0] & 32) { $2_1 = Math_fround(FUNCTION_TABLE[$1_1 | 0]($0_1, $2_1, $8_1, 0)); break label$3 } $2_1 = Math_fround(FUNCTION_TABLE[$1_1 | 0]($0_1, $2_1, $8_1)) } if ($2_1 == $2_1) { break label$1 } HEAP32[$5_1 >> 2] = 3441; $14($0_1, $5_1); $13(); wasm2js_trap() } label$5: { label$6: { $6_1 = HEAP32[$0_1 + 556 >> 2]; $1_1 = HEAP32[$0_1 + 560 >> 2]; if (($6_1 | 0) != ($1_1 | 0)) { $1_1 = $1_1 - $6_1 >> 2; $9_1 = $1_1 >>> 0 <= 1 ? 1 : $1_1; while (1) { $4_1 = HEAP32[($7_1 << 2) + $6_1 >> 2]; if (!HEAP32[$4_1 + 548 >> 2]) { $1_1 = HEAP32[$4_1 + 24 >> 2]; if (($1_1 & 196608) != 131072) { $1_1 = $1_1 >>> 13 & 7; if (!$1_1) { $1_1 = HEAP32[$0_1 + 24 >> 2] >>> 10 & 7 } if (HEAPU8[$4_1 + 4 | 0] & 2 | (HEAPU8[$0_1 + 24 | 0] & 8 ? ($1_1 | 0) == 5 : 0)) { break label$6 } $3_1 = $3_1 ? $3_1 : $4_1 } $7_1 = $7_1 + 1 | 0; if (($9_1 | 0) != ($7_1 | 0)) { continue } } break } if ($3_1) { break label$5 } } $2_1 = HEAPF32[$0_1 + 520 >> 2]; break label$1 } $3_1 = $4_1 } $2_1 = Math_fround($39($3_1) + HEAPF32[$3_1 + 232 >> 2]) } global$0 = $5_1 + 16 | 0; return $2_1 } function $30($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) { var $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0, $9_1 = Math_fround(0); $6_1 = (HEAP32[($1_1 << 2) + 4420 >> 2] << 2) + $0_1 | 0; $7_1 = HEAPF32[$6_1 + 216 >> 2]; label$1: { label$2: { $6_1 = HEAP32[$6_1 + 216 >> 2]; label$3: { if (($6_1 | 0) == 2139156720) { break label$3 } if (($6_1 | 0) == 2140081935) { break label$2 } $8_1 = 4436; label$4: { if (($6_1 | 0) != 2141891242) { if ($7_1 == $7_1) { break label$4 } $8_1 = 4444 } $9_1 = HEAPF32[$8_1 >> 2]; $7_1 = Math_fround(NaN); switch (HEAP32[$8_1 + 4 >> 2] - 1 | 0) { case 0: break label$2; case 1: break label$3; default: break label$1 } } $9_1 = (wasm2js_scratch_store_i32(2, ($6_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($6_1 & 1073741824)) { break label$2 } } $7_1 = Math_fround(Math_fround($9_1 * $2_1) * Math_fround(.009999999776482582)); break label$1 } $7_1 = $9_1 } $3_1 = Math_fround($7_1 + Math_fround($2($0_1, $1_1, $3_1) + $5($0_1, $1_1, $3_1))); label$6: { label$7: { label$8: { switch (HEAP32[$4_1 >> 2]) { case 1: case 2: $2_1 = HEAPF32[$5_1 >> 2]; $3_1 = $3_1 != $3_1 ? $2_1 : $2_1 < $3_1 ? $2_1 : $3_1; break label$7; case 0: break label$8; default: break label$6 } } if ($3_1 != $3_1) { break label$6 } HEAP32[$4_1 >> 2] = 2 } HEAPF32[$5_1 >> 2] = $3_1 } } function $270($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0); $0_1 = HEAP32[$0_1 >> 2]; $3_1 = Math_fround($2_1); $4_1 = 2143289344; label$2: { if (((wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$2 } $4_1 = 2140081935; if ($3_1 < Math_fround(10842021724855044e-35) & $3_1 > Math_fround(-10842021724855044e-35) | $3_1 == Math_fround(0)) { break label$2 } $5_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $4_1 = (wasm2js_scratch_store_f32($3_1 > Math_fround(0x1fffffe0000000000) ? $5_1 : $3_1 < Math_fround(-0x1fffffe0000000000) ? $5_1 : $3_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $1_1 = ($1_1 << 2) + $0_1 | 0; label$1: { if (($4_1 | 0) == HEAP32[$1_1 + 152 >> 2]) { break label$1 } HEAP32[$1_1 + 152 >> 2] = $4_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $266($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0); $0_1 = HEAP32[$0_1 >> 2]; $3_1 = Math_fround($2_1); $4_1 = 2143289344; label$2: { if (((wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$2 } $4_1 = 2140081935; if ($3_1 < Math_fround(10842021724855044e-35) & $3_1 > Math_fround(-10842021724855044e-35) | $3_1 == Math_fround(0)) { break label$2 } $5_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $4_1 = (wasm2js_scratch_store_f32($3_1 > Math_fround(0x1fffffe0000000000) ? $5_1 : $3_1 < Math_fround(-0x1fffffe0000000000) ? $5_1 : $3_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $1_1 = ($1_1 << 2) + $0_1 | 0; label$1: { if (($4_1 | 0) == HEAP32[$1_1 + 188 >> 2]) { break label$1 } HEAP32[$1_1 + 188 >> 2] = $4_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $117() { fimport$37(7244, 3099); fimport$36(7245, 2512, 1, 1, 0); fimport$3(7246, 2172, 1, -128, 127); fimport$3(7247, 2165, 1, -128, 127); fimport$3(7248, 2163, 1, 0, 255); fimport$3(7249, 1319, 2, -32768, 32767); fimport$3(7250, 1310, 2, 0, 65535); fimport$3(7251, 1348, 4, -2147483648, 2147483647); fimport$3(7252, 1339, 4, 0, -1); fimport$3(7253, 2691, 4, -2147483648, 2147483647); fimport$3(7254, 2682, 4, 0, -1); $89(7255, 1809, -2147483648, 2147483647); $89(7256, 1808, 0, -1); fimport$13(7257, 1802, 4); fimport$13(7258, 3047, 8); fimport$14(7259, 2709); fimport$14(7260, 4003); fimport$9(7261, 4, 2696); fimport$9(7262, 2, 2721); fimport$9(7263, 4, 2736); fimport$35(7264, 2517); fimport$1(7265, 0, 3934); fimport$1(7266, 0, 4036); fimport$1(7267, 1, 3964); fimport$1(7268, 2, 3499); fimport$1(7269, 3, 3530); fimport$1(7270, 4, 3570); fimport$1(7271, 5, 3599); fimport$1(7272, 4, 4073); fimport$1(7273, 5, 4103); fimport$1(7266, 0, 3701); fimport$1(7267, 1, 3668); fimport$1(7268, 2, 3767); fimport$1(7269, 3, 3733); fimport$1(7270, 4, 3901); fimport$1(7271, 5, 3867); fimport$1(7274, 8, 3834); fimport$1(7275, 9, 3800); fimport$1(7276, 6, 3637); fimport$1(7277, 7, 4142) } function $106($0_1, $1_1) { var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0; label$1: { if (HEAP32[$0_1 + 44 >> 2] != ((HEAP32[$0_1 + 48 >> 2] + 1 | 0) % HEAP32[$0_1 + 40 >> 2] | 0)) { break label$1 } $2_1 = HEAP32[$0_1 + 40 >> 2]; $3_1 = $29(Math_imul($2_1, 24)); if ($3_1) { $6_1 = $2_1 << 1; $4_1 = HEAP32[$0_1 + 48 >> 2]; $2_1 = HEAP32[$0_1 + 44 >> 2]; label$3: { if (($4_1 | 0) >= ($2_1 | 0)) { $5_1 = HEAP32[$0_1 + 36 >> 2] + Math_imul($2_1, 12) | 0; $2_1 = $4_1 - $2_1 | 0; $23($3_1, $5_1, Math_imul($2_1, 12)); break label$3 } $7_1 = HEAP32[$0_1 + 36 >> 2] + Math_imul($2_1, 12) | 0; $2_1 = HEAP32[$0_1 + 40 >> 2] - $2_1 | 0; $5_1 = Math_imul($2_1, 12); $23($3_1, $7_1, $5_1); $23($3_1 + $5_1 | 0, HEAP32[$0_1 + 36 >> 2], Math_imul($4_1, 12)); $2_1 = $2_1 + $4_1 | 0 } $8(HEAP32[$0_1 + 36 >> 2]); HEAP32[$0_1 + 48 >> 2] = $2_1; HEAP32[$0_1 + 44 >> 2] = 0; HEAP32[$0_1 + 40 >> 2] = $6_1; HEAP32[$0_1 + 36 >> 2] = $3_1; $2_1 = 1 } else { $2_1 = 0 } if ($2_1) { break label$1 } return 0 } $2_1 = HEAP32[$1_1 + 4 >> 2]; $3_1 = HEAP32[$0_1 + 36 >> 2] + Math_imul(HEAP32[$0_1 + 48 >> 2], 12) | 0; HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2]; HEAP32[$3_1 + 4 >> 2] = $2_1; HEAP32[$3_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2]; HEAP32[$0_1 + 48 >> 2] = (HEAP32[$0_1 + 48 >> 2] + 1 | 0) % HEAP32[$0_1 + 40 >> 2]; return 1 } function $7($0_1, $1_1, $2_1) { var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0); $0_1 = $0_1 + 116 | 0; $5_1 = HEAP32[($1_1 << 2) + 4388 >> 2]; label$5: { if (($1_1 & -2) == 2) { $1_1 = $19($0_1, 4, $5_1, 2140081935); break label$5 } $1_1 = $18($0_1, $5_1, 2140081935) } label$1: { label$2: { label$3: { label$4: { if (($1_1 | 0) == 2139156720) { break label$4 } if (($1_1 | 0) == 2140081935) { break label$1 } $0_1 = 4436; label$8: { if (($1_1 | 0) != 2141891242) { $3_1 = (wasm2js_scratch_store_i32(2, $1_1), wasm2js_scratch_load_f32()); if ($3_1 == $3_1) { break label$8 } $0_1 = 4444 } $3_1 = HEAPF32[$0_1 >> 2]; $4_1 = Math_fround(NaN); switch (HEAP32[$0_1 + 4 >> 2] - 1 | 0) { case 0: break label$3; case 1: break label$4; default: break label$2 } } $3_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($1_1 & 1073741824)) { break label$3 } } $3_1 = Math_fround(Math_fround($3_1 * $2_1) * Math_fround(.009999999776482582)) } if ($3_1 >= Math_fround(0)) { return $3_1 } $4_1 = $3_1; if ($3_1 < Math_fround(0)) { break label$1 } } $6_1 = $4_1 == $4_1 ? $4_1 : Math_fround(0) } return $6_1 } function $6($0_1, $1_1, $2_1) { var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0); $0_1 = $0_1 + 116 | 0; $5_1 = HEAP32[($1_1 << 2) + 4404 >> 2]; label$5: { if (($1_1 & -2) == 2) { $1_1 = $19($0_1, 5, $5_1, 2140081935); break label$5 } $1_1 = $18($0_1, $5_1, 2140081935) } label$1: { label$2: { label$3: { label$4: { if (($1_1 | 0) == 2139156720) { break label$4 } if (($1_1 | 0) == 2140081935) { break label$1 } $0_1 = 4436; label$8: { if (($1_1 | 0) != 2141891242) { $3_1 = (wasm2js_scratch_store_i32(2, $1_1), wasm2js_scratch_load_f32()); if ($3_1 == $3_1) { break label$8 } $0_1 = 4444 } $3_1 = HEAPF32[$0_1 >> 2]; $4_1 = Math_fround(NaN); switch (HEAP32[$0_1 + 4 >> 2] - 1 | 0) { case 0: break label$3; case 1: break label$4; default: break label$2 } } $3_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($1_1 & 1073741824)) { break label$3 } } $3_1 = Math_fround(Math_fround($3_1 * $2_1) * Math_fround(.009999999776482582)) } if ($3_1 >= Math_fround(0)) { return $3_1 } $4_1 = $3_1; if ($3_1 < Math_fround(0)) { break label$1 } } $6_1 = $4_1 == $4_1 ? $4_1 : Math_fround(0) } return $6_1 } function $121($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) { label$1: { label$2: { if ($0_1) { label$4: { if ($1_1 & 4) { $1_1 = FUNCTION_TABLE[$0_1 | 0]($2_1, $3_1, $4_1, $5_1) | 0; break label$4 } $1_1 = FUNCTION_TABLE[$0_1 | 0]($2_1, $3_1, $4_1) | 0 } if ($1_1) { break label$2 } } $1_1 = $0(588); wasm2js_memory_copy($1_1, $2_1, 552); HEAP32[$1_1 + 564 >> 2] = 0; HEAP32[$1_1 + 556 >> 2] = 0; HEAP32[$1_1 + 560 >> 2] = 0; $4_1 = HEAP32[$2_1 + 556 >> 2]; $3_1 = HEAP32[$2_1 + 560 >> 2]; if (($4_1 | 0) != ($3_1 | 0)) { $5_1 = $3_1 - $4_1 | 0; if (($5_1 | 0) < 0) { break label$1 } $0_1 = $0($5_1); HEAP32[$1_1 + 556 >> 2] = $0_1; HEAP32[$1_1 + 564 >> 2] = $0_1 + $5_1; while (1) { HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2]; $0_1 = $0_1 + 4 | 0; $4_1 = $4_1 + 4 | 0; if (($3_1 | 0) != ($4_1 | 0)) { continue } break } HEAP32[$1_1 + 560 >> 2] = $0_1 } $0_1 = HEAP32[$2_1 + 572 >> 2]; HEAP32[$1_1 + 568 >> 2] = HEAP32[$2_1 + 568 >> 2]; HEAP32[$1_1 + 572 >> 2] = $0_1; HEAP32[$1_1 + 584 >> 2] = HEAP32[$2_1 + 584 >> 2]; $0_1 = HEAP32[$2_1 + 580 >> 2]; HEAP32[$1_1 + 576 >> 2] = HEAP32[$2_1 + 576 >> 2]; HEAP32[$1_1 + 580 >> 2] = $0_1; HEAP32[$1_1 + 552 >> 2] = 0 } return $1_1 } fimport$4(); wasm2js_trap() } function $14($0_1, $1_1) { var $2_1 = 0, $3_1 = 0, $4_1 = 0; $4_1 = global$0 - 16 | 0; global$0 = $4_1; HEAP32[$4_1 + 12 >> 2] = $1_1; label$1: { label$2: { if (!$0_1) { $1_1 = HEAP32[$4_1 + 12 >> 2]; break label$2 } $1_1 = HEAP32[$4_1 + 12 >> 2]; $2_1 = HEAP32[$0_1 + 568 >> 2]; if (!$2_1) { break label$2 } $3_1 = HEAP32[$2_1 + 4 >> 2]; if (HEAPU8[$2_1 + 8 | 0] & 8) { FUNCTION_TABLE[$3_1 | 0]($2_1, $0_1, 5, 0, 4383, $1_1) | 0; break label$1 } FUNCTION_TABLE[$3_1 | 0]($2_1, $0_1, 5, 4383, $1_1) | 0; break label$1 } label$5: { if (!HEAPU8[7192]) { $2_1 = $0(28); HEAP32[$2_1 + 20 >> 2] = 1065353216; HEAP32[$2_1 + 24 >> 2] = 0; HEAP32[$2_1 + 12 >> 2] = 0; HEAP32[$2_1 + 16 >> 2] = 0; HEAP32[$2_1 >> 2] = 0; HEAP8[$2_1 + 8 | 0] = 0; $3_1 = 1; HEAP32[$2_1 + 4 >> 2] = 1; HEAP32[1797] = $2_1; HEAP8[7192] = 1; HEAP32[1796] = HEAP32[1796] + 1; break label$5 } $2_1 = HEAP32[1797]; $3_1 = HEAP32[$2_1 + 4 >> 2]; if (!(HEAPU8[$2_1 + 8 | 0] & 8)) { break label$5 } FUNCTION_TABLE[$3_1 | 0]($2_1, $0_1, 5, 0, 4383, $1_1) | 0; break label$1 } FUNCTION_TABLE[$3_1 | 0]($2_1, $0_1, 5, 4383, $1_1) | 0 } global$0 = $4_1 + 16 | 0 } function $37($0_1, $1_1, $2_1) { var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0); $0_1 = $0_1 + 80 | 0; $4_1 = HEAP32[($1_1 << 2) + 4404 >> 2]; label$1: { label$4: { if (($1_1 & -2) == 2) { $1_1 = $19($0_1, 5, $4_1, 2140081935); break label$4 } $1_1 = $18($0_1, $4_1, 2140081935) } label$2: { label$3: { if (($1_1 | 0) == 2139156720) { break label$3 } if (($1_1 | 0) == 2140081935) { break label$1 } $0_1 = 4436; label$6: { if (($1_1 | 0) != 2141891242) { $3_1 = (wasm2js_scratch_store_i32(2, $1_1), wasm2js_scratch_load_f32()); if ($3_1 == $3_1) { break label$6 } $0_1 = 4444 } $3_1 = HEAPF32[$0_1 >> 2]; $5_1 = Math_fround(NaN); switch (HEAP32[$0_1 + 4 >> 2] - 1 | 0) { case 0: break label$1; case 1: break label$3; default: break label$2 } } $3_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($1_1 & 1073741824)) { break label$1 } } $5_1 = Math_fround(Math_fround($3_1 * $2_1) * Math_fround(.009999999776482582)) } return $5_1 } return $3_1 } function $21($0_1, $1_1, $2_1) { var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0); $0_1 = $0_1 + 80 | 0; $4_1 = HEAP32[($1_1 << 2) + 4388 >> 2]; label$1: { label$4: { if (($1_1 & -2) == 2) { $1_1 = $19($0_1, 4, $4_1, 2140081935); break label$4 } $1_1 = $18($0_1, $4_1, 2140081935) } label$2: { label$3: { if (($1_1 | 0) == 2139156720) { break label$3 } if (($1_1 | 0) == 2140081935) { break label$1 } $0_1 = 4436; label$6: { if (($1_1 | 0) != 2141891242) { $3_1 = (wasm2js_scratch_store_i32(2, $1_1), wasm2js_scratch_load_f32()); if ($3_1 == $3_1) { break label$6 } $0_1 = 4444 } $3_1 = HEAPF32[$0_1 >> 2]; $5_1 = Math_fround(NaN); switch (HEAP32[$0_1 + 4 >> 2] - 1 | 0) { case 0: break label$1; case 1: break label$3; default: break label$2 } } $3_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($1_1 & 1073741824)) { break label$1 } } $5_1 = Math_fround(Math_fround($3_1 * $2_1) * Math_fround(.009999999776482582)) } return $5_1 } return $3_1 } function $20($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0; $7_1 = HEAP32[$0_1 + 8 >> 2]; $2_1 = HEAP32[$0_1 >> 2]; label$1: { label$2: { if (!($2_1 & 15)) { $1_1 = $0_1 + 4 | 0; $0_1 = $110($1_1, 0); break label$2 } $3_1 = global$3; $4_1 = HEAP32[$0_1 + 4 >> 2]; if (HEAP32[$3_1 + 24 >> 2] != ($4_1 & 1073741823)) { break label$1 } label$4: { if (($2_1 & 3) != 1) { break label$4 } $1_1 = HEAP32[$0_1 + 20 >> 2]; if (!$1_1) { break label$4 } HEAP32[$0_1 + 20 >> 2] = $1_1 - 1; return } $5_1 = $2_1 & 128; if ($5_1) { HEAP32[$3_1 + 84 >> 2] = $0_1 + 16; Atomics.add(HEAP32, 0 + 7288 >> 2, 1) } $1_1 = $0_1 + 4 | 0; $6_1 = HEAP32[$0_1 + 12 >> 2]; $0_1 = HEAP32[$0_1 + 16 >> 2]; HEAP32[$6_1 >> 2] = $0_1; if (($0_1 | 0) != ($3_1 + 76 | 0)) { HEAP32[$0_1 - 4 >> 2] = $6_1 } $0_1 = $110($1_1, ($4_1 << 1 & $2_1 << 29) >> 31 & 2147483647); if (!$5_1) { break label$2 } HEAP32[$3_1 + 84 >> 2] = 0; if (!((Atomics.add(HEAP32, 0 + 7288 >> 2, -1) | 0) != 1 | !HEAP32[1823])) { $38(7288, 2147483647) } } if (!$7_1 & ($0_1 | 0) >= 0) { break label$1 } $40($1_1) } } function $179($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = Math_fround($2_1); $3_1 = $3_1 | 0; $4_1 = Math_fround($4_1); $5_1 = $5_1 | 0; var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0; $6_1 = global$0 - 48 | 0; global$0 = $6_1; $9_1 = HEAP32[$1_1 + 8 >> 2]; label$1: { if (HEAP8[global$1 + 12 | 0] & 1) { $1_1 = HEAP32[global$1 + 8 >> 2]; break label$1 } $8_1 = global$1; $1_1 = fimport$12(5, 4576) | 0; HEAP8[$8_1 + 12 | 0] = 1; HEAP32[$8_1 + 8 >> 2] = $1_1 } HEAP32[$6_1 + 40 >> 2] = $5_1; HEAPF32[$6_1 + 32 >> 2] = $4_1; HEAP32[$6_1 + 24 >> 2] = $3_1; HEAPF32[$6_1 + 16 >> 2] = $2_1; $7_1 = +fimport$19($1_1 | 0, $9_1 | 0, 2954, $6_1 + 12 | 0, $6_1 + 16 | 0); label$3: { if ($7_1 < 4294967296 & $7_1 >= 0) { $1_1 = ~~$7_1 >>> 0; break label$3 } $1_1 = 0 } $3_1 = HEAP32[$6_1 + 12 >> 2]; $5_1 = HEAP32[$1_1 + 4 >> 2]; HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2]; HEAP32[$0_1 + 4 >> 2] = $5_1; $5_1 = HEAP32[$1_1 + 12 >> 2]; HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2]; HEAP32[$0_1 + 12 >> 2] = $5_1; fimport$18($3_1 | 0); global$0 = $6_1 + 48 | 0 } function $148($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = Math_fround($1_1); var $2_1 = 0, $3_1 = 0, $4_1 = 0; $2_1 = global$0 - 16 | 0; global$0 = $2_1; $0_1 = HEAP32[$0_1 >> 2]; if (!($1_1 >= Math_fround(0))) { HEAP32[$2_1 >> 2] = 2295; $3_1 = global$0 - 16 | 0; global$0 = $3_1; HEAP32[$3_1 + 12 >> 2] = $2_1; label$2: { if ($0_1) { break label$2 } if (HEAPU8[7192]) { $0_1 = HEAP32[1797]; break label$2 } $0_1 = $0(28); HEAP32[$0_1 + 20 >> 2] = 1065353216; HEAP32[$0_1 + 24 >> 2] = 0; HEAP32[$0_1 + 12 >> 2] = 0; HEAP32[$0_1 + 16 >> 2] = 0; HEAP32[$0_1 >> 2] = 0; HEAP8[$0_1 + 8 | 0] = 0; HEAP32[$0_1 + 4 >> 2] = 1; HEAP32[1797] = $0_1; HEAP8[7192] = 1; HEAP32[1796] = HEAP32[1796] + 1 } $4_1 = HEAP32[$0_1 + 4 >> 2]; label$4: { if (HEAPU8[$0_1 + 8 | 0] & 8) { FUNCTION_TABLE[$4_1 | 0]($0_1, 0, 5, 0, 4383, $2_1) | 0; break label$4 } FUNCTION_TABLE[$4_1 | 0]($0_1, 0, 5, 4383, $2_1) | 0 } global$0 = $3_1 + 16 | 0; $13(); wasm2js_trap() } HEAPF32[$0_1 + 20 >> 2] = $1_1 == Math_fround(0) ? Math_fround(0) : $1_1; global$0 = $2_1 + 16 | 0 } function $34($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0; if ($0_1 & 3) { $0_1 = -28 } else { $99(); if (!global$5) { $5_1 = +fimport$5(); $55(0, $0_1); $2_1 = $5_1 + $2_1; label$4: { while (1) { $5_1 = +fimport$5(); $4_1 = $55($0_1, 0); $3_1 = -73; if ($2_1 < $5_1) { break label$4 } $3_1 = 0; if (!$4_1) { break label$4 } $99(); if (($1_1 | 0) == (Atomics.load(HEAP32, $0_1 >> 2) | 0)) { $55(0, $0_1); continue } break } $3_1 = -6 } return $3_1 } $4_1 = $2_1 != Infinity; $3_1 = $0_1; $2_1 = $2_1 * 1e3 * 1e3; label$8: { if (Math_abs($2_1) < 0x8000000000000000) { $0_1 = Math_abs($2_1) >= 1 ? ~~($2_1 > 0 ? Math_min(Math_floor($2_1 * 2.3283064365386963e-10), 4294967295) : Math_ceil(($2_1 - +(~~$2_1 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0; $6_1 = ~~$2_1 >>> 0; break label$8 } $0_1 = -2147483648; $6_1 = 0 } $0_1 = wasm2js_atomic_wait_i32(0, $3_1 | 0, $1_1 | 0, ($4_1 ? $6_1 : -1) | 0, ($4_1 ? $0_1 : -1) | 0) | 0; $0_1 = ($0_1 | 0) == 1 ? -6 : ($0_1 | 0) == 2 ? -73 : 0 } return $0_1 } function $22($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0; label$1: { if (!(HEAPU8[$0_1 | 0] & 15)) { if (!(Atomics.compareExchange(HEAP32, $0_1 + 4 >> 2, 0, 10) | 0)) { break label$1 } } $1_1 = HEAP32[$0_1 >> 2]; label$3: { if (!($1_1 & 15)) { if (!$16($0_1 + 4 | 0, 0, 10)) { break label$3 } $1_1 = HEAP32[$0_1 >> 2] } if (($57($0_1) | 0) != 10) { break label$3 } $5_1 = $0_1 + 8 | 0; $3_1 = $0_1 + 4 | 0; $2_1 = 100; while (1) { if (!(!$2_1 | !HEAP32[$3_1 >> 2])) { $2_1 = $2_1 - 1 | 0; if (!HEAP32[$5_1 >> 2]) { continue } } break } $2_1 = !($1_1 & 4); $6_1 = ($1_1 & 3) != 2; while (1) { if (($57($0_1) | 0) != 10) { break label$3 } $1_1 = HEAP32[$3_1 >> 2]; $4_1 = $1_1 & 1073741823; if (!($4_1 | $2_1 & ($1_1 | 0) != 0)) { continue } if (!(HEAP32[global$3 + 24 >> 2] != ($4_1 | 0) | $6_1)) { break label$3 } $112($5_1); $4_1 = $1_1; $1_1 = $1_1 | -2147483648; $16($3_1, $4_1, $1_1); $1_1 = $113($3_1, $1_1); $111($5_1); if (!$1_1 | ($1_1 | 0) == 27) { continue } break } } } } function $92($0_1, $1_1) { var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0; if (!$0_1) { return 0 } label$2: { label$3: { if ($1_1 >>> 0 <= 127) { break label$3 } label$4: { if (!HEAP32[HEAP32[global$3 + 96 >> 2] >> 2]) { if (($1_1 & -128) == 57216) { break label$3 } break label$4 } if ($1_1 >>> 0 <= 2047) { HEAP8[$0_1 + 1 | 0] = $1_1 & 63 | 128; HEAP8[$0_1 | 0] = $1_1 >>> 6 | 192; $0_1 = 2; break label$2 } if (!(($1_1 & -8192) != 57344 & $1_1 >>> 0 >= 55296)) { HEAP8[$0_1 + 2 | 0] = $1_1 & 63 | 128; HEAP8[$0_1 | 0] = $1_1 >>> 12 | 224; HEAP8[$0_1 + 1 | 0] = $1_1 >>> 6 & 63 | 128; $0_1 = 3; break label$2 } if ($1_1 - 65536 >>> 0 <= 1048575) { HEAP8[$0_1 + 3 | 0] = $1_1 & 63 | 128; HEAP8[$0_1 | 0] = $1_1 >>> 18 | 240; HEAP8[$0_1 + 2 | 0] = $1_1 >>> 6 & 63 | 128; HEAP8[$0_1 + 1 | 0] = $1_1 >>> 12 & 63 | 128; $0_1 = 4; break label$2 } } wasm2js_i32$0 = $43(), wasm2js_i32$1 = 25, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1; $0_1 = -1; break label$2 } HEAP8[$0_1 | 0] = $1_1; $0_1 = 1 } return $0_1 } function $207($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0; $3_1 = global$0 - 32 | 0; global$0 = $3_1; $4_1 = HEAP32[$1_1 >> 2]; if ($4_1 >>> 0 < 2147483632) { label$2: { label$3: { if ($4_1 >>> 0 >= 11) { $5_1 = ($4_1 | 15) + 1 | 0; $6_1 = $0($5_1); HEAP32[$3_1 + 24 >> 2] = $5_1 | -2147483648; HEAP32[$3_1 + 16 >> 2] = $6_1; HEAP32[$3_1 + 20 >> 2] = $4_1; $5_1 = $4_1 + $6_1 | 0; break label$3 } HEAP8[$3_1 + 27 | 0] = $4_1; $6_1 = $3_1 + 16 | 0; $5_1 = $6_1 + $4_1 | 0; if (!$4_1) { break label$2 } } wasm2js_memory_copy($6_1, $1_1 + 4 | 0, $4_1) } HEAP8[$5_1 | 0] = 0; HEAP32[$3_1 + 12 >> 2] = $2_1; FUNCTION_TABLE[$0_1 | 0]($3_1 + 28 | 0, $3_1 + 16 | 0, $3_1 + 12 | 0); fimport$17(HEAP32[$3_1 + 28 >> 2]); $0_1 = HEAP32[$3_1 + 28 >> 2]; fimport$7($0_1 | 0); fimport$7(HEAP32[$3_1 + 12 >> 2]); if (HEAP8[$3_1 + 27 | 0] < 0) { $8(HEAP32[$3_1 + 16 >> 2]) } global$0 = $3_1 + 32 | 0; return $0_1 | 0 } fimport$4(); wasm2js_trap() } function $133() { var $0_1 = 0, $1_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0; global$7 = 74704; global$6 = 9168; while (1) { $1_1 = $0_1 << 4; $2_1 = $1_1 + 6144 | 0; HEAP32[$1_1 + 6148 >> 2] = $2_1; HEAP32[$1_1 + 6152 >> 2] = $2_1; $0_1 = $0_1 + 1 | 0; if (($0_1 | 0) != 64) { continue } break } $50(48); fimport$29(7892); HEAP32[1973] = 7892; HEAP32[1986] = global$7; HEAP32[1981] = 2; HEAP32[1987] = global$7 - global$6; HEAP32[1997] = 9128; HEAP32[1979] = 42; HEAP32[1991] = 7312; HEAP32[1976] = 7892; HEAP32[1975] = 7892; HEAP32[1992] = 7968; wasm2js_i32$0 = 8012, wasm2js_i32$1 = $107(), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1; Atomics.store(HEAP32, 2004, 1); Atomics.store(HEAP32, 2005, 0); fimport$28(7892); HEAP32[1800] = 16; HEAP32[1801] = 0; $131(); HEAP32[1801] = HEAP32[1808]; HEAP32[1808] = 7200; HEAP32[1809] = 198; HEAP32[1810] = 0; $117(); HEAP32[1810] = HEAP32[1808]; HEAP32[1808] = 7236 } function $84($0_1, $1_1, $2_1, $3_1, $4_1) { var $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = 0; $5_1 = 2; $6_1 = HEAP32[$0_1 + 24 >> 2] >>> 2 & 3; label$1: { label$2: { label$3: { if (!(!HEAP32[$0_1 + 552 >> 2] | ($1_1 | 0) != 2)) { $1_1 = 0; $5_1 = 3; label$5: { switch ($6_1 - 2 | 0) { case 0: break label$1; case 1: break label$5; default: break label$3 } } $5_1 = 2; break label$1 } $1_1 = 0; if ($6_1 >>> 0 > 1) { break label$2 } } $1_1 = $5_1 } $5_1 = $6_1 } $2_1 = $85($0_1, $5_1, $2_1); $3_1 = $85($0_1, $1_1, $3_1); $7_1 = $2($0_1, $5_1, $4_1); $6_1 = $0_1 + 228 | 0; $8_1 = $5_1 << 2; HEAPF32[$6_1 + (HEAP32[$8_1 + 4388 >> 2] << 2) >> 2] = $2_1 + $7_1; $7_1 = $5($0_1, $5_1, $4_1); HEAPF32[$6_1 + (HEAP32[$8_1 + 4404 >> 2] << 2) >> 2] = $2_1 + $7_1; $2_1 = $2($0_1, $1_1, $4_1); $5_1 = $1_1 << 2; HEAPF32[$6_1 + (HEAP32[$5_1 + 4388 >> 2] << 2) >> 2] = $3_1 + $2_1; $2_1 = $5($0_1, $1_1, $4_1); HEAPF32[$6_1 + (HEAP32[$5_1 + 4404 >> 2] << 2) >> 2] = $3_1 + $2_1 } function $295($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0; $5_1 = HEAP32[$0_1 >> 2]; $3_1 = Math_fround($2_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($3_1 < Math_fround(10842021724855044e-35) & $3_1 > Math_fround(-10842021724855044e-35) | $3_1 == Math_fround(0)) { break label$1 } $4_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($3_1 > Math_fround(0xffffff0000000000) ? $4_1 : $3_1 < Math_fround(-0xffffff0000000000) ? $4_1 : $3_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $51($5_1, $1_1, $0_1) } function $268($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0; $5_1 = HEAP32[$0_1 >> 2]; $3_1 = Math_fround($2_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($3_1 < Math_fround(10842021724855044e-35) & $3_1 > Math_fround(-10842021724855044e-35) | $3_1 == Math_fround(0)) { break label$1 } $4_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($3_1 > Math_fround(0xffffff0000000000) ? $4_1 : $3_1 < Math_fround(-0xffffff0000000000) ? $4_1 : $3_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $76($5_1, $1_1, $0_1) } function $134($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0; $5_1 = HEAP32[$0_1 >> 2]; $3_1 = Math_fround($2_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($3_1 < Math_fround(10842021724855044e-35) & $3_1 > Math_fround(-10842021724855044e-35) | $3_1 == Math_fround(0)) { break label$1 } $4_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($3_1 > Math_fround(0xffffff0000000000) ? $4_1 : $3_1 < Math_fround(-0xffffff0000000000) ? $4_1 : $3_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $77($5_1, $1_1, $0_1) } function $296($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0; $5_1 = HEAP32[$0_1 >> 2]; $3_1 = Math_fround($2_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($3_1 < Math_fround(10842021724855044e-35) & $3_1 > Math_fround(-10842021724855044e-35) | $3_1 == Math_fround(0)) { break label$1 } $4_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($3_1 > Math_fround(0x1fffffe0000000000) ? $4_1 : $3_1 < Math_fround(-0x1fffffe0000000000) ? $4_1 : $3_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $51($5_1, $1_1, $0_1) } function $269($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0; $5_1 = HEAP32[$0_1 >> 2]; $3_1 = Math_fround($2_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($3_1 < Math_fround(10842021724855044e-35) & $3_1 > Math_fround(-10842021724855044e-35) | $3_1 == Math_fround(0)) { break label$1 } $4_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($3_1 > Math_fround(0x1fffffe0000000000) ? $4_1 : $3_1 < Math_fround(-0x1fffffe0000000000) ? $4_1 : $3_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $76($5_1, $1_1, $0_1) } function $135($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0; $5_1 = HEAP32[$0_1 >> 2]; $3_1 = Math_fround($2_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($3_1 < Math_fround(10842021724855044e-35) & $3_1 > Math_fround(-10842021724855044e-35) | $3_1 == Math_fround(0)) { break label$1 } $4_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($3_1 > Math_fround(0x1fffffe0000000000) ? $4_1 : $3_1 < Math_fround(-0x1fffffe0000000000) ? $4_1 : $3_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $77($5_1, $1_1, $0_1) } function $284($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0xffffff0000000000) ? $3_1 : $2_1 < Math_fround(-0xffffff0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $31($4_1, 0, $0_1) } function $281($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0xffffff0000000000) ? $3_1 : $2_1 < Math_fround(-0xffffff0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $31($4_1, 1, $0_1) } function $278($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0xffffff0000000000) ? $3_1 : $2_1 < Math_fround(-0xffffff0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $42($4_1, 0, $0_1) } function $276($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0xffffff0000000000) ? $3_1 : $2_1 < Math_fround(-0xffffff0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $42($4_1, 1, $0_1) } function $274($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0xffffff0000000000) ? $3_1 : $2_1 < Math_fround(-0xffffff0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $41($4_1, 0, $0_1) } function $272($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0xffffff0000000000) ? $3_1 : $2_1 < Math_fround(-0xffffff0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $41($4_1, 1, $0_1) } function $113($0_1, $1_1) { var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0; $3_1 = global$0 - 16 | 0; global$0 = $3_1; $114(1, $3_1 + 12 | 0); label$1: { label$2: { label$3: { $2_1 = global$4; label$4: { if ($2_1) { break label$4 } $4_1 = global$3; if (HEAPU8[$4_1 + 40 | 0] != 1) { break label$4 } if (HEAPU8[$4_1 + 41 | 0] != 1) { break label$3 } } $6_1 = +(($2_1 ? 1 : 100) | 0); $7_1 = +fimport$5() + Infinity; $4_1 = global$3; while (1) { $2_1 = 11; if (HEAP32[$4_1 + 36 >> 2]) { break label$1 } $5_1 = $7_1 - +fimport$5(); $2_1 = 73; if ($5_1 <= 0) { break label$2 } $2_1 = $34($0_1, $1_1, $6_1 < $5_1 ? $6_1 : $5_1); if (($2_1 | 0) == -73) { continue } break } $2_1 = 0 - $2_1 | 0; break label$2 } $2_1 = 0 - $34($0_1, $1_1, Infinity) | 0 } $0_1 = ($2_1 | 0) != 73 ? ($2_1 & -17) == 11 ? $2_1 : 0 : $2_1; if (($0_1 | 0) == 27) { $0_1 = HEAP32[1824] ? 27 : 0 } $2_1 = $0_1 } $114(HEAP32[$3_1 + 12 >> 2], 0); global$0 = $3_1 + 16 | 0; return $2_1 } function $289($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2139156720; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1602224127), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0xffffff0000000000) ? $3_1 : $2_1 < Math_fround(-0xffffff0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 1073741824 } $52($4_1, $0_1) } function $285($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0x1fffffe0000000000) ? $3_1 : $2_1 < Math_fround(-0x1fffffe0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $31($4_1, 0, $0_1) } function $282($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0x1fffffe0000000000) ? $3_1 : $2_1 < Math_fround(-0x1fffffe0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $31($4_1, 1, $0_1) } function $279($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0x1fffffe0000000000) ? $3_1 : $2_1 < Math_fround(-0x1fffffe0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $42($4_1, 0, $0_1) } function $277($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0x1fffffe0000000000) ? $3_1 : $2_1 < Math_fround(-0x1fffffe0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $42($4_1, 1, $0_1) } function $275($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0x1fffffe0000000000) ? $3_1 : $2_1 < Math_fround(-0x1fffffe0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $41($4_1, 0, $0_1) } function $273($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0x1fffffe0000000000) ? $3_1 : $2_1 < Math_fround(-0x1fffffe0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $41($4_1, 1, $0_1) } function $290($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $2_1 = Math_fround($1_1); $0_1 = 2143289344; label$1: { if (((wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095039) { break label$1 } $0_1 = 2140081935; if ($2_1 < Math_fround(10842021724855044e-35) & $2_1 > Math_fround(-10842021724855044e-35) | $2_1 == Math_fround(0)) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($2_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1610612735), wasm2js_scratch_load_f32()); $0_1 = (wasm2js_scratch_store_f32($2_1 > Math_fround(0x1fffffe0000000000) ? $3_1 : $2_1 < Math_fround(-0x1fffffe0000000000) ? $3_1 : $2_1), wasm2js_scratch_load_i32(2)) - 536870912 | 0 } $52($4_1, $0_1) } function $19($0_1, $1_1, $2_1, $3_1) { var $4_1 = Math_fround(0); $1_1 = ($1_1 << 2) + $0_1 | 0; $4_1 = HEAPF32[$1_1 >> 2]; $1_1 = HEAP32[$1_1 >> 2]; label$1: { if (($1_1 | 0) == 2139156720 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242 | $4_1 == $4_1) { break label$1 } $1_1 = ($2_1 << 2) + $0_1 | 0; $4_1 = HEAPF32[$1_1 >> 2]; $1_1 = HEAP32[$1_1 >> 2]; if (($1_1 | 0) == 2139156720 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242 | $4_1 == $4_1) { break label$1 } $1_1 = HEAP32[$0_1 + 24 >> 2]; $4_1 = HEAPF32[$0_1 + 24 >> 2]; if (($1_1 | 0) == 2139156720 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242 | $4_1 == $4_1) { break label$1 } $4_1 = HEAPF32[$0_1 + 32 >> 2]; $0_1 = HEAP32[$0_1 + 32 >> 2]; if (!(($0_1 | 0) == 2139156720 | ($0_1 | 0) == 2140081935 | ($0_1 | 0) == 2141891242)) { $1_1 = $3_1; if ($4_1 != $4_1) { break label$1 } } $1_1 = $0_1 } return $1_1 } function $11($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = 0, $5_1 = 0; if (!(HEAPU8[$0_1 | 0] & 32)) { label$2: { $3_1 = $1_1; $1_1 = $0_1; $0_1 = HEAP32[$1_1 + 16 >> 2]; label$3: { if (!$0_1) { if ($69($1_1)) { break label$3 } $0_1 = HEAP32[$1_1 + 16 >> 2] } $5_1 = HEAP32[$1_1 + 20 >> 2]; if ($0_1 - $5_1 >>> 0 < $2_1 >>> 0) { FUNCTION_TABLE[HEAP32[$1_1 + 36 >> 2]]($1_1, $3_1, $2_1) | 0; break label$2 } label$7: { if (HEAP32[$1_1 + 80 >> 2] < 0) { break label$7 } $0_1 = $2_1; while (1) { $4_1 = $0_1; if (!$0_1) { break label$7 } $0_1 = $4_1 - 1 | 0; if (HEAPU8[$3_1 + $0_1 | 0] != 10) { continue } break } if (FUNCTION_TABLE[HEAP32[$1_1 + 36 >> 2]]($1_1, $3_1, $4_1) >>> 0 < $4_1 >>> 0) { break label$3 } $3_1 = $3_1 + $4_1 | 0; $2_1 = $2_1 - $4_1 | 0; $5_1 = HEAP32[$1_1 + 20 >> 2] } $23($5_1, $3_1, $2_1); HEAP32[$1_1 + 20 >> 2] = HEAP32[$1_1 + 20 >> 2] + $2_1 } } } } function $58($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0; $3_1 = 100; label$1: { label$2: { label$3: { while (1) { if ($3_1) { if (HEAP32[$1_1 >> 2] ? $1_1 : 0) { break label$3 } $3_1 = $3_1 - 1 | 0; if (HEAP32[$0_1 >> 2] == ($2_1 | 0)) { continue } break label$1 } break } if ($1_1) { break label$3 } $3_1 = 1; break label$2 } $112($1_1); $3_1 = 0 } $4_1 = global$4; label$7: { if (HEAP32[$0_1 >> 2] != ($2_1 | 0)) { break label$7 } $6_1 = +(($4_1 ? 1 : 100) | 0); $5_1 = global$3; while (1) { label$9: { if (!(!$4_1 & HEAPU8[$5_1 + 41 | 0] != 1)) { while (1) { if (HEAP32[$5_1 + 36 >> 2]) { break label$7 } if (($34($0_1, $2_1, $6_1) | 0) == -73) { continue } break } break label$9 } $34($0_1, $2_1, Infinity) } if (HEAP32[$0_1 >> 2] == ($2_1 | 0)) { continue } break } } if ($3_1) { break label$1 } $111($1_1) } } function $53($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = 0, $5_1 = 0; $3_1 = global$0 - 16 | 0; global$0 = $3_1; $4_1 = $0_1 + 24 | 0; FUNCTION_TABLE[$1_1 | 0]($3_1 + 8 | 0, $4_1); $5_1 = HEAP32[$3_1 + 12 >> 2]; label$1: { if ((HEAP32[HEAP32[$3_1 + 8 >> 2] >> 2] & 7 << $5_1) >> $5_1 == ($2_1 | 0)) { break label$1 } FUNCTION_TABLE[$1_1 | 0]($3_1 + 8 | 0, $4_1); $1_1 = HEAP32[$3_1 + 8 >> 2]; $4_1 = $1_1; $5_1 = HEAP32[$1_1 >> 2]; $1_1 = HEAP32[$3_1 + 12 >> 2]; HEAP32[$4_1 >> 2] = $5_1 & (7 << $1_1 ^ -1) | ($2_1 & 7) << $1_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } global$0 = $3_1 + 16 | 0 } function $160($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0; $4_1 = HEAP32[$0_1 + 84 >> 2]; $5_1 = HEAP32[$4_1 >> 2]; $3_1 = HEAP32[$4_1 + 4 >> 2]; $7_1 = HEAP32[$0_1 + 28 >> 2]; $6_1 = HEAP32[$0_1 + 20 >> 2] - $7_1 | 0; $6_1 = $3_1 >>> 0 < $6_1 >>> 0 ? $3_1 : $6_1; if ($6_1) { $23($5_1, $7_1, $6_1); $5_1 = $6_1 + HEAP32[$4_1 >> 2] | 0; HEAP32[$4_1 >> 2] = $5_1; $3_1 = HEAP32[$4_1 + 4 >> 2] - $6_1 | 0; HEAP32[$4_1 + 4 >> 2] = $3_1 } $3_1 = $2_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $2_1; if ($3_1) { $23($5_1, $1_1, $3_1); $5_1 = $3_1 + HEAP32[$4_1 >> 2] | 0; HEAP32[$4_1 >> 2] = $5_1; HEAP32[$4_1 + 4 >> 2] = HEAP32[$4_1 + 4 >> 2] - $3_1 } HEAP8[$5_1 | 0] = 0; $1_1 = HEAP32[$0_1 + 44 >> 2]; HEAP32[$0_1 + 28 >> 2] = $1_1; HEAP32[$0_1 + 20 >> 2] = $1_1; return $2_1 | 0 } function $4($0_1, $1_1) { var $2_1 = Math_fround(0), $3_1 = 0; $0_1 = $0_1 + 152 | 0; $3_1 = HEAP32[($1_1 << 2) + 4404 >> 2]; label$2: { if (($1_1 & -2) == 2) { $0_1 = $19($0_1, 5, $3_1, 2140081935); break label$2 } $0_1 = $18($0_1, $3_1, 2140081935) } $2_1 = Math_fround(0); label$1: { if (($0_1 | 0) == 2139156720) { break label$1 } $2_1 = Math_fround(0); if (($0_1 | 0) == 2140081935) { break label$1 } label$4: { if (($0_1 | 0) == 2141891242) { break label$4 } $2_1 = (wasm2js_scratch_store_i32(2, $0_1), wasm2js_scratch_load_f32()); if ($2_1 != $2_1) { break label$4 } $2_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); break label$1 } $2_1 = Math_fround(NaN) } return $1($2_1, Math_fround(0)) } function $3($0_1, $1_1) { var $2_1 = Math_fround(0), $3_1 = 0; $0_1 = $0_1 + 152 | 0; $3_1 = HEAP32[($1_1 << 2) + 4388 >> 2]; label$2: { if (($1_1 & -2) == 2) { $0_1 = $19($0_1, 4, $3_1, 2140081935); break label$2 } $0_1 = $18($0_1, $3_1, 2140081935) } $2_1 = Math_fround(0); label$1: { if (($0_1 | 0) == 2139156720) { break label$1 } $2_1 = Math_fround(0); if (($0_1 | 0) == 2140081935) { break label$1 } label$4: { if (($0_1 | 0) == 2141891242) { break label$4 } $2_1 = (wasm2js_scratch_store_i32(2, $0_1), wasm2js_scratch_load_f32()); if ($2_1 != $2_1) { break label$4 } $2_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); break label$1 } $2_1 = Math_fround(NaN) } return $1($2_1, Math_fround(0)) } function $5($0_1, $1_1, $2_1) { var $3_1 = Math_fround(0), $4_1 = 0; $0_1 = $0_1 + 44 | 0; $4_1 = HEAP32[($1_1 << 2) + 4404 >> 2]; label$2: { if (($1_1 & -2) == 2) { $0_1 = $19($0_1, 5, $4_1, 2140081935); break label$2 } $0_1 = $18($0_1, $4_1, 2140081935) } label$1: { if (($0_1 | 0) != 2139156720) { if (($0_1 | 0) == 2140081935 | ($0_1 | 0) == 2141891242) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, $0_1), wasm2js_scratch_load_f32()); if ($3_1 != $3_1) { return Math_fround(NaN) } $3_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($0_1 & 1073741824)) { break label$1 } } $3_1 = Math_fround(Math_fround($3_1 * $2_1) * Math_fround(.009999999776482582)) } return $3_1 } function $2($0_1, $1_1, $2_1) { var $3_1 = Math_fround(0), $4_1 = 0; $0_1 = $0_1 + 44 | 0; $4_1 = HEAP32[($1_1 << 2) + 4388 >> 2]; label$2: { if (($1_1 & -2) == 2) { $0_1 = $19($0_1, 4, $4_1, 2140081935); break label$2 } $0_1 = $18($0_1, $4_1, 2140081935) } label$1: { if (($0_1 | 0) != 2139156720) { if (($0_1 | 0) == 2140081935 | ($0_1 | 0) == 2141891242) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, $0_1), wasm2js_scratch_load_f32()); if ($3_1 != $3_1) { return Math_fround(NaN) } $3_1 = (wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); if (!($0_1 & 1073741824)) { break label$1 } } $3_1 = Math_fround(Math_fround($3_1 * $2_1) * Math_fround(.009999999776482582)) } return $3_1 } function $17($0_1, $1_1, $2_1, $3_1) { var $4_1 = 0, $5_1 = 0, $6_1 = 0; $0_1 = $0_1 * $1_1; $4_1 = $64($0_1); $4_1 = $4_1 < 0 ? $4_1 + 1 : $4_1; $6_1 = $4_1 != $4_1; label$1: { if (!($6_1 | !(Math_abs($4_1) < 1e-4))) { $0_1 = $0_1 - $4_1; break label$1 } label$3: { if ($4_1 != $4_1) { $0_1 = $0_1 - $4_1; break label$3 } $0_1 = $0_1 - $4_1; if (!(Math_abs($4_1 + -1) < 1e-4)) { break label$3 } $0_1 = $0_1 + 1; break label$1 } if ($2_1) { $0_1 = $0_1 + 1; break label$1 } if ($3_1) { break label$1 } $5_1 = 0; label$6: { if ($6_1) { break label$6 } $5_1 = 1; if ($4_1 > .5) { break label$6 } $5_1 = Math_abs($4_1 + -.5) < 1e-4 ? 1 : 0 } $0_1 = $0_1 + $5_1 } if ($0_1 != $0_1 | $1_1 != $1_1) { return Math_fround(NaN) } return Math_fround($0_1 / $1_1) } function $253($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0); $3_1 = Math_fround(NaN); $1_1 = HEAP32[$1_1 >> 2]; $4_1 = HEAPF32[$1_1 + 40 >> 2]; $1_1 = HEAP32[$1_1 + 40 >> 2]; $2_1 = 3; label$1: { if (($1_1 | 0) == 2141891242) { break label$1 } if (($1_1 | 0) == 2140081935) { $3_1 = Math_fround(0); $2_1 = 1; break label$1 } if (($1_1 | 0) == 2139156720) { $3_1 = Math_fround(0); $2_1 = 2; break label$1 } $2_1 = 0; if ($4_1 != $4_1) { break label$1 } $3_1 = (wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $2_1 = $1_1 & 1073741824 ? 2 : 1 } HEAP32[$0_1 >> 2] = $2_1; HEAPF64[$0_1 + 8 >> 3] = $3_1 } function $241($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0); $3_1 = 2; $1_1 = HEAP32[$1_1 >> 2] + ($2_1 << 2) | 0; $5_1 = HEAPF32[$1_1 + 116 >> 2]; label$1: { label$2: { $1_1 = HEAP32[$1_1 + 116 >> 2]; if (($1_1 | 0) != 2139156720) { $4_1 = NaN; if (($1_1 | 0) == 2141891242) { $3_1 = 3; break label$1 } if (($1_1 | 0) != 2140081935) { break label$2 } $4_1 = 0; $3_1 = 1; break label$1 } break label$1 } if ($5_1 != $5_1) { $3_1 = 0; break label$1 } $3_1 = $1_1 & 1073741824 ? 2 : 1; $4_1 = +(wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()) } HEAPF64[$0_1 + 8 >> 3] = $4_1; HEAP32[$0_1 >> 2] = $3_1 } function $264($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0); $3_1 = 2; $1_1 = HEAP32[$1_1 >> 2] + ($2_1 << 2) | 0; $5_1 = HEAPF32[$1_1 + 80 >> 2]; label$1: { label$2: { $1_1 = HEAP32[$1_1 + 80 >> 2]; if (($1_1 | 0) != 2139156720) { $4_1 = NaN; if (($1_1 | 0) == 2141891242) { $3_1 = 3; break label$1 } if (($1_1 | 0) != 2140081935) { break label$2 } $4_1 = 0; $3_1 = 1; break label$1 } break label$1 } if ($5_1 != $5_1) { $3_1 = 0; break label$1 } $3_1 = $1_1 & 1073741824 ? 2 : 1; $4_1 = +(wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()) } HEAPF64[$0_1 + 8 >> 3] = $4_1; HEAP32[$0_1 >> 2] = $3_1 } function $256($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0); $3_1 = 2; $1_1 = HEAP32[$1_1 >> 2] + ($2_1 << 2) | 0; $5_1 = HEAPF32[$1_1 + 44 >> 2]; label$1: { label$2: { $1_1 = HEAP32[$1_1 + 44 >> 2]; if (($1_1 | 0) != 2139156720) { $4_1 = NaN; if (($1_1 | 0) == 2141891242) { $3_1 = 3; break label$1 } if (($1_1 | 0) != 2140081935) { break label$2 } $4_1 = 0; $3_1 = 1; break label$1 } break label$1 } if ($5_1 != $5_1) { $3_1 = 0; break label$1 } $3_1 = $1_1 & 1073741824 ? 2 : 1; $4_1 = +(wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()) } HEAPF64[$0_1 + 8 >> 3] = $4_1; HEAP32[$0_1 >> 2] = $3_1 } function $210($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = Math_fround($2_1); $3_1 = $3_1 | 0; $4_1 = Math_fround($4_1); $5_1 = $5_1 | 0; var $6_1 = 0, $7_1 = 0; $6_1 = global$0 - 16 | 0; global$0 = $6_1; $7_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $7_1 = HEAP32[$7_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$7_1 | 0]($6_1, $1_1, $2_1, $3_1, $4_1, $5_1); $0_1 = $0(16); $1_1 = HEAP32[$6_1 + 12 >> 2]; HEAP32[$0_1 + 8 >> 2] = HEAP32[$6_1 + 8 >> 2]; HEAP32[$0_1 + 12 >> 2] = $1_1; $1_1 = HEAP32[$6_1 + 4 >> 2]; HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2]; HEAP32[$0_1 + 4 >> 2] = $1_1; global$0 = $6_1 + 16 | 0; return $0_1 | 0 } function $249($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0); $1_1 = HEAP32[$1_1 >> 2]; $4_1 = HEAPF32[$1_1 + 200 >> 2]; label$1: { label$2: { $1_1 = HEAP32[$1_1 + 200 >> 2]; if (($1_1 | 0) != 2139156720) { $3_1 = NaN; $2_1 = 3; if (($1_1 | 0) == 2141891242) { break label$1 } if (($1_1 | 0) != 2140081935) { break label$2 } $3_1 = 0; $2_1 = 1; break label$1 } $2_1 = 2; break label$1 } $2_1 = 0; if ($4_1 != $4_1) { break label$1 } $3_1 = +(wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $2_1 = $1_1 & 1073741824 ? 2 : 1 } $1_1 = $2_1; HEAPF64[$0_1 + 8 >> 3] = $3_1; HEAP32[$0_1 >> 2] = $1_1 } function $248($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0); $1_1 = HEAP32[$1_1 >> 2]; $4_1 = HEAPF32[$1_1 + 204 >> 2]; label$1: { label$2: { $1_1 = HEAP32[$1_1 + 204 >> 2]; if (($1_1 | 0) != 2139156720) { $3_1 = NaN; $2_1 = 3; if (($1_1 | 0) == 2141891242) { break label$1 } if (($1_1 | 0) != 2140081935) { break label$2 } $3_1 = 0; $2_1 = 1; break label$1 } $2_1 = 2; break label$1 } $2_1 = 0; if ($4_1 != $4_1) { break label$1 } $3_1 = +(wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $2_1 = $1_1 & 1073741824 ? 2 : 1 } $1_1 = $2_1; HEAPF64[$0_1 + 8 >> 3] = $3_1; HEAP32[$0_1 >> 2] = $1_1 } function $247($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0); $1_1 = HEAP32[$1_1 >> 2]; $4_1 = HEAPF32[$1_1 + 208 >> 2]; label$1: { label$2: { $1_1 = HEAP32[$1_1 + 208 >> 2]; if (($1_1 | 0) != 2139156720) { $3_1 = NaN; $2_1 = 3; if (($1_1 | 0) == 2141891242) { break label$1 } if (($1_1 | 0) != 2140081935) { break label$2 } $3_1 = 0; $2_1 = 1; break label$1 } $2_1 = 2; break label$1 } $2_1 = 0; if ($4_1 != $4_1) { break label$1 } $3_1 = +(wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $2_1 = $1_1 & 1073741824 ? 2 : 1 } $1_1 = $2_1; HEAPF64[$0_1 + 8 >> 3] = $3_1; HEAP32[$0_1 >> 2] = $1_1 } function $246($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0); $1_1 = HEAP32[$1_1 >> 2]; $4_1 = HEAPF32[$1_1 + 212 >> 2]; label$1: { label$2: { $1_1 = HEAP32[$1_1 + 212 >> 2]; if (($1_1 | 0) != 2139156720) { $3_1 = NaN; $2_1 = 3; if (($1_1 | 0) == 2141891242) { break label$1 } if (($1_1 | 0) != 2140081935) { break label$2 } $3_1 = 0; $2_1 = 1; break label$1 } $2_1 = 2; break label$1 } $2_1 = 0; if ($4_1 != $4_1) { break label$1 } $3_1 = +(wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $2_1 = $1_1 & 1073741824 ? 2 : 1 } $1_1 = $2_1; HEAPF64[$0_1 + 8 >> 3] = $3_1; HEAP32[$0_1 >> 2] = $1_1 } function $245($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0); $1_1 = HEAP32[$1_1 >> 2]; $4_1 = HEAPF32[$1_1 + 216 >> 2]; label$1: { label$2: { $1_1 = HEAP32[$1_1 + 216 >> 2]; if (($1_1 | 0) != 2139156720) { $3_1 = NaN; $2_1 = 3; if (($1_1 | 0) == 2141891242) { break label$1 } if (($1_1 | 0) != 2140081935) { break label$2 } $3_1 = 0; $2_1 = 1; break label$1 } $2_1 = 2; break label$1 } $2_1 = 0; if ($4_1 != $4_1) { break label$1 } $3_1 = +(wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $2_1 = $1_1 & 1073741824 ? 2 : 1 } $1_1 = $2_1; HEAPF64[$0_1 + 8 >> 3] = $3_1; HEAP32[$0_1 >> 2] = $1_1 } function $244($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0, $4_1 = Math_fround(0); $1_1 = HEAP32[$1_1 >> 2]; $4_1 = HEAPF32[$1_1 + 220 >> 2]; label$1: { label$2: { $1_1 = HEAP32[$1_1 + 220 >> 2]; if (($1_1 | 0) != 2139156720) { $3_1 = NaN; $2_1 = 3; if (($1_1 | 0) == 2141891242) { break label$1 } if (($1_1 | 0) != 2140081935) { break label$2 } $3_1 = 0; $2_1 = 1; break label$1 } $2_1 = 2; break label$1 } $2_1 = 0; if ($4_1 != $4_1) { break label$1 } $3_1 = +(wasm2js_scratch_store_i32(2, ($1_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()); $2_1 = $1_1 & 1073741824 ? 2 : 1 } $1_1 = $2_1; HEAPF64[$0_1 + 8 >> 3] = $3_1; HEAP32[$0_1 >> 2] = $1_1 } function $18($0_1, $1_1, $2_1) { var $3_1 = Math_fround(0); $1_1 = ($1_1 << 2) + $0_1 | 0; $3_1 = HEAPF32[$1_1 >> 2]; $1_1 = HEAP32[$1_1 >> 2]; label$1: { if (($1_1 | 0) == 2139156720 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242 | $3_1 == $3_1) { break label$1 } $1_1 = HEAP32[$0_1 + 28 >> 2]; $3_1 = HEAPF32[$0_1 + 28 >> 2]; if (($1_1 | 0) == 2139156720 | ($1_1 | 0) == 2140081935 | ($1_1 | 0) == 2141891242 | $3_1 == $3_1) { break label$1 } $3_1 = HEAPF32[$0_1 + 32 >> 2]; $0_1 = HEAP32[$0_1 + 32 >> 2]; if (!(($0_1 | 0) == 2139156720 | ($0_1 | 0) == 2140081935 | ($0_1 | 0) == 2141891242)) { $1_1 = $2_1; if ($3_1 != $3_1) { break label$1 } } $1_1 = $0_1 } return $1_1 } function $239($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = Math_fround(0), $3_1 = Math_fround(0); $0_1 = HEAP32[$0_1 >> 2] + ($1_1 << 2) | 0; $3_1 = HEAPF32[$0_1 + 188 >> 2]; label$1: { label$2: { $0_1 = HEAP32[$0_1 + 188 >> 2]; if (($0_1 | 0) == 2139156720 | ($0_1 | 0) == 2140081935) { break label$2 } $2_1 = Math_fround(NaN); if (($0_1 | 0) == 2141891242 | $3_1 != $3_1) { break label$1 } if (($0_1 | 0) == 2139156720) { break label$2 } return Math_fround((wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32())) } $2_1 = Math_fround(0) } return Math_fround($2_1) } function $214($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; $2_1 = global$0 - 16 | 0; global$0 = $2_1; $0_1 = HEAP32[$0_1 >> 2]; if (($1_1 | 0) < 6) { global$0 = $2_1 + 16 | 0; label$2: { label$3: { switch ($1_1 - 4 | 0) { case 0: $1_1 = $0_1 + 260 | 0; if ((HEAPU8[$0_1 + 300 | 0] & 3) == 2) { break label$2 } $1_1 = $0_1 + 252 | 0; break label$2; case 1: $1_1 = $0_1 + 252 | 0; if ((HEAPU8[$0_1 + 300 | 0] & 3) == 2) { break label$2 } $1_1 = $0_1 + 260 | 0; break label$2; default: break label$3 } } $1_1 = ($0_1 + ($1_1 << 2) | 0) + 252 | 0 } return +HEAPF32[$1_1 >> 2] } HEAP32[$2_1 >> 2] = 1904; $14($0_1, $2_1); $13(); wasm2js_trap() } function $213($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; $2_1 = global$0 - 16 | 0; global$0 = $2_1; $0_1 = HEAP32[$0_1 >> 2]; if (($1_1 | 0) < 6) { global$0 = $2_1 + 16 | 0; label$2: { label$3: { switch ($1_1 - 4 | 0) { case 0: $1_1 = $0_1 + 276 | 0; if ((HEAPU8[$0_1 + 300 | 0] & 3) == 2) { break label$2 } $1_1 = $0_1 + 268 | 0; break label$2; case 1: $1_1 = $0_1 + 268 | 0; if ((HEAPU8[$0_1 + 300 | 0] & 3) == 2) { break label$2 } $1_1 = $0_1 + 276 | 0; break label$2; default: break label$3 } } $1_1 = ($0_1 + ($1_1 << 2) | 0) + 268 | 0 } return +HEAPF32[$1_1 >> 2] } HEAP32[$2_1 >> 2] = 1904; $14($0_1, $2_1); $13(); wasm2js_trap() } function $212($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; $2_1 = global$0 - 16 | 0; global$0 = $2_1; $0_1 = HEAP32[$0_1 >> 2]; if (($1_1 | 0) < 6) { global$0 = $2_1 + 16 | 0; label$2: { label$3: { switch ($1_1 - 4 | 0) { case 0: $1_1 = $0_1 + 292 | 0; if ((HEAPU8[$0_1 + 300 | 0] & 3) == 2) { break label$2 } $1_1 = $0_1 + 284 | 0; break label$2; case 1: $1_1 = $0_1 + 284 | 0; if ((HEAPU8[$0_1 + 300 | 0] & 3) == 2) { break label$2 } $1_1 = $0_1 + 292 | 0; break label$2; default: break label$3 } } $1_1 = ($0_1 + ($1_1 << 2) | 0) + 284 | 0 } return +HEAPF32[$1_1 >> 2] } HEAP32[$2_1 >> 2] = 1904; $14($0_1, $2_1); $13(); wasm2js_trap() } function $83($0_1, $1_1) { var $2_1 = Math_fround(0); label$1: { if (($1_1 | 0) != 2139156720) { if (($1_1 | 0) != 2140081935) { if (($1_1 | 0) != 2141891242) { break label$1 } HEAP32[$0_1 >> 2] = 2143289344; HEAP32[$0_1 + 4 >> 2] = 3; return } HEAP32[$0_1 >> 2] = 0; HEAP32[$0_1 + 4 >> 2] = 1; return } HEAP32[$0_1 >> 2] = 0; HEAP32[$0_1 + 4 >> 2] = 2; return } $2_1 = (wasm2js_scratch_store_i32(2, $1_1), wasm2js_scratch_load_f32()); if ($2_1 != $2_1) { HEAP32[$0_1 >> 2] = 2143289344; HEAP32[$0_1 + 4 >> 2] = 0; return } HEAP32[$0_1 + 4 >> 2] = $1_1 & 1073741824 ? 2 : 1; HEAP32[$0_1 >> 2] = ($1_1 & -1073741825) + 536870912 } function $97($0_1, $1_1) { var $2_1 = 0, $3_1 = 0, $4_1 = 0; wasm2js_scratch_store_f64(+$0_1); $3_1 = wasm2js_scratch_load_i32(1) | 0; $4_1 = wasm2js_scratch_load_i32(0) | 0; $2_1 = $3_1 >>> 20 & 2047; if (($2_1 | 0) != 2047) { if (!$2_1) { if ($0_1 == 0) { $2_1 = 0 } else { $0_1 = $97($0_1 * 0x10000000000000000, $1_1); $2_1 = HEAP32[$1_1 >> 2] + -64 | 0 } HEAP32[$1_1 >> 2] = $2_1; return $0_1 } HEAP32[$1_1 >> 2] = $2_1 - 1022; wasm2js_scratch_store_i32(0, $4_1 | 0); wasm2js_scratch_store_i32(1, $3_1 & -2146435073 | 1071644672); $0_1 = +wasm2js_scratch_load_f64() } return $0_1 } function $71($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0; $2_1 = HEAP32[$0_1 + 24 >> 2]; label$1: { if (!($2_1 & 8)) { break label$1 } $1_1 = 1; if (($2_1 & 7168) == 5120) { break label$1 } $1_1 = 0; $3_1 = HEAP32[$0_1 + 560 >> 2]; $2_1 = HEAP32[$0_1 + 556 >> 2]; if (($3_1 | 0) == ($2_1 | 0)) { break label$1 } $0_1 = $3_1 - $2_1 >> 2; $3_1 = $0_1 >>> 0 <= 1 ? 1 : $0_1; $0_1 = 0; while (1) { $1_1 = HEAP32[HEAP32[$2_1 + ($0_1 << 2) >> 2] + 24 >> 2]; $1_1 = ($1_1 & 196608) != 131072 & ($1_1 & 57344) == 40960; if ($1_1) { break label$1 } $0_1 = $0_1 + 1 | 0; if (($3_1 | 0) != ($0_1 | 0)) { continue } break } } return $1_1 } function $271($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0); label$1: { $3_1 = Math_fround($1_1); $0_1 = HEAP32[$0_1 >> 2]; $4_1 = HEAPF32[$0_1 + 224 >> 2]; if ($3_1 == $4_1 | $3_1 != $3_1 & $4_1 != $4_1) { break label$1 } HEAPF32[$0_1 + 224 >> 2] = $3_1; while (1) { $2_1 = HEAPU8[$0_1 + 4 | 0]; if ($2_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $2_1 | 4; $2_1 = HEAP32[$0_1 + 20 >> 2]; if ($2_1) { FUNCTION_TABLE[$2_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $189($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0, $4_1 = 0; $3_1 = global$0 - 16 | 0; global$0 = $3_1; $4_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $4_1 = HEAP32[$4_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$4_1 | 0]($3_1, $1_1, $2_1); $0_1 = $0(16); $1_1 = HEAP32[$3_1 + 12 >> 2]; HEAP32[$0_1 + 8 >> 2] = HEAP32[$3_1 + 8 >> 2]; HEAP32[$0_1 + 12 >> 2] = $1_1; $1_1 = HEAP32[$3_1 + 4 >> 2]; HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2]; HEAP32[$0_1 + 4 >> 2] = $1_1; global$0 = $3_1 + 16 | 0; return $0_1 | 0 } function $291($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0); label$1: { $3_1 = Math_fround($1_1); $0_1 = HEAP32[$0_1 >> 2]; $4_1 = HEAPF32[$0_1 + 28 >> 2]; if ($3_1 == $4_1 | $3_1 != $3_1 & $4_1 != $4_1) { break label$1 } HEAPF32[$0_1 + 28 >> 2] = $3_1; while (1) { $2_1 = HEAPU8[$0_1 + 4 | 0]; if ($2_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $2_1 | 4; $2_1 = HEAP32[$0_1 + 20 >> 2]; if ($2_1) { FUNCTION_TABLE[$2_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $287($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0); label$1: { $3_1 = Math_fround($1_1); $0_1 = HEAP32[$0_1 >> 2]; $4_1 = HEAPF32[$0_1 + 32 >> 2]; if ($3_1 == $4_1 | $3_1 != $3_1 & $4_1 != $4_1) { break label$1 } HEAPF32[$0_1 + 32 >> 2] = $3_1; while (1) { $2_1 = HEAPU8[$0_1 + 4 | 0]; if ($2_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $2_1 | 4; $2_1 = HEAP32[$0_1 + 20 >> 2]; if ($2_1) { FUNCTION_TABLE[$2_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $286($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = +$1_1; var $2_1 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0); label$1: { $3_1 = Math_fround($1_1); $0_1 = HEAP32[$0_1 >> 2]; $4_1 = HEAPF32[$0_1 + 36 >> 2]; if ($3_1 == $4_1 | $3_1 != $3_1 & $4_1 != $4_1) { break label$1 } HEAPF32[$0_1 + 36 >> 2] = $3_1; while (1) { $2_1 = HEAPU8[$0_1 + 4 | 0]; if ($2_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $2_1 | 4; $2_1 = HEAP32[$0_1 + 20 >> 2]; if ($2_1) { FUNCTION_TABLE[$2_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $67($0_1, $1_1) { label$1: { if ($1_1) { $1_1 = $79(HEAP32[$1_1 >> 2]); break label$1 } label$3: { if (HEAPU8[7192]) { $1_1 = HEAP32[1797]; break label$3 } $1_1 = $0(28); HEAP32[$1_1 + 20 >> 2] = 1065353216; HEAP32[$1_1 + 24 >> 2] = 0; HEAP32[$1_1 + 12 >> 2] = 0; HEAP32[$1_1 + 16 >> 2] = 0; HEAP32[$1_1 >> 2] = 0; HEAP8[$1_1 + 8 | 0] = 0; HEAP32[$1_1 + 4 >> 2] = 1; HEAP32[1797] = $1_1; HEAP8[7192] = 1; HEAP32[1796] = HEAP32[1796] + 1 } $1_1 = $79($1_1) } HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 + 8 >> 2] = 0; HEAP32[$0_1 >> 2] = $1_1; HEAP32[$1_1 >> 2] = $0_1; return $0_1 } function $33($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = 0, $5_1 = 0; label$1: { if (!$1_1) { $3_1 = $0_1; break label$1 } while (1) { $3_1 = __wasm_i64_udiv($0_1, $1_1, 10); $4_1 = i64toi32_i32$HIGH_BITS; $0_1 = __wasm_i64_mul($3_1, $4_1, 246, 0) + $0_1 | 0; $2_1 = $2_1 - 1 | 0; HEAP8[$2_1 | 0] = $0_1 | 48; $5_1 = $1_1 >>> 0 > 9; $0_1 = $3_1; $1_1 = $4_1; if ($5_1) { continue } break } } if ($3_1) { while (1) { $2_1 = $2_1 - 1 | 0; $0_1 = ($3_1 >>> 0) / 10 | 0; HEAP8[$2_1 | 0] = Math_imul($0_1, 246) + $3_1 | 48; $1_1 = $3_1 >>> 0 > 9; $3_1 = $0_1; if ($1_1) { continue } break } } return $2_1 } function $52($0_1, $1_1) { var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0; label$1: { $2_1 = $0_1 + 24 | 0; if (HEAP32[$2_1 + 16 >> 2] == ($1_1 | 0)) { break label$1 } wasm2js_i32$0 = FUNCTION_TABLE[9]($2_1) | 0, wasm2js_i32$1 = $1_1, HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $242($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = Math_fround(0); $0_1 = HEAP32[$0_1 >> 2] + ($1_1 << 2) | 0; $3_1 = HEAPF32[$0_1 + 152 >> 2]; label$1: { label$2: { $0_1 = HEAP32[$0_1 + 152 >> 2]; if (($0_1 | 0) == 2139156720 | ($0_1 | 0) == 2140081935) { break label$2 } $2_1 = NaN; if (($0_1 | 0) == 2141891242 | $3_1 != $3_1) { break label$1 } if (($0_1 | 0) == 2139156720) { break label$2 } return +(wasm2js_scratch_store_i32(2, ($0_1 & -1073741825) + 536870912 | 0), wasm2js_scratch_load_f32()) } $2_1 = 0 } return +$2_1 } function $188($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0; $2_1 = global$0 - 16 | 0; global$0 = $2_1; $3_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $3_1 = HEAP32[$3_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$3_1 | 0]($2_1, $1_1); $0_1 = $0(16); $1_1 = HEAP32[$2_1 + 12 >> 2]; HEAP32[$0_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2]; HEAP32[$0_1 + 12 >> 2] = $1_1; $1_1 = HEAP32[$2_1 + 4 >> 2]; HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2]; HEAP32[$0_1 + 4 >> 2] = $1_1; global$0 = $2_1 + 16 | 0; return $0_1 | 0 } function $293($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; label$1: { $0_1 = HEAP32[$0_1 >> 2]; $2_1 = HEAP32[$0_1 + 24 >> 2]; if (($2_1 >>> 20 & 3) == ($1_1 | 0)) { break label$1 } HEAP32[$0_1 + 24 >> 2] = $2_1 & -3145729 | $1_1 << 20 & 3145728; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $292($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; label$1: { $0_1 = HEAP32[$0_1 >> 2]; $2_1 = HEAP32[$0_1 + 24 >> 2]; if (($2_1 >>> 22 & 1) == ($1_1 | 0)) { break label$1 } HEAP32[$0_1 + 24 >> 2] = $2_1 & -4194305 | $1_1 << 22 & 4194304; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $298($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; label$1: { $0_1 = HEAP32[$0_1 >> 2]; $2_1 = HEAP32[$0_1 + 24 >> 2]; if (($2_1 >>> 18 & 3) == ($1_1 | 0)) { break label$1 } HEAP32[$0_1 + 24 >> 2] = $2_1 & -786433 | $1_1 << 18 & 786432; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $136($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; label$1: { $0_1 = HEAP32[$0_1 >> 2]; $2_1 = HEAP32[$0_1 + 24 >> 2]; if (($2_1 >>> 16 & 3) == ($1_1 | 0)) { break label$1 } HEAP32[$0_1 + 24 >> 2] = $2_1 & -196609 | $1_1 << 16 & 196608; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $225($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0, $2_1 = 0; $2_1 = global$0 - 16 | 0; global$0 = $2_1; $0_1 = HEAP32[$0_1 >> 2]; if (HEAP32[$0_1 + 8 >> 2]) { while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if (!($1_1 & 4)) { HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } } break } global$0 = $2_1 + 16 | 0; return } HEAP32[$2_1 >> 2] = 1056; $14($0_1, $2_1); $13(); wasm2js_trap() } function __wasm_i64_mul($0_1, $1_1, $2_1, $3_1) { var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0; $4_1 = $2_1 >>> 16 | 0; $5_1 = $0_1 >>> 16 | 0; $9_1 = Math_imul($4_1, $5_1); $6_1 = $2_1 & 65535; $7_1 = $0_1 & 65535; $8_1 = Math_imul($6_1, $7_1); $5_1 = ($8_1 >>> 16 | 0) + Math_imul($5_1, $6_1) | 0; $4_1 = ($5_1 & 65535) + Math_imul($4_1, $7_1) | 0; i64toi32_i32$HIGH_BITS = (Math_imul($1_1, $2_1) + $9_1 | 0) + Math_imul($0_1, $3_1) + ($5_1 >>> 16) + ($4_1 >>> 16) | 0; return $8_1 & 65535 | $4_1 << 16 } function $297($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; label$1: { $0_1 = HEAP32[$0_1 >> 2]; $2_1 = HEAP32[$0_1 + 24 >> 2]; if (($2_1 >>> 4 & 7) == ($1_1 | 0)) { break label$1 } HEAP32[$0_1 + 24 >> 2] = $2_1 & -113 | $1_1 << 4 & 112; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $299($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; label$1: { $0_1 = HEAP32[$0_1 >> 2]; $2_1 = HEAP32[$0_1 + 24 >> 2]; if (($2_1 >>> 2 & 3) == ($1_1 | 0)) { break label$1 } HEAP32[$0_1 + 24 >> 2] = $2_1 & -13 | $1_1 << 2 & 12; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $267($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; label$1: { $0_1 = HEAP32[$0_1 >> 2]; $2_1 = HEAPU8[$0_1 + 4 | 0]; if ((($2_1 & 2) >>> 1 | 0) == ($1_1 | 0)) { break label$1 } HEAP8[$0_1 + 4 | 0] = $2_1 & 253 | ($1_1 ? 2 : 0); while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $87($0_1, $1_1) { var $2_1 = 0, $3_1 = 0; label$1: { label$2: { $2_1 = HEAP32[$0_1 + 556 >> 2]; $3_1 = HEAP32[$0_1 + 560 >> 2]; if (($2_1 | 0) == ($3_1 | 0)) { break label$2 } while (1) { if (HEAP32[$2_1 >> 2] == ($1_1 | 0)) { break label$2 } $2_1 = $2_1 + 4 | 0; if (($3_1 | 0) != ($2_1 | 0)) { continue } break } break label$1 } if (($2_1 | 0) == ($3_1 | 0)) { break label$1 } $1_1 = $2_1 + 4 | 0; wasm2js_memory_copy($2_1, $1_1, $3_1 - $1_1 | 0); HEAP32[$0_1 + 560 >> 2] = $3_1 - 4; return 1 } return 0 } function $42($0_1, $1_1, $2_1) { var $3_1 = 0; label$1: { $3_1 = $0_1 + 24 | 0; if (HEAP32[($3_1 + ($1_1 << 2) | 0) + 184 >> 2] == ($2_1 | 0)) { break label$1 } HEAP32[(($1_1 << 2) + $3_1 | 0) + 184 >> 2] = $2_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $41($0_1, $1_1, $2_1) { var $3_1 = 0; label$1: { $3_1 = $0_1 + 24 | 0; if (HEAP32[($3_1 + ($1_1 << 2) | 0) + 192 >> 2] == ($2_1 | 0)) { break label$1 } HEAP32[(($1_1 << 2) + $3_1 | 0) + 192 >> 2] = $2_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $31($0_1, $1_1, $2_1) { var $3_1 = 0; label$1: { $3_1 = $0_1 + 24 | 0; if (HEAP32[($3_1 + ($1_1 << 2) | 0) + 176 >> 2] == ($2_1 | 0)) { break label$1 } HEAP32[(($1_1 << 2) + $3_1 | 0) + 176 >> 2] = $2_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $77($0_1, $1_1, $2_1) { var $3_1 = 0; label$1: { $3_1 = $0_1 + 24 | 0; if (HEAP32[($3_1 + ($1_1 << 2) | 0) + 56 >> 2] == ($2_1 | 0)) { break label$1 } HEAP32[(($1_1 << 2) + $3_1 | 0) + 56 >> 2] = $2_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $76($0_1, $1_1, $2_1) { var $3_1 = 0; label$1: { $3_1 = $0_1 + 24 | 0; if (HEAP32[($3_1 + ($1_1 << 2) | 0) + 92 >> 2] == ($2_1 | 0)) { break label$1 } HEAP32[(($1_1 << 2) + $3_1 | 0) + 92 >> 2] = $2_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $51($0_1, $1_1, $2_1) { var $3_1 = 0; label$1: { $3_1 = $0_1 + 24 | 0; if (HEAP32[($3_1 + ($1_1 << 2) | 0) + 20 >> 2] == ($2_1 | 0)) { break label$1 } HEAP32[(($1_1 << 2) + $3_1 | 0) + 20 >> 2] = $2_1; while (1) { $1_1 = HEAPU8[$0_1 + 4 | 0]; if ($1_1 & 4) { break label$1 } HEAP8[$0_1 + 4 | 0] = $1_1 | 4; $1_1 = HEAP32[$0_1 + 20 >> 2]; if ($1_1) { FUNCTION_TABLE[$1_1 | 0]($0_1) } HEAP32[$0_1 + 308 >> 2] = 2143289344; $0_1 = HEAP32[$0_1 + 552 >> 2]; if ($0_1) { continue } break } } } function $231($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = Math_fround($2_1); $3_1 = $3_1 | 0; $4_1 = Math_fround($4_1); $5_1 = $5_1 | 0; var $6_1 = 0; $6_1 = global$0 - 16 | 0; global$0 = $6_1; $1_1 = HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2]; FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 8 >> 2]]($6_1, $1_1, $2_1, $3_1, $4_1, $5_1); HEAPF32[$0_1 >> 2] = HEAPF64[$6_1 >> 3]; HEAPF32[$0_1 + 4 >> 2] = HEAPF64[$6_1 + 8 >> 3]; global$0 = $6_1 + 16 | 0 } function $56($0_1) { var $1_1 = 0, $2_1 = 0; $1_1 = global$0 - 16 | 0; global$0 = $1_1; HEAP32[$0_1 + 32 >> 2] = 1; $2_1 = $0_1 + 4 | 0; $22($2_1); if (!$47(HEAP32[$0_1 + 44 >> 2], HEAP32[$0_1 + 48 >> 2])) { while (1) { $104($1_1 + 4 | 0, $0_1); $20($2_1); FUNCTION_TABLE[HEAP32[$1_1 + 4 >> 2]](HEAP32[$1_1 + 12 >> 2]); $22($2_1); if (!$47(HEAP32[$0_1 + 44 >> 2], HEAP32[$0_1 + 48 >> 2])) { continue } break } } $20($2_1); HEAP32[$0_1 + 32 >> 2] = 0; global$0 = $1_1 + 16 | 0 } function $45($0_1, $1_1) { var $2_1 = 0, $3_1 = Math_fround(0); $0_1 = $0_1 + 80 | 0; $2_1 = HEAP32[($1_1 << 2) + 4404 >> 2]; label$1: { if (($1_1 & -2) == 2) { $0_1 = $19($0_1, 5, $2_1, 2143289344); break label$1 } $0_1 = $18($0_1, $2_1, 2143289344) } if (($0_1 | 0) == 2139156720 | ($0_1 | 0) == 2140081935 | ($0_1 | 0) == 2141891242) { $0_1 = 1 } else { $3_1 = (wasm2js_scratch_store_i32(2, $0_1), wasm2js_scratch_load_f32()); $0_1 = $3_1 == $3_1 } return $0_1 } function $15($0_1, $1_1) { var $2_1 = 0, $3_1 = Math_fround(0); $0_1 = $0_1 + 80 | 0; $2_1 = HEAP32[($1_1 << 2) + 4388 >> 2]; label$1: { if (($1_1 & -2) == 2) { $0_1 = $19($0_1, 4, $2_1, 2143289344); break label$1 } $0_1 = $18($0_1, $2_1, 2143289344) } if (($0_1 | 0) == 2139156720 | ($0_1 | 0) == 2140081935 | ($0_1 | 0) == 2141891242) { $0_1 = 1 } else { $3_1 = (wasm2js_scratch_store_i32(2, $0_1), wasm2js_scratch_load_f32()); $0_1 = $3_1 == $3_1 } return $0_1 } function $108($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0; $1_1 = global$0 - 16 | 0; global$0 = $1_1; $2_1 = $0_1 + 4 | 0; $22($2_1); if (!$47(HEAP32[$0_1 + 44 >> 2], HEAP32[$0_1 + 48 >> 2])) { while (1) { $104($1_1 + 4 | 0, $0_1); $3_1 = HEAP32[$1_1 + 8 >> 2]; if ($3_1) { FUNCTION_TABLE[$3_1 | 0](HEAP32[$1_1 + 12 >> 2]) } if (!$47(HEAP32[$0_1 + 44 >> 2], HEAP32[$0_1 + 48 >> 2])) { continue } break } } $20($2_1); Atomics.store(HEAP32, $0_1 >> 2, 0); global$0 = $1_1 + 16 | 0 } function $80($0_1, $1_1) { var $2_1 = 0, $3_1 = 0, $4_1 = 0; $3_1 = global$0 - 16 | 0; global$0 = $3_1; $2_1 = HEAPU8[$0_1 + 4 | 0]; $4_1 = $2_1 & -17; HEAP8[$0_1 + 4 | 0] = $4_1; label$1: { if ($1_1) { if (HEAP32[$0_1 + 560 >> 2] != HEAP32[$0_1 + 556 >> 2]) { break label$1 } $2_1 = $4_1 | 8 } else { $2_1 = $2_1 & 231 } HEAP32[$0_1 + 8 >> 2] = $1_1; HEAP8[$0_1 + 4 | 0] = $2_1; global$0 = $3_1 + 16 | 0; return } HEAP32[$3_1 >> 2] = 4227; $14($0_1, $3_1); $13(); wasm2js_trap() } function $32($0_1) { var $1_1 = Math_fround(0), $2_1 = Math_fround(0); if (!HEAP32[$0_1 + 552 >> 2]) { return Math_fround(0) } $1_1 = HEAPF32[$0_1 + 36 >> 2]; label$2: { if ($1_1 == $1_1) { break label$2 } $1_1 = Math_fround(1); if (HEAP8[HEAP32[$0_1 + 568 >> 2] + 8 | 0] & 1) { break label$2 } $1_1 = Math_fround(0); $2_1 = HEAPF32[$0_1 + 28 >> 2]; if (!($2_1 < Math_fround(0))) { break label$2 } $1_1 = Math_fround(-$2_1) } return $1_1 } function $81($0_1) { var $1_1 = 0, $2_1 = Math_fround(0); $1_1 = 0; label$1: { if ((HEAP32[$0_1 + 24 >> 2] & 196608) == 131072) { break label$1 } label$2: { if (!HEAP32[$0_1 + 552 >> 2]) { break label$2 } $2_1 = HEAPF32[$0_1 + 32 >> 2]; if ($2_1 != $2_1) { $2_1 = HEAPF32[$0_1 + 28 >> 2]; if (!($2_1 > Math_fround(0))) { break label$2 } } $1_1 = 1; if ($2_1 != Math_fround(0)) { break label$1 } } $1_1 = $32($0_1) != Math_fround(0) } return $1_1 } function $99() { var $0_1 = 0, $1_1 = 0; label$1: { if (global$4) { if (Atomics.load(HEAP32, 2007)) { break label$1 } $0_1 = global$1; if (!HEAP32[$0_1 + 16 >> 2]) { HEAP32[$0_1 + 16 >> 2] = 1; $22(7856); $1_1 = $102(global$3); $20(7856); if (!(HEAP32[$1_1 + 32 >> 2] | !$1_1)) { $56($1_1) } HEAP32[$0_1 + 16 >> 2] = 0 } } return } fimport$32(Atomics.load(HEAP32, 2007) | 0); fimport$31(); wasm2js_trap() } function $183($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0; $2_1 = global$0 - 48 | 0; global$0 = $2_1; $3_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $3_1 = HEAP32[$3_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$3_1 | 0]($2_1, $1_1); $0_1 = $0(48); wasm2js_memory_copy($0_1, $2_1, 48); global$0 = $2_1 + 48 | 0; return $0_1 | 0 } function $36($0_1, $1_1, $2_1, $3_1) { var $4_1 = 0; HEAP32[$0_1 + 12 >> 2] = 0; HEAP32[$0_1 + 16 >> 2] = $3_1; label$1: { if ($1_1) { if ($1_1 >>> 0 >= 1073741824) { break label$1 } $4_1 = $0($1_1 << 2) } HEAP32[$0_1 >> 2] = $4_1; $2_1 = ($2_1 << 2) + $4_1 | 0; HEAP32[$0_1 + 8 >> 2] = $2_1; HEAP32[$0_1 + 12 >> 2] = ($1_1 << 2) + $4_1; HEAP32[$0_1 + 4 >> 2] = $2_1; return $0_1 } $54(); wasm2js_trap() } function $38($0_1, $1_1) { var $2_1 = 0; label$1: { if ($0_1 & 3 | (!$0_1 | ($1_1 | 0) < 0)) { break label$1 } if (!$1_1) { return } $2_1 = Atomics.compareExchange(HEAP32, 0 + 8032 >> 2, $0_1, 0) | 0; if (!(($1_1 | 0) == 2147483647 | ((($0_1 | 0) == ($2_1 | 0) ? $0_1 : $2_1) | 0) != ($0_1 | 0))) { if ($1_1 >>> 0 < 2) { break label$1 } $1_1 = $1_1 - 1 | 0 } Atomics.notify(HEAP32, $0_1 >> 2, $1_1 >>> 0) } } function $12($0_1, $1_1, $2_1, $3_1, $4_1) { var $5_1 = 0; $5_1 = global$0 - 256 | 0; global$0 = $5_1; if (!($4_1 & 73728 | ($2_1 | 0) <= ($3_1 | 0))) { $3_1 = $2_1 - $3_1 | 0; $2_1 = $3_1 >>> 0 < 256; $98($5_1, $1_1 & 255, $2_1 ? $3_1 : 256); if (!$2_1) { while (1) { $11($0_1, $5_1, 256); $3_1 = $3_1 - 256 | 0; if ($3_1 >>> 0 > 255) { continue } break } } $11($0_1, $5_1, $3_1) } global$0 = $5_1 + 256 | 0 } function $69($0_1) { var $1_1 = 0; $1_1 = HEAP32[$0_1 + 72 >> 2]; HEAP32[$0_1 + 72 >> 2] = $1_1 - 1 | $1_1; $1_1 = HEAP32[$0_1 >> 2]; if ($1_1 & 8) { HEAP32[$0_1 >> 2] = $1_1 | 32; return -1 } HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 + 8 >> 2] = 0; $1_1 = HEAP32[$0_1 + 44 >> 2]; HEAP32[$0_1 + 28 >> 2] = $1_1; HEAP32[$0_1 + 20 >> 2] = $1_1; HEAP32[$0_1 + 16 >> 2] = $1_1 + HEAP32[$0_1 + 48 >> 2]; return 0 } function $26($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = Math_fround(0); label$1: { if (($2_1 & -2) == 2) { $3_1 = $1_1 - -64 | 0; $4_1 = HEAPF32[$3_1 >> 2]; $3_1 = HEAP32[$3_1 >> 2]; if (($3_1 | 0) == 2139156720 | ($3_1 | 0) == 2140081935 | ($3_1 | 0) == 2141891242 | $4_1 == $4_1) { break label$1 } } $3_1 = HEAP32[((HEAP32[($2_1 << 2) + 4404 >> 2] << 2) + $1_1 | 0) + 44 >> 2] } $83($0_1, $3_1) } function $215($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $1_1 = HEAP32[$1_1 >> 2]; HEAPF64[$0_1 >> 3] = HEAPF32[$1_1 + 228 >> 2]; HEAPF64[$0_1 + 8 >> 3] = HEAPF32[$1_1 + 236 >> 2]; HEAPF64[$0_1 + 16 >> 3] = HEAPF32[$1_1 + 232 >> 2]; HEAPF64[$0_1 + 24 >> 3] = HEAPF32[$1_1 + 240 >> 2]; HEAPF64[$0_1 + 32 >> 3] = HEAPF32[$1_1 + 244 >> 2]; HEAPF64[$0_1 + 40 >> 3] = HEAPF32[$1_1 + 248 >> 2] } function $173($0_1, $1_1, $2_1, $3_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; $3_1 = $3_1 | 0; var $4_1 = 0; $4_1 = global$0 - 16 | 0; global$0 = $4_1; $0_1 = $116(fimport$21(HEAP32[$0_1 + 60 >> 2], $1_1 | 0, $2_1 | 0, $3_1 & 255, $4_1 + 8 | 0) | 0); global$0 = $4_1 + 16 | 0; i64toi32_i32$HIGH_BITS = $0_1 ? -1 : HEAP32[$4_1 + 12 >> 2]; return ($0_1 ? -1 : HEAP32[$4_1 + 8 >> 2]) | 0 } function $27($0_1, $1_1, $2_1) { var $3_1 = 0, $4_1 = Math_fround(0); label$1: { if (($2_1 & -2) == 2) { $3_1 = HEAP32[$1_1 + 60 >> 2]; $4_1 = HEAPF32[$1_1 + 60 >> 2]; if (($3_1 | 0) == 2139156720 | ($3_1 | 0) == 2140081935 | ($3_1 | 0) == 2141891242 | $4_1 == $4_1) { break label$1 } } $3_1 = HEAP32[((HEAP32[($2_1 << 2) + 4388 >> 2] << 2) + $1_1 | 0) + 44 >> 2] } $83($0_1, $3_1) } function $94($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0; $3_1 = HEAP32[$0_1 >> 2]; while (1) { $2_1 = HEAP8[$3_1 | 0]; if ($46($2_1)) { $3_1 = $3_1 + 1 | 0; HEAP32[$0_1 >> 2] = $3_1; if ($1_1 >>> 0 <= 214748364) { $2_1 = $2_1 - 48 | 0; $1_1 = Math_imul($1_1, 10); $1_1 = ($2_1 | 0) > ($1_1 ^ 2147483647) ? -1 : $2_1 + $1_1 | 0 } else { $1_1 = -1 } continue } break } return $1_1 } function $103() { var $0_1 = 0, $1_1 = 0; label$1: { label$2: { while (1) { $1_1 = 10; label$4: { $0_1 = HEAP32[1956]; switch (($0_1 & 2147483647) - 2147483646 | 0) { case 1: break label$1; case 0: break label$2; default: break label$4 } } if (($16(7824, $0_1, $0_1 + 1 | 0) | 0) != ($0_1 | 0)) { continue } break } return 0 } $1_1 = 6 } return $1_1 } function $102($0_1) { var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0; $3_1 = HEAP32[1971]; label$1: { if (($3_1 | 0) <= 0) { break label$1 } $4_1 = HEAP32[1970]; while (1) { $2_1 = HEAP32[($1_1 << 2) + $4_1 >> 2]; if (HEAP32[$2_1 + 28 >> 2] == ($0_1 | 0)) { break label$1 } $1_1 = $1_1 + 1 | 0; if (($3_1 | 0) != ($1_1 | 0)) { continue } break } $2_1 = 0 } return $2_1 } function $104($0_1, $1_1) { var $2_1 = 0, $3_1 = 0, $4_1 = 0; $3_1 = HEAP32[$1_1 + 44 >> 2]; $2_1 = HEAP32[$1_1 + 36 >> 2] + Math_imul($3_1, 12) | 0; $4_1 = HEAP32[$2_1 + 4 >> 2]; HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2]; HEAP32[$0_1 + 4 >> 2] = $4_1; HEAP32[$0_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2]; HEAP32[$1_1 + 44 >> 2] = ($3_1 + 1 | 0) % HEAP32[$1_1 + 40 >> 2] } function $233($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0, $3_1 = 0; $2_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$2_1 + 556 >> 2]; label$1: { if (HEAP32[$2_1 + 560 >> 2] - $0_1 >> 2 >>> 0 <= $1_1 >>> 0) { break label$1 } $0_1 = HEAP32[$0_1 + ($1_1 << 2) >> 2]; if (!$0_1) { break label$1 } $3_1 = HEAP32[$0_1 >> 2] } return $3_1 | 0 } function $150() { var $0_1 = 0, $1_1 = 0; $1_1 = $0(4); $0_1 = $0(28); HEAP32[$0_1 + 20 >> 2] = 1065353216; HEAP32[$0_1 + 24 >> 2] = 0; HEAP32[$0_1 + 12 >> 2] = 0; HEAP32[$0_1 + 16 >> 2] = 0; HEAP32[$0_1 >> 2] = 0; HEAP8[$0_1 + 8 | 0] = 0; HEAP32[$0_1 + 4 >> 2] = 1; HEAP32[1796] = HEAP32[1796] + 1; HEAP32[$1_1 >> 2] = $0_1; return $1_1 | 0 } function $184($0_1, $1_1, $2_1, $3_1, $4_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; $3_1 = +$3_1; $4_1 = $4_1 | 0; var $5_1 = 0; $5_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $5_1 = HEAP32[$5_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$5_1 | 0]($1_1, $2_1, $3_1, $4_1) } function $185($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0; $3_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $3_1 = HEAP32[$3_1 + HEAP32[$1_1 >> 2] >> 2] } return Math_fround(Math_fround(FUNCTION_TABLE[$3_1 | 0]($1_1, $2_1))) } function $63($0_1, $1_1) { return ((wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 <= 2139095040 ? ((wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095040 ? $0_1 : Math_fround(Math_min($0_1, $1_1)) : $1_1 } function $206($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0; wasm2js_i32$0 = $0_1, wasm2js_i32$1 = fimport$16((HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1) | 0, 7212, HEAP32[$2_1 >> 2]) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1 } function $201($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0; wasm2js_i32$0 = $0_1, wasm2js_i32$1 = fimport$16((HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1) | 0, 7218, HEAP32[$2_1 >> 2]) | 0, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1 } function $1($0_1, $1_1) { return ((wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 <= 2139095040 ? ((wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095040 ? $0_1 : Math_fround(Math_max($0_1, $1_1)) : $1_1 } function $149($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; if ($1_1 >>> 0 < 3) { $1_1 = 1 << $1_1; $0_1 = HEAP32[$0_1 >> 2]; if ($2_1) { $1_1 = $1_1 | HEAP32[$0_1 + 12 >> 2] } else { $1_1 = HEAP32[$0_1 + 12 >> 2] & ($1_1 ^ -1) } HEAP32[$0_1 + 12 >> 2] = $1_1; return } fimport$4(); wasm2js_trap() } function $124($0_1, $1_1, $2_1, $3_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; $3_1 = $3_1 | 0; var $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $4_1 = HEAP32[$4_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$4_1 | 0]($1_1, $2_1, $3_1) } function $191($0_1, $1_1, $2_1, $3_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; $3_1 = +$3_1; var $4_1 = 0; $4_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $4_1 = HEAP32[$4_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$4_1 | 0]($1_1, $2_1, $3_1) } function $199($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = Math_fround($2_1); var $3_1 = 0; $3_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $3_1 = HEAP32[$3_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$3_1 | 0]($1_1, $2_1) } function $123($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0; $3_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $3_1 = HEAP32[$3_1 + HEAP32[$1_1 >> 2] >> 2] } return FUNCTION_TABLE[$3_1 | 0]($1_1, $2_1) | 0 } function $186($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0; $3_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $3_1 = HEAP32[$3_1 + HEAP32[$1_1 >> 2] >> 2] } return +FUNCTION_TABLE[$3_1 | 0]($1_1, $2_1) } function $59($0_1, $1_1) { var $2_1 = 0, $3_1 = 0; label$1: { if (HEAP8[global$1 + 4 | 0] & 1) { $2_1 = HEAP32[global$1 >> 2]; break label$1 } $3_1 = global$1; $2_1 = fimport$12(1, 4560) | 0; HEAP8[$3_1 + 4 | 0] = 1; HEAP32[$3_1 >> 2] = $2_1 } fimport$20($2_1 | 0, $0_1 | 0, $1_1 | 0, 0) } function $0($0_1) { var $1_1 = 0; $0_1 = $0_1 >>> 0 <= 1 ? 1 : $0_1; label$1: { while (1) { $1_1 = $29($0_1); if ($1_1) { break label$1 } $1_1 = Atomics.load(HEAP32, 2270); if ($1_1) { FUNCTION_TABLE[$1_1 | 0](); continue } break } fimport$4(); wasm2js_trap() } return $1_1 } function $24($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; var $3_1 = 0; $3_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $3_1 = HEAP32[$3_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$3_1 | 0]($1_1, $2_1) } function $190($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; var $3_1 = 0; $3_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $3_1 = HEAP32[$3_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$3_1 | 0]($1_1, $2_1) } function $159() { var $0_1 = 0, $1_1 = 0, $2_1 = 0; $0_1 = global$1; $2_1 = global$3; $1_1 = HEAP32[$2_1 + 116 >> 2]; if ($1_1) { HEAP32[$2_1 + 116 >> 2] = 0; $132($1_1); return $1_1 | 0 } if ($0_1 ? global$2 : 1) { global$2 = 1; $0_1 = $49(4, 20) } $132($0_1); return $0_1 | 0 } function $128($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; $2_1 = global$0 - 16 | 0; global$0 = $2_1; HEAP32[$2_1 + 12 >> 2] = $1_1; $0_1 = FUNCTION_TABLE[$0_1 | 0]($2_1 + 12 | 0) | 0; fimport$7(HEAP32[$2_1 + 12 >> 2]); global$0 = $2_1 + 16 | 0; return $0_1 | 0 } function $28($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; $2_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $2_1 = HEAP32[$2_1 + HEAP32[$1_1 >> 2] >> 2] } return FUNCTION_TABLE[$2_1 | 0]($1_1) | 0 } function $187($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; $2_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $2_1 = HEAP32[$2_1 + HEAP32[$1_1 >> 2] >> 2] } return +FUNCTION_TABLE[$2_1 | 0]($1_1) } function $127($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; $2_1 = HEAP32[$0_1 >> 2]; $0_1 = HEAP32[$0_1 + 4 >> 2]; $1_1 = ($0_1 >> 1) + $1_1 | 0; if ($0_1 & 1) { $2_1 = HEAP32[$2_1 + HEAP32[$1_1 >> 2] >> 2] } FUNCTION_TABLE[$2_1 | 0]($1_1) } function $228($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; $2_1 = HEAP32[$0_1 + 8 >> 2]; HEAP32[$0_1 + 8 >> 2] = $1_1; if ($2_1) { FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 4 >> 2]]($2_1) } HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2] = 15 } function $250($0_1) { $0_1 = $0_1 | 0; var $1_1 = Math_fround(0); $0_1 = HEAP32[$0_1 >> 2]; $1_1 = HEAPF32[$0_1 + 36 >> 2]; if ($1_1 != $1_1) { $1_1 = HEAP8[HEAP32[$0_1 + 568 >> 2] + 8 | 0] & 1 ? Math_fround(1) : Math_fround(0) } return +$1_1 } function $232($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; var $2_1 = 0; $2_1 = HEAP32[$0_1 + 4 >> 2]; HEAP32[$0_1 + 4 >> 2] = $1_1; if ($2_1) { FUNCTION_TABLE[HEAP32[HEAP32[$2_1 >> 2] + 4 >> 2]]($2_1) } $80(HEAP32[$0_1 >> 2], 14) } function $105($0_1) { var $1_1 = 0; if (HEAP32[$0_1 + 4 >> 2] >= 129) { $1_1 = HEAP32[1822]; if ($1_1) { while (1) { $58(7288, 7292, $1_1); $1_1 = HEAP32[1822]; if ($1_1) { continue } break } } } $8(HEAP32[$0_1 + 36 >> 2]); $8($0_1) } function $154($0_1, $1_1, $2_1, $3_1, $4_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; $3_1 = $3_1 | 0; $4_1 = $4_1 | 0; if (!($2_1 ? ($2_1 | 0) != 5 : 0)) { return $78(5768, $3_1, $4_1) | 0 } return $78(5976, $3_1, $4_1) | 0 } function $226($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0; $1_1 = HEAP32[$0_1 + 8 >> 2]; HEAP32[$0_1 + 8 >> 2] = 0; if ($1_1) { FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2]]($1_1) } HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2] = 0 } function $122($0_1, $1_1) { var $2_1 = 0, $3_1 = 0; $2_1 = $0(4); HEAP32[$2_1 >> 2] = $1_1; $3_1 = $0(4); HEAP32[$3_1 >> 2] = $1_1; fimport$8(7211, $0_1 | 0, 7258, 4810, 196, $2_1 | 0, 7258, 4814, 197, $3_1 | 0) } function $35($0_1, $1_1) { var $2_1 = 0, $3_1 = 0; $2_1 = $0(4); HEAP32[$2_1 >> 2] = $1_1; $3_1 = $0(4); HEAP32[$3_1 >> 2] = $1_1; fimport$8(7224, $0_1 | 0, 7258, 4810, 194, $2_1 | 0, 7258, 4814, 195, $3_1 | 0) } function $230($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0; $1_1 = HEAP32[$0_1 + 4 >> 2]; HEAP32[$0_1 + 4 >> 2] = 0; if ($1_1) { FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 4 >> 2]]($1_1) } $80(HEAP32[$0_1 >> 2], 0) } function $116($0_1) { var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0; if (!$0_1) { return 0 } wasm2js_i32$0 = $43(), wasm2js_i32$1 = $0_1, HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1; return -1 } function $208($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0; $1_1 = $0(12); HEAP8[$1_1 + 4 | 0] = 0; HEAP32[$1_1 + 8 >> 2] = HEAP32[$0_1 >> 2]; HEAP32[$0_1 >> 2] = 0; HEAP32[$1_1 >> 2] = 4528; return $1_1 | 0 } function $202($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0; $1_1 = $0(12); HEAP8[$1_1 + 4 | 0] = 0; HEAP32[$1_1 + 8 >> 2] = HEAP32[$0_1 >> 2]; HEAP32[$0_1 >> 2] = 0; HEAP32[$1_1 >> 2] = 4648; return $1_1 | 0 } function $155($0_1, $1_1, $2_1, $3_1, $4_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; $3_1 = $3_1 | 0; $4_1 = $4_1 | 0; return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1) | 0 } function $109($0_1, $1_1) { var $2_1 = 0; $2_1 = global$0 - 16 | 0; global$0 = $2_1; if (!$0_1) { HEAP32[$2_1 >> 2] = $1_1; $14(0, $2_1); $13(); wasm2js_trap() } global$0 = $2_1 + 16 | 0 } function $85($0_1, $1_1, $2_1) { if ($15($0_1, $1_1)) { return $21($0_1, $1_1, $2_1) } $2_1 = $37($0_1, $1_1, $2_1); if ($2_1 == $2_1) { $2_1 = Math_fround(-$2_1) } return $2_1 } function $177() { var $0_1 = 0; $0_1 = HEAP32[1808]; if ($0_1) { while (1) { FUNCTION_TABLE[HEAP32[$0_1 >> 2]](); $0_1 = HEAP32[$0_1 + 4 >> 2]; if ($0_1) { continue } break } } } function $120($0_1) { $0_1 = $0_1 | 0; HEAP32[$0_1 >> 2] = 4668; if (HEAPU8[$0_1 + 4 | 0]) { $59(HEAP32[$0_1 + 8 >> 2], 1791) } fimport$7(HEAP32[$0_1 + 8 >> 2]); return $0_1 | 0 } function $118($0_1) { $0_1 = $0_1 | 0; HEAP32[$0_1 >> 2] = 4548; if (HEAPU8[$0_1 + 4 | 0]) { $59(HEAP32[$0_1 + 8 >> 2], 1791) } fimport$7(HEAP32[$0_1 + 8 >> 2]); return $0_1 | 0 } function $172() { var $0_1 = 0; $0_1 = HEAP32[global$3 + 120 >> 2]; Atomics.store(HEAP32, $0_1 >> 2, 1); $56($0_1); Atomics.compareExchange(HEAP32, $0_1 >> 2, 1, 0) | 0 } function $144($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; if ($1_1 >>> 0 >= 3) { fimport$4(); wasm2js_trap() } return HEAP32[HEAP32[$0_1 >> 2] + 12 >> 2] >>> $1_1 & 1 } function $158($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; $3_1 = $3_1 | 0; $4_1 = $4_1 | 0; $5_1 = $5_1 | 0; $86($0_1, $2_1, $3_1) } function $243($0_1) { $0_1 = $0_1 | 0; var $1_1 = Math_fround(0); $1_1 = HEAPF32[HEAP32[$0_1 >> 2] + 224 >> 2]; return +($1_1 != $1_1 ? Math_fround(NaN) : $1_1) } function $252($0_1) { $0_1 = $0_1 | 0; var $1_1 = Math_fround(0); $1_1 = HEAPF32[HEAP32[$0_1 >> 2] + 32 >> 2]; return +($1_1 == $1_1 ? $1_1 : Math_fround(0)) } function $197() { var $0_1 = 0; $0_1 = $0(16); HEAP32[$0_1 >> 2] = 0; HEAP32[$0_1 + 4 >> 2] = 0; HEAP32[$0_1 + 8 >> 2] = 0; HEAP32[$0_1 + 12 >> 2] = 0; return $0_1 | 0 } function $114($0_1, $1_1) { var $2_1 = 0; if ($0_1 >>> 0 <= 2) { $2_1 = global$3; if ($1_1) { HEAP32[$1_1 >> 2] = HEAPU8[$2_1 + 40 | 0] } HEAP8[$2_1 + 40 | 0] = $0_1 } } function $68($0_1) { $0_1 = $0_1 | 0; var $1_1 = 0; if ($0_1) { $1_1 = HEAP32[$0_1 >> 2]; if ($1_1) { $8($1_1) } HEAP32[1796] = HEAP32[1796] - 1; $8($0_1) } } function $170($0_1) { $0_1 = $0_1 | 0; Atomics.store(HEAP32, $0_1 >> 2, 1); $56($0_1); Atomics.compareExchange(HEAP32, $0_1 >> 2, 1, 0) | 0 } function $55($0_1, $1_1) { $1_1 = Atomics.compareExchange(HEAP32, 0 + 8032 >> 2, $0_1, $1_1) | 0; return ($0_1 | 0) == ($1_1 | 0) ? $0_1 : $1_1 } function $227($0_1) { $0_1 = $0_1 | 0; $0_1 = HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]; FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 8 >> 2]]($0_1) } function $161($0_1, $1_1, $2_1, $3_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; $3_1 = $3_1 | 0; i64toi32_i32$HIGH_BITS = 0; return 0 } function $147($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $0_1 = HEAP32[$0_1 >> 2]; HEAP32[$0_1 + 16 >> 2] = HEAP32[$0_1 + 16 >> 2] & -2 | $1_1 } function $196() { var $0_1 = 0; $0_1 = $0(16); HEAP32[$0_1 + 8 >> 2] = 0; HEAP32[$0_1 + 12 >> 2] = 0; HEAP32[$0_1 >> 2] = 0; return $0_1 | 0 } function $145($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $0_1 = HEAP32[$0_1 >> 2]; HEAP8[$0_1 + 8 | 0] = HEAPU8[$0_1 + 8 | 0] & 254 | $1_1 } function $234($0_1) { $0_1 = $0_1 | 0; $0_1 = HEAP32[HEAP32[$0_1 >> 2] + 552 >> 2]; if (!$0_1) { return 0 } return HEAP32[$0_1 >> 2] } function $235($0_1) { $0_1 = $0_1 | 0; $0_1 = HEAP32[$0_1 >> 2]; return HEAP32[$0_1 + 560 >> 2] - HEAP32[$0_1 + 556 >> 2] >> 2 } function $194($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = $2_1 | 0; HEAP32[HEAP32[$0_1 >> 2] + $1_1 >> 2] = $2_1 } function $60($0_1, $1_1, $2_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $2_1 = +$2_1; HEAPF64[HEAP32[$0_1 >> 2] + $1_1 >> 3] = $2_1 } function $48($0_1) { $0_1 = $0_1 | 0; if ($0_1) { FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 4 >> 2]]($0_1) } } function $152($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; HEAP32[$0_1 + 4 >> 2] = 10; HEAP32[$0_1 >> 2] = $1_1 } function $151($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; HEAP32[$0_1 + 4 >> 2] = 13; HEAP32[$0_1 >> 2] = $1_1 } function $153($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; HEAP32[$0_1 + 4 >> 2] = 7; HEAP32[$0_1 >> 2] = $1_1 } function $79($0_1) { var $1_1 = 0; $1_1 = $115($0(588), $0_1); $109(($0_1 | 0) != 0, 2840); return $1_1 } function $61($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; return +HEAPF64[HEAP32[$0_1 >> 2] + $1_1 >> 3] } function $195($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + $1_1 >> 2] } function $16($0_1, $1_1, $2_1) { return Atomics.compareExchange(HEAP32, $0_1 >> 2, $1_1, $2_1) | 0 } function $88($0_1, $1_1, $2_1) { return Math_fround($2($0_1, $1_1, $2_1) + $5($0_1, $1_1, $2_1)) } function $192($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; return FUNCTION_TABLE[$0_1 | 0]($1_1) | 0 } function $129($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($1_1) } function $294($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $51(HEAP32[$0_1 >> 2], $1_1, 2141891242) } function $198() { var $0_1 = 0; $0_1 = $0(48); wasm2js_memory_fill($0_1, 0, 48); return $0_1 | 0 } function $146($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2] = $1_1 } function $218($0_1) { $0_1 = $0_1 | 0; $0_1 = global$0 - $0_1 & -16; global$0 = $0_1; return $0_1 | 0 } function $13() { FUNCTION_TABLE[Atomics.load(HEAP32, 1530) | 0](); $54(); wasm2js_trap() } function $89($0_1, $1_1, $2_1, $3_1) { fimport$22($0_1 | 0, $1_1 | 0, 8, 0, $2_1 | 0, -1, $3_1 | 0) } function $157($0_1) { $0_1 = $0_1 | 0; $0_1 = HEAP32[$0_1 + 44 >> 2]; $98($0_1, 0, 136); $8($0_1) } function $125($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; FUNCTION_TABLE[$0_1 | 0]($1_1) } function $302($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $53(HEAP32[$0_1 >> 2], 5, $1_1) } function $301($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $53(HEAP32[$0_1 >> 2], 6, $1_1) } function $300($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; $53(HEAP32[$0_1 >> 2], 7, $1_1) } function $251($0_1, $1_1) { $0_1 = $0_1 | 0; $1_1 = $1_1 | 0; global$7 = $0_1; global$6 = $1_1 } function $261($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2] >>> 10 & 7 } function $260($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2] >>> 13 & 7 } function $258($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2] >>> 18 & 3 } function $255($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2] >>> 20 & 3 } function $254($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2] >>> 22 & 1 } function $238($0_1) { $0_1 = $0_1 | 0; return (HEAPU8[HEAP32[$0_1 >> 2] + 4 | 0] & 2) >>> 1 | 0 } function $224($0_1) { $0_1 = $0_1 | 0; return (HEAPU8[HEAP32[$0_1 >> 2] + 4 | 0] & 4) >>> 2 | 0 } function $263($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2] >>> 7 & 7 } function $259($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2] >>> 2 & 3 } function $257($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2] >>> 4 & 7 } function $265($0_1) { $0_1 = $0_1 | 0; return HEAPU16[HEAP32[$0_1 >> 2] + 26 >> 1] & 3 } function $175($0_1) { $0_1 = $0_1 | 0; return fimport$34(HEAP32[$0_1 + 60 >> 2]) | 0 } function $86($0_1, $1_1, $2_1) { global$3 = $0_1; global$4 = $1_1; global$5 = $2_1 } function $222($0_1) { $0_1 = $0_1 | 0; return +HEAPF32[HEAP32[$0_1 >> 2] + 228 >> 2] } function $221($0_1) { $0_1 = $0_1 | 0; return +HEAPF32[HEAP32[$0_1 >> 2] + 236 >> 2] } function $220($0_1) { $0_1 = $0_1 | 0; return +HEAPF32[HEAP32[$0_1 >> 2] + 232 >> 2] } function $219($0_1) { $0_1 = $0_1 | 0; return +HEAPF32[HEAP32[$0_1 >> 2] + 240 >> 2] } function $217($0_1) { $0_1 = $0_1 | 0; return +HEAPF32[HEAP32[$0_1 >> 2] + 244 >> 2] } function $216($0_1) { $0_1 = $0_1 | 0; return +HEAPF32[HEAP32[$0_1 >> 2] + 248 >> 2] } function $143($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2] & 1 } function $110($0_1, $1_1) { return Atomics.exchange(HEAP32, $0_1 >> 2, $1_1) } function $142($0_1) { $0_1 = $0_1 | 0; return HEAP32[HEAP32[$0_1 >> 2] + 16 >> 2] } function $141($0_1) { $0_1 = $0_1 | 0; return HEAP8[HEAP32[$0_1 >> 2] + 8 | 0] & 1 } function $283($0_1) { $0_1 = $0_1 | 0; $31(HEAP32[$0_1 >> 2], 0, 2141891242) } function $280($0_1) { $0_1 = $0_1 | 0; $31(HEAP32[$0_1 >> 2], 1, 2141891242) } function $126($0_1) { $0_1 = $0_1 | 0; return FUNCTION_TABLE[$0_1 | 0]() | 0 } function $132($0_1) { global$1 = $0_1; wasm2js_memory_fill($0_1, 0, 20) } function $288($0_1) { $0_1 = $0_1 | 0; $52(HEAP32[$0_1 >> 2], 2141891242) } function $78($0_1, $1_1, $2_1) { return $96($0_1, $1_1, $2_1, 2, 3) } function $181($0_1) { $0_1 = $0_1 | 0; $59(HEAP32[$0_1 + 8 >> 2], 3325) } function $139($0_1) { $0_1 = $0_1 | 0; return $67($0(12), $0_1) | 0 } function $29($0_1) { $0_1 = $0_1 | 0; return $49(8, $0_1) | 0 } function $165() { Atomics.store(HEAP32, 2007, global$3) } function $90($0_1) { Atomics.store(HEAP32, $0_1 >> 2, 0) } function $62($0_1) { $0_1 = $0_1 | 0; if ($0_1) { $8($0_1) } } function $130($0_1) { $0_1 = $0_1 | 0; HEAP8[$0_1 + 4 | 0] = 1 } function $112($0_1) { Atomics.add(HEAP32, $0_1 >> 2, 1) } function $111($0_1) { Atomics.sub(HEAP32, $0_1 >> 2, 1) } function $47($0_1, $1_1) { return ($0_1 | 0) == ($1_1 | 0) } function $182($0_1) { $0_1 = $0_1 | 0; $8($120($0_1)) } function $180($0_1) { $0_1 = $0_1 | 0; $8($118($0_1)) } function $119($0_1) { $0_1 = $0_1 | 0; wasm2js_trap() } function $229($0_1) { $0_1 = $0_1 | 0; global$0 = $0_1 } function $10($0_1) { $0_1 = $0_1 | 0; return $0_1 | 0 } function $211($0_1) { $0_1 = $0_1 | 0; return 7208 } function $209($0_1) { $0_1 = $0_1 | 0; return 7212 } function $205($0_1) { $0_1 = $0_1 | 0; return 7215 } function $204($0_1) { $0_1 = $0_1 | 0; return 7218 } function $200($0_1) { $0_1 = $0_1 | 0; return 7221 } function $193($0_1) { $0_1 = $0_1 | 0; return 7226 } function $171($0_1) { $0_1 = $0_1 | 0; $108($0_1) } function $54() { fimport$4(); wasm2js_trap() } function $46($0_1) { return $0_1 - 48 >>> 0 < 10 } function $262($0_1) { $0_1 = $0_1 | 0; $8($0_1) } function $162($0_1) { $0_1 = $0_1 | 0; return 0 } function $140() { return $67($0(12), 0) | 0 } function $91() { $54(); wasm2js_trap() } function $43() { return global$3 + 28 | 0 } function $240() { return global$0 | 0 } function $176() { return global$3 | 0 } function $40($0_1) { $38($0_1, 1) }
              // EMSCRIPTEN_END_FUNCS

              ;
              bufferView = HEAPU8;
              var FUNCTION_TABLE = Table([null, $154, $164, $163, $10, $153, $152, $151, $10, $10, $10, $10, $10, $10, $231, $227, $131, $211, $48, $210, $209, $10, $10, $48, $130, $129, $128, $208, $207, $206, $205, $48, $127, $204, $10, $10, $48, $130, $129, $128, $202, $201, $200, $68, $126, $150, $125, $68, $149, $124, $148, $199, $147, $24, $146, $24, $145, $144, $123, $143, $28, $142, $28, $141, $198, $62, $197, $62, $196, $62, $61, $60, $195, $194, $193, $66, $126, $140, $192, $139, $125, $66, $138, $127, $137, $24, $136, $24, $135, $191, $134, $302, $301, $300, $299, $298, $297, $296, $295, $294, $293, $292, $291, $190, $290, $289, $288, $287, $286, $285, $284, $283, $282, $281, $280, $279, $278, $277, $276, $275, $274, $273, $272, $271, $270, $269, $268, $266, $265, $28, $264, $189, $263, $261, $260, $259, $258, $257, $256, $253, $188, $252, $187, $250, $249, $248, $247, $246, $245, $244, $243, $242, $186, $255, $254, $241, $239, $185, $237, $124, $236, $24, $235, $28, $234, $28, $233, $123, $238, $28, $267, $24, $232, $24, $230, $228, $24, $226, $225, $224, $28, $223, $184, $222, $221, $220, $219, $217, $216, $215, $183, $214, $213, $212, $61, $60, $61, $60, $117, $171, $170, $101, $118, $180, $179, $119, $91, $120, $182, $181, $119, $175, $174, $173, $162, $161, $160, $91]);
              $203();
              function __wasm_memory_size() {
                return buffer.byteLength / 65536 | 0;
              }

              function __wasm_memory_grow(pagesToAdd) {
                pagesToAdd = pagesToAdd | 0;
                var oldPages = __wasm_memory_size() | 0;
                var newPages = oldPages + pagesToAdd | 0;
                if ((oldPages < newPages) && (newPages < 65536)) {
                  var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
                  var newHEAP8 = new Int8Array(newBuffer);
                  newHEAP8.set(HEAP8);
                  HEAP8 = new Int8Array(newBuffer);
                  HEAP16 = new Int16Array(newBuffer);
                  HEAP32 = new Int32Array(newBuffer);
                  HEAPU8 = new Uint8Array(newBuffer);
                  HEAPU16 = new Uint16Array(newBuffer);
                  HEAPU32 = new Uint32Array(newBuffer);
                  HEAPF32 = new Float32Array(newBuffer);
                  HEAPF64 = new Float64Array(newBuffer);
                  buffer = newBuffer;
                  memory.buffer = buffer;
                  bufferView = HEAPU8;
                }
                return oldPages;
              }

              return {
                "N": $133,
                "O": $159,
                "P": $176,
                "Q": $178,
                "R": $177,
                "S": $158,
                "T": $165,
                "U": $167,
                "V": $157,
                "W": $156,
                "X": $29,
                "Y": $172,
                "Z": $262,
                "_": FUNCTION_TABLE,
                "$": $251,
                "aa": $240,
                "ba": $229,
                "ca": $218,
                "da": $155
              };
            }

            return asmFunc(info);
          }
          // EMSCRIPTEN_END_ASM


        )(a)
      } var Fa = Error, WebAssembly = {}; Aa = []; "object" != typeof WebAssembly && G("no native wasm support detected"); var h, Ga, Ha = !1, H, q, ba, da, fa, ha, ia, Ia, la;
      function r() { var a = h.buffer; z.HEAP8 = q = new Int8Array(a); z.HEAP16 = da = new Int16Array(a); z.HEAP32 = ha = new Int32Array(a); z.HEAPU8 = ba = new Uint8Array(a); z.HEAPU16 = fa = new Uint16Array(a); z.HEAPU32 = ia = new Uint32Array(a); z.HEAPF32 = Ia = new Float32Array(a); z.HEAPF64 = la = new Float64Array(a) } var Ca = z.INITIAL_MEMORY || 16777216; 65536 <= Ca || G("INITIAL_MEMORY should be larger than STACK_SIZE, was " + Ca + "! (STACK_SIZE=65536)");
      if (D) h = z.wasmMemory; else if (z.wasmMemory) h = z.wasmMemory; else if (h = new Ba, !(h.buffer instanceof SharedArrayBuffer)) throw F("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), B && F("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"), Error("bad memory"); r(); Ca = h.buffer.byteLength;
      var Ja, Ka = [], La = [], Ma = [], Na = 0; function Oa() { return noExitRuntime || 0 < Na } function Pa() { var a = z.preRun.shift(); Ka.unshift(a) } var I = 0, Qa = null, Ra = null; function G(a) { if (z.onAbort) z.onAbort(a); a = "Aborted(" + a + ")"; F(a); Ha = !0; H = 1; a = new Fa(a + ". Build with -sASSERTIONS for more info."); na(a); throw a; } var Sa = "data:application/octet-stream;base64,", K; K = "asmjs-sync.wasm"; K.startsWith(Sa) || (K = sa(K));
      function Ta(a) {
        var b = K; try { try { if (b == K && Aa) new Uint8Array(Aa); else if (!wa(b)) if (ua) ua(b); else throw "sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)"; } catch (e) { G(e) } var c = new Da; var d = new Ea(a) } catch (e) {
          throw a = e.toString(), F("failed to compile wasm module: " + a), (a.includes("imported Memory") || a.includes("memory import")) && F("Memory size incompatibility issues may be due to changing INITIAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set INITIAL_MEMORY at runtime to something smaller than it was at compile time)."),
          e;
        } return [d, c]
      } function Ua(a) { this.name = "ExitStatus"; this.message = "Program terminated with exit(" + a + ")"; this.status = a } function Va(a) { a.terminate(); a.onmessage = () => { } } function Wa(a) { (a = L.na[a]) || G(); L.lb(a) }
      function Xa(a, b, c) { c = b + c; for (var d = ""; !(b >= c);) { var e = a[b++]; if (!e) break; if (e & 128) { var f = a[b++] & 63; if (192 == (e & 224)) d += String.fromCharCode((e & 31) << 6 | f); else { var k = a[b++] & 63; e = 224 == (e & 240) ? (e & 15) << 12 | f << 6 | k : (e & 7) << 18 | f << 12 | k << 6 | a[b++] & 63; 65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) } } else d += String.fromCharCode(e) } return d } function Ya(a) { if (D) return Za(1, 1, a); H = a; if (!Oa()) { L.qb(); if (z.onExit) z.onExit(a); Ha = !0 } pa(a, new Ua(a)) }
      function $a(a) { H = a; if (D) throw ab(a), "unwind"; Ya(a) } function bb(a) { a instanceof Ua || "unwind" == a || pa(1, a) }
      var L = {
        ua: [], ta: [], Na: [], na: {}, cb: function () { D && L.eb() }, tb: function () { }, eb: function () { L.receiveObjectTransfer = L.kb; L.threadInitTLS = L.Ma; L.setExitStatus = L.La; noExitRuntime = !1 }, La: function (a) { H = a }, wb: ["$terminateWorker"], qb: function () { for (var a of L.ta) Va(a); for (a of L.ua) Va(a); L.ua = []; L.ta = []; L.na = [] }, lb: function (a) { var b = a.ra; delete L.na[b]; L.ua.push(a); L.ta.splice(L.ta.indexOf(a), 1); a.ra = 0; cb(b) }, kb: function () { }, Ma: function () { L.Na.forEach(a => a()) }, hb: a => new Promise(b => {
          a.onmessage = f => {
            f = f.data; var k =
              f.cmd; a.ra && (L.Qa = a.ra); if (f.targetThread && f.targetThread != db()) { var g = L.na[f.vb]; g ? g.postMessage(f, f.transferList) : F('Internal error! Worker sent a message "' + k + '" to target pthread ' + f.targetThread + ", but that thread no longer exists!") } else if ("checkMailbox" === k) eb(); else if ("spawnThread" === k) { if (k = L.Va()) L.ta.push(k), L.na[f.ra] = k, k.ra = f.ra, g = { cmd: "run", start_routine: f.ub, arg: f.sb, pthread_ptr: f.ra }, B && k.unref(), k.postMessage(g, f.xb) } else if ("cleanupThread" === k) Wa(f.thread); else if ("killThread" ===
                k) f = f.thread, k = L.na[f], delete L.na[f], Va(k), cb(f), L.ta.splice(L.ta.indexOf(k), 1), k.ra = 0; else if ("cancelThread" === k) L.na[f.thread].postMessage({ cmd: "cancel" }); else if ("loaded" === k) a.loaded = !0, b(a); else if ("print" === k) za("Thread " + f.threadId + ": " + f.text); else if ("printErr" === k) F("Thread " + f.threadId + ": " + f.text); else if ("alert" === k) alert("Thread " + f.threadId + ": " + f.text); else if ("setimmediate" === f.target) a.postMessage(f); else if ("callHandler" === k) z[f.handler](...f.args); else k && F("worker sent an unknown command " +
                  k); L.Qa = void 0
          }; a.onerror = f => { F("worker sent an error! " + f.filename + ":" + f.lineno + ": " + f.message); throw f; }; B && (a.on("message", function (f) { a.onmessage({ data: f }) }), a.on("error", function (f) { a.onerror(f) })); var c = [], d = ["onExit", "onAbort", "print", "printErr"], e; for (e of d) z.hasOwnProperty(e) && c.push(e); a.postMessage({ cmd: "load", handlers: c, urlOrBlob: z.mainScriptUrlOrBlob || _scriptDir, wasmMemory: { buffer: h.buffer }, wasmModule: Ga })
        }), gb: function (a) { a() }, Oa: function () {
          var a = sa("asmjs-sync.worker.js"); a = new Worker(a);
          L.ua.push(a)
        }, Va: function () { 0 == L.ua.length && (L.Oa(), L.hb(L.ua[0])); return L.ua.pop() }
      }; z.PThread = L; function fb(a) { for (; 0 < a.length;)a.shift()(z) } z.establishStackSpace = function () { var a = db(), b = x()[a + 52 >> 2]; a = x()[a + 56 >> 2]; gb(b, b - a); hb(b) }; function ab(a) { if (D) return Za(2, 0, a); $a(a) } z.invokeEntryPoint = function (a, b) { a = Ja.get(a)(b); Oa() ? L.La(a) : ib(a) }; function jb(a) { if (void 0 === a) return "_unknown"; a = a.replace(/[^a-zA-Z0-9_]/g, "$"); var b = a.charCodeAt(0); return 48 <= b && 57 >= b ? `_${a}` : a }
      function kb(a, b) { a = jb(a); return { [a]: function () { return b.apply(this, arguments) } }[a] } var M = new function () { this.oa = [void 0]; this.Fa = []; this.get = function (a) { return this.oa[a] }; this.has = function (a) { return void 0 !== this.oa[a] }; this.$a = function (a) { var b = this.Fa.pop() || this.oa.length; this.oa[b] = a; return b }; this.ab = function (a) { this.oa[a] = void 0; this.Fa.push(a) } };
      function lb(a) { var b = Error, c = kb(a, function (d) { this.name = a; this.message = d; d = Error(d).stack; void 0 !== d && (this.stack = this.toString() + "\n" + d.replace(/^Error(:[^\n]*)?\n/, "")) }); c.prototype = Object.create(b.prototype); c.prototype.constructor = c; c.prototype.toString = function () { return void 0 === this.message ? this.name : `${this.name}: ${this.message}` }; return c } var N = void 0; function O(a) { throw new N(a); }
      var mb = a => { a || O("Cannot use deleted val. handle = " + a); return M.get(a).value }, nb = a => { switch (a) { case void 0: return 1; case null: return 2; case !0: return 3; case !1: return 4; default: return M.$a({ Ka: 1, value: a }) } }, ob = void 0, pb = void 0; function P(a) { for (var b = ""; w()[a];)b += pb[w()[a++]]; return b } var qb = []; function rb() { for (; qb.length;) { var a = qb.pop(); a.ea.wa = !1; a["delete"]() } } var sb = void 0, Q = {}; function tb(a, b) { for (void 0 === b && O("ptr should not be undefined"); a.ia;)b = a.ya(b), a = a.ia; return b } var R = {};
      function ub(a) { a = vb(a); var b = P(a); S(a); return b } function wb(a, b) { var c = R[a]; void 0 === c && O(b + " has unknown type " + ub(a)); return c } function xb() { } var yb = !1; function zb(a) { --a.count.value; 0 === a.count.value && (a.ka ? a.la.pa(a.ka) : a.ha.fa.pa(a.ga)) } function Ab(a, b, c) { if (b === c) return a; if (void 0 === c.ia) return null; a = Ab(a, b, c.ia); return null === a ? null : c.Sa(a) } var Bb = {}; function Cb(a, b) { b = tb(a, b); return Q[b] } var Db = void 0; function Eb(a) { throw new Db(a); }
      function Fb(a, b) { b.ha && b.ga || Eb("makeClassHandle requires ptr and ptrType"); !!b.la !== !!b.ka && Eb("Both smartPtrType and smartPtr must be specified"); b.count = { value: 1 }; return T(Object.create(a, { ea: { value: b } })) } function T(a) { if ("undefined" === typeof FinalizationRegistry) return T = b => b, a; yb = new FinalizationRegistry(b => { zb(b.ea) }); T = b => { var c = b.ea; c.ka && yb.register(b, { ea: c }, b); return b }; xb = b => { yb.unregister(b) }; return T(a) } var Gb = {}; function Hb(a) { for (; a.length;) { var b = a.pop(); a.pop()(b) } }
      function Ib(a) { return this.fromWireType(x()[a >> 2]) } var Jb = {}, Kb = {}; function U(a, b, c) { function d(g) { g = c(g); g.length !== a.length && Eb("Mismatched type converter count"); for (var l = 0; l < a.length; ++l)V(a[l], g[l]) } a.forEach(function (g) { Kb[g] = b }); var e = Array(b.length), f = [], k = 0; b.forEach((g, l) => { R.hasOwnProperty(g) ? e[l] = R[g] : (f.push(g), Jb.hasOwnProperty(g) || (Jb[g] = []), Jb[g].push(() => { e[l] = R[g]; ++k; k === f.length && d(e) })) }); 0 === f.length && d(e) }
      function Lb(a) { switch (a) { case 1: return 0; case 2: return 1; case 4: return 2; case 8: return 3; default: throw new TypeError(`Unknown type size: ${a}`); } }
      function V(a, b, c = {}) { if (!("argPackAdvance" in b)) throw new TypeError("registerType registeredInstance requires argPackAdvance"); var d = b.name; a || O(`type "${d}" must have a positive integer typeid pointer`); if (R.hasOwnProperty(a)) { if (c.bb) return; O(`Cannot register type '${d}' twice`) } R[a] = b; delete Kb[a]; Jb.hasOwnProperty(a) && (b = Jb[a], delete Jb[a], b.forEach(e => e())) } function Mb(a) { O(a.ea.ha.fa.name + " instance already deleted") } function W() { }
      function Nb(a, b, c) { if (void 0 === a[b].ja) { var d = a[b]; a[b] = function () { a[b].ja.hasOwnProperty(arguments.length) || O(`Function '${c}' called with an invalid number of arguments (${arguments.length}) - expects one of (${a[b].ja})!`); return a[b].ja[arguments.length].apply(this, arguments) }; a[b].ja = []; a[b].ja[d.va] = d } }
      function Ob(a, b) { z.hasOwnProperty(a) ? (O(`Cannot register public name '${a}' twice`), Nb(z, a, a), z.hasOwnProperty(void 0) && O("Cannot register multiple overloads of a function with the same number of arguments (undefined)!"), z[a].ja[void 0] = b) : z[a] = b } function Pb(a, b, c, d, e, f, k, g) { this.name = a; this.constructor = b; this.qa = c; this.pa = d; this.ia = e; this.Ua = f; this.ya = k; this.Sa = g; this.Ia = [] }
      function Qb(a, b, c) { for (; b !== c;)b.ya || O(`Expected null or instance of ${c.name}, got an instance of ${b.name}`), a = b.ya(a), b = b.ia; return a } function Rb(a, b) { if (null === b) return this.Ca && O(`null is not a valid ${this.name}`), 0; b.ea || O(`Cannot pass "${Sb(b)}" as a ${this.name}`); b.ea.ga || O(`Cannot pass deleted object as a pointer of type ${this.name}`); return Qb(b.ea.ga, b.ea.ha.fa, this.fa) }
      function Tb(a, b) {
        if (null === b) { this.Ca && O(`null is not a valid ${this.name}`); if (this.Ba) { var c = this.Da(); null !== a && a.push(this.pa, c); return c } return 0 } b.ea || O(`Cannot pass "${Sb(b)}" as a ${this.name}`); b.ea.ga || O(`Cannot pass deleted object as a pointer of type ${this.name}`); !this.Aa && b.ea.ha.Aa && O(`Cannot convert argument of type ${b.ea.la ? b.ea.la.name : b.ea.ha.name} to parameter type ${this.name}`); c = Qb(b.ea.ga, b.ea.ha.fa, this.fa); if (this.Ba) switch (void 0 === b.ea.ka && O("Passing raw pointer to smart pointer is illegal"),
          this.pb) { case 0: b.ea.la === this ? c = b.ea.ka : O(`Cannot convert argument of type ${b.ea.la ? b.ea.la.name : b.ea.ha.name} to parameter type ${this.name}`); break; case 1: c = b.ea.ka; break; case 2: if (b.ea.la === this) c = b.ea.ka; else { var d = b.clone(); c = this.jb(c, nb(function () { d["delete"]() })); null !== a && a.push(this.pa, c) } break; default: O("Unsupporting sharing policy") }return c
      }
      function Ub(a, b) { if (null === b) return this.Ca && O(`null is not a valid ${this.name}`), 0; b.ea || O(`Cannot pass "${Sb(b)}" as a ${this.name}`); b.ea.ga || O(`Cannot pass deleted object as a pointer of type ${this.name}`); b.ea.ha.Aa && O(`Cannot convert argument of type ${b.ea.ha.name} to parameter type ${this.name}`); return Qb(b.ea.ga, b.ea.ha.fa, this.fa) }
      function X(a, b, c, d) { this.name = a; this.fa = b; this.Ca = c; this.Aa = d; this.Ba = !1; this.pa = this.jb = this.Da = this.Ja = this.pb = this.ib = void 0; void 0 !== b.ia ? this.toWireType = Tb : (this.toWireType = d ? Rb : Ub, this.ma = null) } function Vb(a, b) { z.hasOwnProperty(a) || Eb("Replacing nonexistant public symbol"); z[a] = b; z[a].va = void 0 }
      function Wb(a, b) { var c = []; return function () { c.length = 0; Object.assign(c, arguments); if (a.includes("j")) { var d = z["dynCall_" + a]; d = c && c.length ? d.apply(null, [b].concat(c)) : d.call(null, b) } else d = Ja.get(b).apply(null, c); return d } } function Y(a, b) { a = P(a); var c = a.includes("j") ? Wb(a, b) : Ja.get(b); "function" != typeof c && O(`unknown function pointer with signature ${a}: ${b}`); return c } var Xb = void 0;
      function $b(a, b) { function c(f) { e[f] || R[f] || (Kb[f] ? Kb[f].forEach(c) : (d.push(f), e[f] = !0)) } var d = [], e = {}; b.forEach(c); throw new Xb(`${a}: ` + d.map(ub).join([", "])); }
      function ac(a, b, c, d, e) {
        var f = b.length; 2 > f && O("argTypes array size mismatch! Must at least get return value and 'this' types!"); var k = null !== b[1] && null !== c, g = !1; for (c = 1; c < b.length; ++c)if (null !== b[c] && void 0 === b[c].ma) { g = !0; break } var l = "void" !== b[0].name, m = f - 2, n = Array(m), p = [], t = []; return function () {
          arguments.length !== m && O(`function ${a} called with ${arguments.length} arguments, expected ${m} args!`); t.length = 0; p.length = k ? 2 : 1; p[0] = e; if (k) { var v = b[1].toWireType(t, this); p[1] = v } for (var u = 0; u < m; ++u)n[u] =
            b[u + 2].toWireType(t, arguments[u]), p.push(n[u]); u = d.apply(null, p); if (g) Hb(t); else for (var C = k ? 1 : 2; C < b.length; C++) { var J = 1 === C ? v : n[C - 2]; null !== b[C].ma && b[C].ma(J) } v = l ? b[0].fromWireType(u) : void 0; return v
        }
      } function bc(a, b) { for (var c = [], d = 0; d < a; d++)c.push(y()[b + 4 * d >> 2]); return c } function cc(a) { a >= M.Ha && 0 === --M.get(a).Ka && M.ab(a) } function Sb(a) { if (null === a) return "null"; var b = typeof a; return "object" === b || "array" === b || "function" === b ? a.toString() : "" + a }
      function dc(a, b) { switch (b) { case 2: return function (c) { var d = this.fromWireType; h.buffer != q.buffer && r(); return d.call(this, Ia[c >> 2]) }; case 3: return function (c) { return this.fromWireType(ja()[c >> 3]) }; default: throw new TypeError("Unknown float type: " + a); } }
      function ec(a, b, c) { switch (b) { case 0: return c ? function (d) { return aa()[d] } : function (d) { return w()[d] }; case 1: return c ? function (d) { return ca()[d >> 1] } : function (d) { return ea()[d >> 1] }; case 2: return c ? function (d) { return x()[d >> 2] } : function (d) { return y()[d >> 2] }; default: throw new TypeError("Unknown integer type: " + a); } } function fc(a, b) { for (var c = "", d = 0; !(d >= b / 2); ++d) { var e = ca()[a + 2 * d >> 1]; if (0 == e) break; c += String.fromCharCode(e) } return c }
      function gc(a, b, c) { void 0 === c && (c = 2147483647); if (2 > c) return 0; c -= 2; var d = b; c = c < 2 * a.length ? c / 2 : a.length; for (var e = 0; e < c; ++e) { var f = a.charCodeAt(e); ca()[b >> 1] = f; b += 2 } ca()[b >> 1] = 0; return b - d } function hc(a) { return 2 * a.length } function ic(a, b) { for (var c = 0, d = ""; !(c >= b / 4);) { var e = x()[a + 4 * c >> 2]; if (0 == e) break; ++c; 65536 <= e ? (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023)) : d += String.fromCharCode(e) } return d }
      function jc(a, b, c) { void 0 === c && (c = 2147483647); if (4 > c) return 0; var d = b; c = d + c - 4; for (var e = 0; e < a.length; ++e) { var f = a.charCodeAt(e); if (55296 <= f && 57343 >= f) { var k = a.charCodeAt(++e); f = 65536 + ((f & 1023) << 10) | k & 1023 } x()[b >> 2] = f; b += 4; if (b + 4 > c) break } x()[b >> 2] = 0; return b - d } function kc(a) { for (var b = 0, c = 0; c < a.length; ++c) { var d = a.charCodeAt(c); 55296 <= d && 57343 >= d && ++c; b += 4 } return b } function lc(a) { if (!Ha) try { if (a(), !Oa()) try { D ? ib(H) : $a(H) } catch (b) { bb(b) } } catch (b) { bb(b) } }
      function mc(a) { "function" === typeof Atomics.rb && (Atomics.rb(x(), a >> 2, a).value.then(eb), a += 128, Atomics.store(x(), a >> 2, 1)) } z.__emscripten_thread_mailbox_await = mc; function eb() { var a = db(); a && (mc(a), lc(() => nc())) } z.checkMailbox = eb; var oc = {}; function pc(a) { var b = oc[a]; return void 0 === b ? P(a) : b } var qc = []; function rc(a) { var b = qc.length; qc.push(a); return b } function sc(a, b) { for (var c = Array(a), d = 0; d < a; ++d)c[d] = wb(y()[b + 4 * d >> 2], "parameter " + d); return c } var tc = [], uc;
      uc = B ? () => { var a = process.hrtime(); return 1E3 * a[0] + a[1] / 1E6 } : () => performance.timeOrigin + performance.now(); function vc(a) { var b = wc(); a = a(); hb(b); return a } function Za(a, b) { var c = arguments.length - 2, d = arguments; return vc(() => { for (var e = xc(8 * c), f = e >> 3, k = 0; k < c; k++) { var g = d[2 + k]; ja()[f + k] = g } return yc(a, c, e, b) }) } var zc = []; function Ac(a) { return D ? Za(3, 1, a) : 52 } function Bc(a, b, c, d, e) { return D ? Za(4, 1, a, b, c, d, e) : 70 } var Cc = [null, [], []];
      function Dc(a, b, c, d) { if (D) return Za(5, 1, a, b, c, d); for (var e = 0, f = 0; f < c; f++) { var k = y()[b >> 2], g = y()[b + 4 >> 2]; b += 8; for (var l = 0; l < g; l++) { var m = w()[k + l], n = Cc[a]; 0 === m || 10 === m ? ((1 === a ? za : F)(Xa(n, 0)), n.length = 0) : n.push(m) } e += g } y()[d >> 2] = e; return 0 } L.cb(); N = z.BindingError = lb("BindingError"); M.oa.push({ value: void 0 }, { value: null }, { value: !0 }, { value: !1 }); M.Ha = M.oa.length; z.count_emval_handles = function () { for (var a = 0, b = M.Ha; b < M.oa.length; ++b)void 0 !== M.oa[b] && ++a; return a }; ob = z.PureVirtualError = lb("PureVirtualError");
      for (var Ec = Array(256), Fc = 0; 256 > Fc; ++Fc)Ec[Fc] = String.fromCharCode(Fc); pb = Ec; z.getInheritedInstanceCount = function () { return Object.keys(Q).length }; z.getLiveInheritedInstances = function () { var a = [], b; for (b in Q) Q.hasOwnProperty(b) && a.push(Q[b]); return a }; z.flushPendingDeletes = rb; z.setDelayFunction = function (a) { sb = a; qb.length && sb && sb(rb) }; Db = z.InternalError = lb("InternalError");
      W.prototype.isAliasOf = function (a) { if (!(this instanceof W && a instanceof W)) return !1; var b = this.ea.ha.fa, c = this.ea.ga, d = a.ea.ha.fa; for (a = a.ea.ga; b.ia;)c = b.ya(c), b = b.ia; for (; d.ia;)a = d.ya(a), d = d.ia; return b === d && c === a };
      W.prototype.clone = function () { this.ea.ga || Mb(this); if (this.ea.xa) return this.ea.count.value += 1, this; var a = T, b = Object, c = b.create, d = Object.getPrototypeOf(this), e = this.ea; a = a(c.call(b, d, { ea: { value: { count: e.count, wa: e.wa, xa: e.xa, ga: e.ga, ha: e.ha, ka: e.ka, la: e.la } } })); a.ea.count.value += 1; a.ea.wa = !1; return a }; W.prototype["delete"] = function () { this.ea.ga || Mb(this); this.ea.wa && !this.ea.xa && O("Object already scheduled for deletion"); xb(this); zb(this.ea); this.ea.xa || (this.ea.ka = void 0, this.ea.ga = void 0) };
      W.prototype.isDeleted = function () { return !this.ea.ga }; W.prototype.deleteLater = function () { this.ea.ga || Mb(this); this.ea.wa && !this.ea.xa && O("Object already scheduled for deletion"); qb.push(this); 1 === qb.length && sb && sb(rb); this.ea.wa = !0; return this }; X.prototype.Wa = function (a) { this.Ja && (a = this.Ja(a)); return a }; X.prototype.Ea = function (a) { this.pa && this.pa(a) }; X.prototype.argPackAdvance = 8; X.prototype.readValueFromPointer = Ib; X.prototype.deleteObject = function (a) { if (null !== a) a["delete"]() };
      X.prototype.fromWireType = function (a) {
        function b() { return this.Ba ? Fb(this.fa.qa, { ha: this.ib, ga: c, la: this, ka: a }) : Fb(this.fa.qa, { ha: this, ga: a }) } var c = this.Wa(a); if (!c) return this.Ea(a), null; var d = Cb(this.fa, c); if (void 0 !== d) { if (0 === d.ea.count.value) return d.ea.ga = c, d.ea.ka = a, d.clone(); d = d.clone(); this.Ea(a); return d } d = this.fa.Ua(c); d = Bb[d]; if (!d) return b.call(this); d = this.Aa ? d.Pa : d.pointerType; var e = Ab(c, this.fa, d.fa); return null === e ? b.call(this) : this.Ba ? Fb(d.fa.qa, { ha: d, ga: e, la: this, ka: a }) : Fb(d.fa.qa,
          { ha: d, ga: e })
      }; Xb = z.UnboundTypeError = lb("UnboundTypeError");
      var Gc = [null, Ya, ab, Ac, Bc, Dc], Hc = "function" == typeof atob ? atob : function (a) {
        var b = "", c = 0; a = a.replace(/[^A-Za-z0-9\+\/=]/g, ""); do {
          var d = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++)); var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++)); var f = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++)); var k = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(c++)); d =
            d << 2 | e >> 4; e = (e & 15) << 4 | f >> 2; var g = (f & 3) << 6 | k; b += String.fromCharCode(d); 64 !== f && (b += String.fromCharCode(e)); 64 !== k && (b += String.fromCharCode(g))
        } while (c < a.length); return b
      };
      function wa(a) { if (a.startsWith(Sa)) { a = a.slice(Sa.length); if ("boolean" == typeof B && B) { var b = Buffer.from(a, "base64"); b = new Uint8Array(b.buffer, b.byteOffset, b.byteLength) } else try { var c = Hc(a), d = new Uint8Array(c.length); for (a = 0; a < c.length; ++a)d[a] = c.charCodeAt(a); b = d } catch (e) { throw Error("Converting base64 string to bytes failed."); } return b } }
      var Kc = {
        E: function (a) { Ic(a, !ra, 1, !qa, 65536); L.Ma() }, y: function (a) { D ? postMessage({ cmd: "cleanupThread", thread: a }) : Wa(a) }, r: function (a, b, c) {
          a = P(a); b = wb(b, "wrapper"); c = mb(c); var d = [].slice, e = b.fa, f = e.qa, k = e.ia.qa, g = e.ia.constructor; a = kb(a, function () { e.ia.Ia.forEach(function (m) { if (this[m] === k[m]) throw new ob(`Pure virtual function ${m} must be implemented in JavaScript`); }.bind(this)); Object.defineProperty(this, "__parent", { value: f }); this.__construct.apply(this, d.call(arguments)) }); f.__construct = function () {
            this ===
              f && O("Pass correct 'this' to __construct"); var m = g.implement.apply(void 0, [this].concat(d.call(arguments))); xb(m); var n = m.ea; m.notifyOnDestruction(); n.xa = !0; Object.defineProperties(this, { ea: { value: n } }); T(this); m = n.ga; m = tb(e, m); Q.hasOwnProperty(m) ? O(`Tried to register registered instance: ${m}`) : Q[m] = this
          }; f.__destruct = function () { this === f && O("Pass correct 'this' to __destruct"); xb(this); var m = this.ea.ga; m = tb(e, m); Q.hasOwnProperty(m) ? delete Q[m] : O(`Tried to unregister unregistered instance: ${m}`) };
          a.prototype = Object.create(f); for (var l in c) a.prototype[l] = c[l]; return nb(a)
        }, l: function (a) {
          var b = Gb[a]; delete Gb[a]; var c = b.Da, d = b.pa, e = b.Ga, f = e.map(k => k.Za).concat(e.map(k => k.nb)); U([a], f, k => {
            var g = {}; e.forEach((l, m) => { var n = k[m], p = l.Xa, t = l.Ya, v = k[m + e.length], u = l.mb, C = l.ob; g[l.Ta] = { read: J => n.fromWireType(p(t, J)), write: (J, ka) => { var A = []; u(C, J, v.toWireType(A, ka)); Hb(A) } } }); return [{
              name: b.name, fromWireType: function (l) { var m = {}, n; for (n in g) m[n] = g[n].read(l); d(l); return m }, toWireType: function (l, m) {
                for (var n in g) if (!(n in
                  m)) throw new TypeError(`Missing field: "${n}"`); var p = c(); for (n in g) g[n].write(p, m[n]); null !== l && l.push(d, p); return p
              }, argPackAdvance: 8, readValueFromPointer: Ib, ma: d
            }]
          })
        }, x: function () { }, L: function (a, b, c, d, e) {
          var f = Lb(c); b = P(b); V(a, {
            name: b, fromWireType: function (k) { return !!k }, toWireType: function (k, g) { return g ? d : e }, argPackAdvance: 8, readValueFromPointer: function (k) {
              if (1 === c) var g = aa(); else if (2 === c) g = ca(); else if (4 === c) g = x(); else throw new TypeError("Unknown boolean type size: " + b); return this.fromWireType(g[k >>
                f])
            }, ma: null
          })
        }, h: function (a, b, c, d, e, f, k, g, l, m, n, p, t) {
          n = P(n); f = Y(e, f); g && (g = Y(k, g)); m && (m = Y(l, m)); t = Y(p, t); var v = jb(n); Ob(v, function () { $b(`Cannot construct ${n} due to unbound types`, [d]) }); U([a, b, c], d ? [d] : [], function (u) {
            u = u[0]; if (d) { var C = u.fa; var J = C.qa } else J = W.prototype; u = kb(v, function () {
              if (Object.getPrototypeOf(this) !== ka) throw new N("Use 'new' to construct " + n); if (void 0 === A.sa) throw new N(n + " has no accessible constructor"); var Yb = A.sa[arguments.length]; if (void 0 === Yb) throw new N(`Tried to invoke ctor of ${n} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(A.sa).toString()}) parameters instead!`);
              return Yb.apply(this, arguments)
            }); var ka = Object.create(J, { constructor: { value: u } }); u.prototype = ka; var A = new Pb(n, u, ka, t, C, f, g, m); A.ia && (void 0 === A.ia.za && (A.ia.za = []), A.ia.za.push(A)); C = new X(n, A, !0, !1); J = new X(n + "*", A, !1, !1); var Zb = new X(n + " const*", A, !1, !0); Bb[a] = { pointerType: J, Pa: Zb }; Vb(v, u); return [C, J, Zb]
          })
        }, d: function (a, b, c, d, e, f, k) {
          var g = bc(c, d); b = P(b); f = Y(e, f); U([], [a], function (l) {
            function m() { $b(`Cannot call ${n} due to unbound types`, g) } l = l[0]; var n = `${l.name}.${b}`; b.startsWith("@@") && (b =
              Symbol[b.substring(2)]); var p = l.fa.constructor; void 0 === p[b] ? (m.va = c - 1, p[b] = m) : (Nb(p, b, n), p[b].ja[c - 1] = m); U([], g, function (t) { t = [t[0], null].concat(t.slice(1)); t = ac(n, t, null, f, k); void 0 === p[b].ja ? (t.va = c - 1, p[b] = t) : p[b].ja[c - 1] = t; if (l.fa.za) for (const v of l.fa.za) v.constructor.hasOwnProperty(b) || (v.constructor[b] = t); return [] }); return []
          })
        }, q: function (a, b, c, d, e, f) {
          0 < b || G(); var k = bc(b, c); e = Y(d, e); U([], [a], function (g) {
            g = g[0]; var l = `constructor ${g.name}`; void 0 === g.fa.sa && (g.fa.sa = []); if (void 0 !== g.fa.sa[b -
              1]) throw new N(`Cannot register multiple constructors with identical number of parameters (${b - 1}) for class '${g.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`); g.fa.sa[b - 1] = () => { $b(`Cannot construct ${g.name} due to unbound types`, k) }; U([], k, function (m) { m.splice(1, 0, null); g.fa.sa[b - 1] = ac(l, m, null, e, f); return [] }); return []
          })
        }, b: function (a, b, c, d, e, f, k, g) {
          var l = bc(c, d); b = P(b); f = Y(e, f); U([], [a], function (m) {
            function n() {
              $b(`Cannot call ${p} due to unbound types`,
                l)
            } m = m[0]; var p = `${m.name}.${b}`; b.startsWith("@@") && (b = Symbol[b.substring(2)]); g && m.fa.Ia.push(b); var t = m.fa.qa, v = t[b]; void 0 === v || void 0 === v.ja && v.className !== m.name && v.va === c - 2 ? (n.va = c - 2, n.className = m.name, t[b] = n) : (Nb(t, b, p), t[b].ja[c - 2] = n); U([], l, function (u) { u = ac(p, u, m, f, k); void 0 === t[b].ja ? (u.va = c - 2, t[b] = u) : t[b].ja[c - 2] = u; return [] }); return []
          })
        }, K: function (a, b) {
          b = P(b); V(a, {
            name: b, fromWireType: function (c) { var d = mb(c); cc(c); return d }, toWireType: function (c, d) { return nb(d) }, argPackAdvance: 8, readValueFromPointer: Ib,
            ma: null
          })
        }, o: function (a, b, c) { c = Lb(c); b = P(b); V(a, { name: b, fromWireType: function (d) { return d }, toWireType: function (d, e) { return e }, argPackAdvance: 8, readValueFromPointer: dc(b, c), ma: null }) }, e: function (a, b, c, d, e) { b = P(b); -1 === e && (e = 4294967295); e = Lb(c); var f = g => g; if (0 === d) { var k = 32 - 8 * c; f = g => g << k >>> k } c = b.includes("unsigned") ? function (g, l) { return l >>> 0 } : function (g, l) { return l }; V(a, { name: b, fromWireType: f, toWireType: c, argPackAdvance: 8, readValueFromPointer: ec(b, e, 0 !== d), ma: null }) }, c: function (a, b, c) {
          function d(f) {
            f >>=
              2; var k = y(); return new e(k.buffer, k[f + 1], k[f])
          } var e = [Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array][b]; c = P(c); V(a, { name: c, fromWireType: d, argPackAdvance: 8, readValueFromPointer: d }, { bb: !0 })
        }, p: function (a, b) {
          b = P(b); var c = "std::string" === b; V(a, {
            name: b, fromWireType: function (d) {
              var e = y()[d >> 2], f = d + 4; if (c) for (var k = f, g = 0; g <= e; ++g) { var l = f + g; if (g == e || 0 == w()[l]) { var m = k; k = l - k; m = m ? Xa(w(), m, k) : ""; if (void 0 === n) var n = m; else n += String.fromCharCode(0), n += m; k = l + 1 } } else {
                n =
                  Array(e); for (g = 0; g < e; ++g)n[g] = String.fromCharCode(w()[f + g]); n = n.join("")
              } S(d); return n
            }, toWireType: function (d, e) {
              e instanceof ArrayBuffer && (e = new Uint8Array(e)); var f = "string" == typeof e; f || e instanceof Uint8Array || e instanceof Uint8ClampedArray || e instanceof Int8Array || O("Cannot pass non-string to std::string"); var k; if (c && f) for (var g = k = 0; g < e.length; ++g) { var l = e.charCodeAt(g); 127 >= l ? k++ : 2047 >= l ? k += 2 : 55296 <= l && 57343 >= l ? (k += 4, ++g) : k += 3 } else k = e.length; l = k; k = Jc(4 + l + 1); g = k + 4; y()[k >> 2] = l; if (c && f) {
                if (l +=
                  1, f = w(), 0 < l) { l = g + l - 1; for (var m = 0; m < e.length; ++m) { var n = e.charCodeAt(m); if (55296 <= n && 57343 >= n) { var p = e.charCodeAt(++m); n = 65536 + ((n & 1023) << 10) | p & 1023 } if (127 >= n) { if (g >= l) break; f[g++] = n } else { if (2047 >= n) { if (g + 1 >= l) break; f[g++] = 192 | n >> 6 } else { if (65535 >= n) { if (g + 2 >= l) break; f[g++] = 224 | n >> 12 } else { if (g + 3 >= l) break; f[g++] = 240 | n >> 18; f[g++] = 128 | n >> 12 & 63 } f[g++] = 128 | n >> 6 & 63 } f[g++] = 128 | n & 63 } } f[g] = 0 }
              } else if (f) for (f = 0; f < l; ++f)m = e.charCodeAt(f), 255 < m && (S(g), O("String has UTF-16 code units that do not fit in 8 bits")),
                w()[g + f] = m; else for (f = 0; f < l; ++f)w()[g + f] = e[f]; null !== d && d.push(S, k); return k
            }, argPackAdvance: 8, readValueFromPointer: Ib, ma: function (d) { S(d) }
          })
        }, k: function (a, b, c) {
          c = P(c); if (2 === b) { var d = fc; var e = gc; var f = hc; var k = () => ea(); var g = 1 } else 4 === b && (d = ic, e = jc, f = kc, k = () => y(), g = 2); V(a, {
            name: c, fromWireType: function (l) { for (var m = y()[l >> 2], n = k(), p, t = l + 4, v = 0; v <= m; ++v) { var u = l + 4 + v * b; if (v == m || 0 == n[u >> g]) t = d(t, u - t), void 0 === p ? p = t : (p += String.fromCharCode(0), p += t), t = u + b } S(l); return p }, toWireType: function (l, m) {
              "string" !=
                typeof m && O(`Cannot pass non-string to C++ string type ${c}`); var n = f(m), p = Jc(4 + n + b); y()[p >> 2] = n >> g; e(m, p + 4, n + b); null !== l && l.push(S, p); return p
            }, argPackAdvance: 8, readValueFromPointer: Ib, ma: function (l) { S(l) }
          })
        }, m: function (a, b, c, d, e, f) { Gb[a] = { name: P(b), Da: Y(c, d), pa: Y(e, f), Ga: [] } }, j: function (a, b, c, d, e, f, k, g, l, m) { Gb[a].Ga.push({ Ta: P(b), Za: c, Xa: Y(d, e), Ya: f, nb: k, mb: Y(g, l), ob: m }) }, M: function (a, b) { b = P(b); V(a, { fb: !0, name: b, argPackAdvance: 0, fromWireType: function () { }, toWireType: function () { } }) }, F: function (a,
          b) { a == b ? setTimeout(() => eb()) : D ? postMessage({ targetThread: a, cmd: "checkMailbox" }) : (a = L.na[a]) && a.postMessage({ cmd: "checkMailbox" }) }, C: function () { return -1 }, D: mc, H: function (a) { B && L.na[a].ref() }, u: function (a, b, c, d, e) { a = qc[a]; b = mb(b); c = pc(c); var f = []; y()[d >> 2] = nb(f); return a(b, c, f, e) }, v: function (a, b, c, d) { a = qc[a]; b = mb(b); c = pc(c); a(b, c, null, d) }, i: cc, n: function (a, b) {
            var c = sc(a, b), d = c[0]; b = d.name + "_$" + c.slice(1).map(function (k) { return k.name }).join("_") + "$"; var e = tc[b]; if (void 0 !== e) return e; var f = Array(a -
              1); e = rc((k, g, l, m) => { for (var n = 0, p = 0; p < a - 1; ++p)f[p] = c[p + 1].readValueFromPointer(m + n), n += c[p + 1].argPackAdvance; k = k[g].apply(k, f); for (p = 0; p < a - 1; ++p)c[p + 1].Ra && c[p + 1].Ra(f[p]); if (!d.fb) return d.toWireType(l, k) }); return tc[b] = e
          }, s: function (a) { 4 < a && (M.get(a).Ka += 1) }, t: function (a) { var b = mb(a); Hb(b); cc(a) }, f: function () { G("") }, G: function () { Na += 1; throw "unwind"; }, g: uc, B: function (a, b, c) { zc.length = b; c >>= 3; for (var d = 0; d < b; d++)zc[d] = ja()[c + d]; return Gc[a].apply(null, zc) }, A: function (a) {
            var b = w().length; a >>>= 0; if (a <=
              b || 2147483648 < a) return !1; for (var c = 1; 4 >= c; c *= 2) { var d = b * (1 + .2 / c); d = Math.min(d, a + 100663296); var e = Math, f = e.min; d = Math.max(a, d); d += (65536 - d % 65536) % 65536; a: { var k = h.buffer; try { h.grow(f.call(e, 2147483648, d) - k.byteLength + 65535 >>> 16); r(); var g = 1; break a } catch (l) { } g = void 0 } if (g) return !0 } return !1
          }, z: $a, J: Ac, w: Bc, I: Dc, a: h || z.wasmMemory
      }, Z = function () {
        function a(c, d) {
          c = c.exports; z.asm = c; L.Na.push(z.asm.O); Ja = z.asm._; La.unshift(z.asm.N); Ga = d; L.gb(() => {
            I--; z.monitorRunDependencies && z.monitorRunDependencies(I);
            if (0 == I && (null !== Qa && (clearInterval(Qa), Qa = null), Ra)) { var e = Ra; Ra = null; e() }
          }); return c
        } var b = { a: Kc }; I++; z.monitorRunDependencies && z.monitorRunDependencies(I); if (z.instantiateWasm) try { return z.instantiateWasm(b, a) } catch (c) { F("Module.instantiateWasm callback failed with error: " + c), na(c) } b = Ta(b); return a(b[0], b[1])
      }(); z.__emscripten_tls_init = Z.O; var db = z._pthread_self = Z.P, vb = Z.Q; z.__embind_initialize_bindings = Z.R; var Ic = z.__emscripten_thread_init = Z.S; z.__emscripten_thread_crashed = Z.T;
      var yc = Z.U, cb = Z.V, ib = z.__emscripten_thread_exit = Z.W, Jc = Z.X, nc = z.__emscripten_check_mailbox = Z.Y, S = Z.Z, gb = Z.$, wc = Z.aa, hb = Z.ba, xc = Z.ca; z.dynCall_jiji = Z.da; z.keepRuntimeAlive = Oa; z.wasmMemory = h; z.ExitStatus = Ua; z.PThread = L; var Lc; Ra = function Mc() { Lc || Nc(); Lc || (Ra = Mc) };
      function Nc() {
        function a() { if (!Lc && (Lc = !0, z.calledRun = !0, !Ha)) { D || fb(La); ma(z); if (z.onRuntimeInitialized) z.onRuntimeInitialized(); if (!D) { if (z.postRun) for ("function" == typeof z.postRun && (z.postRun = [z.postRun]); z.postRun.length;) { var b = z.postRun.shift(); Ma.unshift(b) } fb(Ma) } } } if (!(0 < I)) if (D) ma(z), D || fb(La), startWorker(z); else {
          if (z.preRun) for ("function" == typeof z.preRun && (z.preRun = [z.preRun]); z.preRun.length;)Pa(); fb(Ka); 0 < I || (z.setStatus ? (z.setStatus("Running..."), setTimeout(function () {
            setTimeout(function () { z.setStatus("") },
              1); a()
          }, 1)) : a())
        }
      } if (z.preInit) for ("function" == typeof z.preInit && (z.preInit = [z.preInit]); 0 < z.preInit.length;)z.preInit.pop()(); Nc();


      return loadYoga
    }

  );
})();
// if (typeof exports === 'object' && typeof module === 'object')
//   module.exports = loadYoga;
// else if (typeof define === 'function' && define['amd'])
//   define([], function() { return loadYoga; });
// else if (typeof exports === 'object')
//   exports["loadYoga"] = loadYoga;

export default loadYoga